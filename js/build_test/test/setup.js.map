{
  "version": 3,
  "sources": ["../../test/setup.ts"],
  "sourcesContent": ["// Lightweight DOMMatrix polyfill for pdfjs in Node test environment\nif (typeof (globalThis as any).DOMMatrix === 'undefined') {\n  class DOMMatrixPolyfill {\n    a = 1; b = 0; c = 0; d = 1; e = 0; f = 0;\n    constructor(init?: any) {\n      if (typeof init === 'string') {\n        // ignore matrix string\n      } else if (Array.isArray(init)) {\n        [this.a, this.b, this.c, this.d, this.e, this.f] = init.concat([1,0,0,1,0,0]).slice(0,6);\n      } else if (init && typeof init === 'object') {\n        Object.assign(this, init);\n      }\n    }\n    multiply() { return this; }\n    multiplySelf() { return this; }\n    translateSelf() { return this; }\n    scaleSelf() { return this; }\n    toString() { return '' + this.a + ',' + this.b + ',' + this.c + ',' + this.d + ',' + this.e + ',' + this.f; }\n  }\n  (globalThis as any).DOMMatrix = DOMMatrixPolyfill;\n}\n\n// Polyfill for Promise.withResolvers (Node.js 18+)\nif (typeof (globalThis as any).Promise.withResolvers === 'undefined') {\n  (globalThis as any).Promise.withResolvers = function<T>() {\n    let resolve: (value: T | PromiseLike<T>) => void;\n    let reject: (reason?: any) => void;\n    const promise = new Promise<T>((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    return { promise, resolve: resolve!, reject: reject! };\n  };\n}\n\n// Import polyfills first before any other modules\nimport './polyfills.js';\n\n// Configure pdfjs-dist for testing\nimport * as pdfjsLib from 'pdfjs-dist';\npdfjsLib.GlobalWorkerOptions.workerSrc = 'pdfjs-dist/build/pdf.worker.mjs';\n\nimport 'reflect-metadata';\n\nimport 'reflect-metadata';\nimport * as fs from 'fs';\n\nimport puppeteerControl from '../src/services/puppeteer.js';\nimport { after, before } from 'mocha';\n\n\n// Type declarations for Node.js globals\ndeclare const process: any;\n\n// Aggressive pre-test cleanup\nbefore(async () => {\n  // Kill any existing ESBuild or test processes before starting\n  try {\n    const { execSync } = await import('child_process');\n    execSync('pkill -9 -f \"esbuild.*service\" 2>/dev/null || true', { stdio: 'ignore' });\n    execSync('pkill -9 -f \"mocha.*test\" 2>/dev/null || true', { stdio: 'ignore' });\n    execSync('pkill -9 -f \"tsx.*test\" 2>/dev/null || true', { stdio: 'ignore' });\n    console.log('\uD83E\uDDF9 Pre-test cleanup: killed existing test processes');\n  } catch (e) {\n    // Ignore cleanup errors\n  }\n});\n\n// Global test setup\n// This file runs before all tests and sets up the testing environment\n\n// Configure Puppeteer for Chromium with better WSL support\nprocess.env.PUPPETEER_SKIP_CHROMIUM_DOWNLOAD = 'true';\n\n// Try multiple Chromium paths for different environments\nconst chromiumPaths = [\n  '/usr/bin/chromium-browser',  // WSL/Debian/Ubuntu\n  '/usr/bin/chromium',          // Alpine Linux\n  '/usr/bin/google-chrome',     // Some Linux distributions\n  '/usr/bin/google-chrome-stable', // Chrome stable\n  process.env.PUPPETEER_EXECUTABLE_PATH // Environment override\n].filter(Boolean);\n\n// Find the first available Chromium executable\nlet chromiumFound = false;\nfor (const path of chromiumPaths) {\n  try {\n    if (path && fs.statSync(path).isFile()) {\n      process.env.PUPPETEER_EXECUTABLE_PATH = path;\n      console.log(`\u2705 Using Chromium at: ${path}`);\n      chromiumFound = true;\n      break;\n    }\n  } catch (error) {\n    // Continue to next path\n  }\n}\n\nif (!chromiumFound) {\n  console.warn('\u26A0\uFE0F  Chromium not found. Tests will use mock implementation.');\n  console.warn('   To install Chromium:');\n  console.warn('   - WSL/Debian: sudo apt-get install chromium-browser');\n  console.warn('   - Alpine: apk add chromium');\n\n  // Set environment variable to indicate mock should be used\n  process.env.USE_PUPPETEER_MOCK = 'true';\n}\n\n// Additional Puppeteer options for headless environments\nprocess.env.PUPPETEER_ARGS = [\n  '--no-sandbox',\n  '--disable-setuid-sandbox',\n  '--disable-dev-shm-usage',\n  '--disable-accelerated-2d-canvas',\n  '--no-first-run',\n  '--no-zygote',\n  '--disable-gpu'\n].join(' ');\n\n// Set headless mode for testing\nprocess.env.PUPPETEER_HEADLESS = 'true';\n\n// Enhanced monitoring for test environments\nif (process.env.NODE_ENV === 'test' || process.env.CI === 'true') {\n  let processMonitor: NodeJS.Timeout;\n\n  // Monitor for hanging processes during tests\n  const monitorProcesses = () => {\n    const handleCount = process._getActiveHandles().length;\n    const requestCount = process._getActiveRequests().length;\n\n    if (handleCount > 50 || requestCount > 20) {\n      console.warn(`\u26A0\uFE0F  High resource usage detected: ${handleCount} handles, ${requestCount} requests`);\n    }\n  };\n\n  processMonitor = setInterval(monitorProcesses, 30000);\n\n  // Cleanup monitor on exit\n  process.on('beforeExit', () => {\n    if (processMonitor) {\n      clearInterval(processMonitor);\n    }\n  });\n}\n\n// You can add other global test setup here if needed\n\n// Global after hook to close puppeteer\nafter(async () => {\n  await puppeteerControl.close();\n\n  // Only do minimal cleanup in smart test mode\n  if (process.env.SMART_TEST_CLEANUP === 'true') {\n    console.log('\u2705 Smart cleanup mode: letting script handle cleanup');\n    return;\n  }\n\n  // Force exit in test environments to prevent hanging (only when not in smart mode)\n  if (process.env.NODE_ENV === 'test' || process.env.CI === 'true') {\n    setTimeout(() => {\n      console.log('\u26A0\uFE0F  Forcing process exit after test cleanup');\n      process.exit(0);\n    }, 100);\n  }\n});"],
  "mappings": "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",
  "names": []
}
