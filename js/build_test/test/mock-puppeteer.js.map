{
  "version": 3,
  "sources": ["../../test/mock-puppeteer.ts"],
  "sourcesContent": ["// Mock implementation for Puppeteer when Chromium is not available\n// This allows tests to run even in environments without proper browser setup\n\n// Mock types to match Puppeteer interfaces\ninterface MockCookieParam {\n  name: string;\n  value: string;\n  url?: string;\n  domain?: string;\n  path?: string;\n  secure?: boolean;\n  httpOnly?: boolean;\n  sameSite?: 'Strict' | 'Lax' | 'None';\n  expires?: number;\n}\n\ninterface MockPageSnapshot {\n  title: string;\n  href: string;\n  html: string;\n  text: string;\n  parsed?: any;\n  screenshot?: Buffer;\n  error?: string;\n}\n\n// Mock Page implementation\nclass MockPage {\n  private cookies: MockCookieParam[] = [];\n  private userAgent = 'MockBrowser/1.0';\n\n  async setBypassCSP(enabled: boolean): Promise<void> {\n    // Mock implementation\n  }\n\n  async setViewport(viewport: { width: number; height: number }): Promise<void> {\n    // Mock implementation\n  }\n\n  async exposeFunction(name: string, fn: Function): Promise<void> {\n    // Mock implementation\n  }\n\n  async evaluateOnNewDocument(script: string): Promise<void> {\n    // Mock implementation\n  }\n\n  async setRequestInterception(enabled: boolean): Promise<void> {\n    // Mock implementation\n  }\n\n  async goto(url: string, options?: any): Promise<any> {\n    return { status: () => 200 };\n  }\n\n  async evaluate(script: string | Function): Promise<any> {\n    // Return mock data based on the script\n    if (typeof script === 'string') {\n      if (script.includes('document.title')) {\n        return 'Reading is Fundamental';\n      }\n      if (script.includes('document.body.innerText')) {\n        return 'Mock content for testing purposes.';\n      }\n      if (script.includes('document.body.innerHTML')) {\n        return '<html><body><h1>Mock HTML Content</h1><p>This is test content.</p></body></html>';\n      }\n      if (script.includes('giveSnapshot')) {\n        return {\n          title: 'Reading is Fundamental',\n          href: 'https://example.com',\n          html: '<html><body><h1>Mock Content</h1></body></html>',\n          text: 'Mock content for testing purposes.',\n          parsed: {\n            title: 'Reading is Fundamental',\n            content: '<p>Mock content for testing purposes.</p>',\n            textContent: 'Mock content for testing purposes.',\n            length: 35,\n            excerpt: 'Mock content for testing purposes.',\n            byline: '',\n            dir: 'ltr',\n            siteName: 'Example Site',\n            lang: 'en',\n            publishedTime: ''\n          },\n          imgs: [],\n          pdfs: [],\n          maxElemDepth: 3,\n          elemCount: 5\n        };\n      }\n    }\n    return {};\n  }\n\n  async content(): Promise<string> {\n    return `\n      <html>\n        <head><title>Reading is Fundamental</title></head>\n        <body>\n          <h1>Welcome to the Reading Community</h1>\n          <p>Books open doors to new worlds.</p>\n          <a href=\"https://www.ala.org/advocacy/reading\">Reading Resources</a>\n        </body>\n      </html>\n    `;\n  }\n\n  async screenshot(options?: any): Promise<Buffer> {\n    return Buffer.from('mock-screenshot');\n  }\n\n  async close(): Promise<void> {\n    // Mock implementation\n  }\n\n  async waitForSelector(selector: string, options?: any): Promise<any> {\n    // Mock implementation - return a mock element\n    return {};\n  }\n\n  async waitForTimeout(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, Math.min(ms, 100))); // Fast mock\n  }\n\n  async setCookie(...cookies: MockCookieParam[]): Promise<void> {\n    this.cookies.push(...cookies);\n  }\n\n  async setUserAgent(userAgent: string): Promise<void> {\n    this.userAgent = userAgent;\n  }\n\n  async title(): Promise<string> {\n    return 'Reading is Fundamental';\n  }\n\n  on(event: string, handler: Function): void {\n    // Mock event listener\n  }\n\n  emit(event: string, ...args: any[]): void {\n    // Mock event emitter\n  }\n\n  browserContext(): MockBrowserContext {\n    return new MockBrowserContext();\n  }\n\n  mainFrame(): any {\n    return {\n      childFrames: () => []\n    };\n  }\n\n  isClosed(): boolean {\n    return false;\n  }\n}\n\n// Mock BrowserContext implementation\nclass MockBrowserContext {\n  async newPage(): Promise<MockPage> {\n    return new MockPage();\n  }\n\n  async close(): Promise<void> {\n    // Mock implementation\n  }\n\n  async pages(): Promise<MockPage[]> {\n    return [new MockPage()];\n  }\n}\n\n// Mock Browser implementation\nclass MockBrowser {\n  private pages: MockPage[] = [];\n\n  async newPage(): Promise<MockPage> {\n    const page = new MockPage();\n    this.pages.push(page);\n    return page;\n  }\n\n  defaultBrowserContext(): MockBrowserContext {\n    return new MockBrowserContext();\n  }\n\n  async close(): Promise<void> {\n    // Mock implementation\n  }\n\n  process(): any {\n    return { pid: 12345, kill: () => {} };\n  }\n\n  connected: boolean = true;\n\n  on(event: string, handler: Function): void {\n    // Mock event listener\n  }\n\n  once(event: string, handler: Function): void {\n    // Mock event listener\n  }\n\n  emit(event: string, ...args: any[]): void {\n    // Mock event emitter\n  }\n}\n\n// Mock Puppeteer launch function\nconst mockPuppeteerLaunch = async (options?: any): Promise<MockBrowser> => {\n  return new MockBrowser();\n};\n\n// Mock puppeteer-extra addExtra function\nconst createMockAddExtra = (puppeteer: any) => {\n  return {\n    ...puppeteer,\n    launch: mockPuppeteerLaunch,\n    use: () => {} // Mock plugin system\n  };\n};\n\n// Export the mock implementations\nexport const mockPuppeteer = {\n  launch: mockPuppeteerLaunch\n};\n\nexport const mockAddExtra = createMockAddExtra;\n\nexport default mockPuppeteer;"],
  "mappings": "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",
  "names": []
}
