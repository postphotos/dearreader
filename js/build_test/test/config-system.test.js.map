{
  "version": 3,
  "sources": ["../../test/config-system.test.ts"],
  "sourcesContent": ["import { expect } from 'chai';\nimport fs from 'fs';\nimport path from 'path';\nimport os from 'os';\nimport config from '../src/config.js';\n\ndescribe('Configuration System', () => {\n  let tempDir: string;\n  let originalCwd: string;\n\n  beforeEach(() => {\n    // Create a temporary directory for testing\n    tempDir = fs.mkdtempSync(path.join(os.tmpdir(), 'dearreader-test-'));\n    originalCwd = process.cwd();\n    process.chdir(tempDir);\n  });\n\n  afterEach(() => {\n    // Clean up\n    process.chdir(originalCwd);\n    if (fs.existsSync(tempDir)) {\n      fs.rmSync(tempDir, { recursive: true, force: true });\n    }\n  });\n\n  describe('Environment Variable Loading', () => {\n    it('should load API keys from .env file', () => {\n      // Create test .env file\n      const envContent = `OPENAI_API_KEY=test-openai-key\nOPENROUTER_API_KEY=test-openrouter-key\nGEMINI_API_KEY=test-gemini-key\nPINECONE_API_KEY=test-pinecone-key`;\n      fs.writeFileSync('.env', envContent);\n\n      // Create minimal config files\n      fs.writeFileSync('config.yaml', 'ai_enabled: true\\n');\n      fs.writeFileSync('crawl_pipeline.yaml', `llm_providers:\n  openai-gpt-3.5-turbo:\n    api_key: \"\\${OPENAI_API_KEY}\"\n    model: \"gpt-3.5-turbo\"\n    rpm_limit: 3500\n  openrouter-gpt-4:\n    api_key: \"\\${OPENROUTER_API_KEY}\"\n    model: \"openai/gpt-4\"\n    rpm_limit: 100`);\n\n      // Test that config loads with environment variables\n      const testConfig = config;\n\n      expect(testConfig.ai_providers?.['openai-gpt-3.5-turbo']?.api_key).to.equal('test-openai-key');\n      expect(testConfig.ai_providers?.['openrouter-gpt-4']?.api_key).to.equal('test-openrouter-key');\n    });\n\n    it('should handle missing .env file gracefully', () => {\n      // Create config files without .env\n      fs.writeFileSync('config.yaml', 'ai_enabled: false\\n');\n      fs.writeFileSync('crawl_pipeline.yaml', 'llm_providers: {}');\n\n      const testConfig = config;\n\n      expect(testConfig.ai_enabled).to.equal(false);\n      expect(Object.keys(testConfig.ai_providers || {})).to.have.lengthOf(0);\n    });\n  });\n\n  describe('Configuration File Structure', () => {\n    it('should load config.yaml settings', () => {\n      fs.writeFileSync('config.yaml', `ai_enabled: true\nperformance:\n  max_concurrent_pages: 5\n  max_rps: 30\nconcurrency:\n  max_api_concurrency: 25`);\n\n      const testConfig = config;\n\n      expect(testConfig.ai_enabled).to.equal(true);\n      expect(testConfig.performance.max_concurrent_pages).to.equal(5);\n      expect(testConfig.performance.max_rps).to.equal(30);\n      expect(testConfig.concurrency?.max_api_concurrency).to.equal(25);\n    });\n\n    it('should load crawl_pipeline.yaml AI configurations', () => {\n      fs.writeFileSync('config.yaml', 'ai_enabled: true\\n');\n      fs.writeFileSync('crawl_pipeline.yaml', `llm_providers:\n  test-provider:\n    api_key: \"test-key\"\n    model: \"test-model\"\n    temperature: 0.5\n    rpm_limit: 100\n    max_tokens: 1024\nai_tasks:\n  test_task: \"test-provider\"`);\n\n      const testConfig = config;\n\n      expect(testConfig.ai_providers?.['test-provider']).to.be.an('object');\n      expect(testConfig.ai_providers?.['test-provider']?.api_key).to.equal('test-key');\n      expect(testConfig.ai_providers?.['test-provider']?.model).to.equal('test-model');\n      expect(testConfig.ai_providers?.['test-provider']?.temperature).to.equal(0.5);\n      expect((testConfig.ai_providers?.['test-provider'] as any)?.rpm_limit).to.equal(100);\n      expect(testConfig.ai_tasks?.test_task).to.equal('test-provider');\n    });\n\n    it('should merge config.yaml and crawl_pipeline.yaml correctly', () => {\n      fs.writeFileSync('config.yaml', `ai_enabled: true\nperformance:\n  max_concurrent_pages: 10`);\n      fs.writeFileSync('crawl_pipeline.yaml', `llm_providers:\n  merged-provider:\n    api_key: \"merged-key\"\n    model: \"merged-model\"\nperformance:\n  max_rps: 50`);\n\n      const testConfig = config;\n\n      // config.yaml should take precedence for conflicting keys\n      expect(testConfig.ai_enabled).to.equal(true);\n      expect(testConfig.performance.max_concurrent_pages).to.equal(10);\n      // crawl_pipeline.yaml values should be merged in\n      expect(testConfig.performance.max_rps).to.equal(50);\n      expect(testConfig.ai_providers?.['merged-provider']?.api_key).to.equal('merged-key');\n    });\n  });\n\n  describe('RPM Limits', () => {\n    it('should load RPM limits from crawl_pipeline.yaml', () => {\n      fs.writeFileSync('config.yaml', 'ai_enabled: true\\n');\n      fs.writeFileSync('crawl_pipeline.yaml', `llm_providers:\n  openai-gpt-3.5-turbo:\n    api_key: \"test-key\"\n    rpm_limit: 3500\n  openai-gpt-4:\n    api_key: \"test-key\"\n    rpm_limit: 200\n  gemini-pro:\n    api_key: \"test-key\"\n    rpm_limit: 60`);\n\n      const testConfig = config;\n\n      expect((testConfig.ai_providers?.['openai-gpt-3.5-turbo'] as any)?.rpm_limit).to.equal(3500);\n      expect((testConfig.ai_providers?.['openai-gpt-4'] as any)?.rpm_limit).to.equal(200);\n      expect((testConfig.ai_providers?.['gemini-pro'] as any)?.rpm_limit).to.equal(60);\n    });\n  });\n\n  describe('Environment Variable Substitution', () => {\n    it('should substitute environment variables in YAML', () => {\n      // Set environment variables\n      process.env.TEST_API_KEY = 'substituted-key';\n      process.env.TEST_BASE_URL = 'https://test.example.com';\n\n      fs.writeFileSync('config.yaml', 'ai_enabled: true\\n');\n      fs.writeFileSync('crawl_pipeline.yaml', `llm_providers:\n  test-provider:\n    api_key: \"\\${TEST_API_KEY}\"\n    base_url: \"\\${TEST_BASE_URL}\"\n    model: \"test-model\"`);\n\n      const testConfig = config;\n\n      expect(testConfig.ai_providers?.['test-provider']?.api_key).to.equal('substituted-key');\n      expect((testConfig.ai_providers?.['test-provider'] as any)?.base_url).to.equal('https://test.example.com');\n\n      // Clean up\n      delete process.env.TEST_API_KEY;\n      delete process.env.TEST_BASE_URL;\n    });\n\n    it('should handle default values in environment variable substitution', () => {\n      fs.writeFileSync('config.yaml', 'ai_enabled: true\\n');\n      fs.writeFileSync('crawl_pipeline.yaml', `llm_providers:\n  test-provider:\n    api_key: \"\\${MISSING_VAR:-default-key}\"\n    base_url: \"\\${MISSING_URL:-https://default.example.com}\"`);\n\n      const testConfig = config;\n\n      expect(testConfig.ai_providers?.['test-provider']?.api_key).to.equal('default-key');\n      expect((testConfig.ai_providers?.['test-provider'] as any)?.base_url).to.equal('https://default.example.com');\n    });\n  });\n});"],
  "mappings": "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",
  "names": []
}
