{
  "version": 3,
  "sources": ["../../../src/services/robots-checker.ts"],
  "sourcesContent": ["import axios from 'axios';\n\nexport interface RobotsCheckerResult {\n    allowed: boolean;\n    reason?: string;\n}\n\nexport class RobotsChecker {\n    private robotsTxtCache: Map<string, string> = new Map();\n\n    async checkAccess(url: string, userAgent: string = '*', path: string = '/'): Promise<RobotsCheckerResult> {\n        try {\n            const baseUrl = new URL(url).origin;\n            const robotsUrl = `${baseUrl}/robots.txt`;\n\n            let robotsTxt = this.robotsTxtCache.get(robotsUrl);\n            if (!robotsTxt) {\n                const response = await axios.get(robotsUrl);\n                robotsTxt = response.data as string;\n                this.robotsTxtCache.set(robotsUrl, robotsTxt);\n            }\n\n            const rules = this.parseRobotsTxt(robotsTxt);\n            const applicableRules = rules[userAgent] || rules['*'] || [];\n\n            for (const rule of applicableRules) {\n                if (rule.path === path || path.startsWith(rule.path)) {\n                    return { allowed: rule.allow };\n                }\n            }\n\n            return { allowed: true }; // Default allow if no matching rule\n        } catch (error) {\n            return { allowed: false, reason: 'Failed to fetch or parse robots.txt' };\n        }\n    }\n\n    private parseRobotsTxt(robotsTxt: string): Record<string, { path: string; allow: boolean }[]> {\n        const rules: Record<string, { path: string; allow: boolean }[]> = {};\n        let currentUserAgent = '';\n\n        const lines = robotsTxt.split('\\n');\n        for (const line of lines) {\n            const trimmed = line.trim();\n            if (trimmed.startsWith('User-agent:')) {\n                currentUserAgent = trimmed.split(':')[1].trim();\n                rules[currentUserAgent] = rules[currentUserAgent] || [];\n            } else if (trimmed.startsWith('Disallow:') || trimmed.startsWith('Allow:')) {\n                if (currentUserAgent) {\n                    const parts = trimmed.split(':');\n                    const directive = parts[0].trim();\n                    const path = parts[1].trim();\n                    const allow = directive === 'Allow';\n                    rules[currentUserAgent].push({ path, allow });\n                }\n            }\n        }\n\n        return rules;\n    }\n\n    async isAllowed(url: string, userAgent: string = '*'): Promise<boolean> {\n        const result = await this.checkAccess(url, userAgent);\n        return result.allowed;\n    }\n\n    async getCrawlDelay(url: string, userAgent: string = '*'): Promise<number> {\n        // For now, return a default delay. In a real implementation,\n        // this would parse the Crawl-delay directive from robots.txt\n        return 1; // 1 second default delay\n    }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,WAAW;AAOX,MAAM,cAAc;AAAA,EAApB;AACH,SAAQ,iBAAsC,oBAAI,IAAI;AAAA;AAAA,EAEtD,MAAM,YAAY,KAAa,YAAoB,KAAK,OAAe,KAAmC;AACtG,QAAI;AACA,YAAM,UAAU,IAAI,IAAI,GAAG,EAAE;AAC7B,YAAM,YAAY,GAAG,OAAO;AAE5B,UAAI,YAAY,KAAK,eAAe,IAAI,SAAS;AACjD,UAAI,CAAC,WAAW;AACZ,cAAM,WAAW,MAAM,MAAM,IAAI,SAAS;AAC1C,oBAAY,SAAS;AACrB,aAAK,eAAe,IAAI,WAAW,SAAS;AAAA,MAChD;AAEA,YAAM,QAAQ,KAAK,eAAe,SAAS;AAC3C,YAAM,kBAAkB,MAAM,SAAS,KAAK,MAAM,GAAG,KAAK,CAAC;AAE3D,iBAAW,QAAQ,iBAAiB;AAChC,YAAI,KAAK,SAAS,QAAQ,KAAK,WAAW,KAAK,IAAI,GAAG;AAClD,iBAAO,EAAE,SAAS,KAAK,MAAM;AAAA,QACjC;AAAA,MACJ;AAEA,aAAO,EAAE,SAAS,KAAK;AAAA,IAC3B,SAAS,OAAO;AACZ,aAAO,EAAE,SAAS,OAAO,QAAQ,sCAAsC;AAAA,IAC3E;AAAA,EACJ;AAAA,EAEQ,eAAe,WAAuE;AAC1F,UAAM,QAA4D,CAAC;AACnE,QAAI,mBAAmB;AAEvB,UAAM,QAAQ,UAAU,MAAM,IAAI;AAClC,eAAW,QAAQ,OAAO;AACtB,YAAM,UAAU,KAAK,KAAK;AAC1B,UAAI,QAAQ,WAAW,aAAa,GAAG;AACnC,2BAAmB,QAAQ,MAAM,GAAG,EAAE,CAAC,EAAE,KAAK;AAC9C,cAAM,gBAAgB,IAAI,MAAM,gBAAgB,KAAK,CAAC;AAAA,MAC1D,WAAW,QAAQ,WAAW,WAAW,KAAK,QAAQ,WAAW,QAAQ,GAAG;AACxE,YAAI,kBAAkB;AAClB,gBAAM,QAAQ,QAAQ,MAAM,GAAG;AAC/B,gBAAM,YAAY,MAAM,CAAC,EAAE,KAAK;AAChC,gBAAM,OAAO,MAAM,CAAC,EAAE,KAAK;AAC3B,gBAAM,QAAQ,cAAc;AAC5B,gBAAM,gBAAgB,EAAE,KAAK,EAAE,MAAM,MAAM,CAAC;AAAA,QAChD;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,UAAU,KAAa,YAAoB,KAAuB;AACpE,UAAM,SAAS,MAAM,KAAK,YAAY,KAAK,SAAS;AACpD,WAAO,OAAO;AAAA,EAClB;AAAA,EAEA,MAAM,cAAc,KAAa,YAAoB,KAAsB;AAGvE,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
