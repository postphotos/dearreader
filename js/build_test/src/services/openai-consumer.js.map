{
  "version": 3,
  "sources": ["../../../src/services/openai-consumer.ts"],
  "sourcesContent": ["import config from '../config.js';\nimport { setTimeout as delay } from 'timers/promises';\n\nexport type ChatMessage = {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n};\n\nexport type AIProvider = 'openai' | 'openrouter' | 'gemini';\n\nexport class AIConsumer {\n  provider: AIProvider;\n  providerKey: string; // The full provider-model key from config\n  baseUrl: string;\n  apiKey: string;\n  model: string;\n  temperature: number;\n  parsingPrompt: string;\n  promptOptions: any;\n  timeoutMs: number;\n  maxRetries: number;\n\n  constructor(providerKey: string = 'openai-gpt-3.5-turbo') {\n    this.providerKey = providerKey;\n    this.provider = this.extractProviderFromKey(providerKey);\n\n    const providerConfig = config.ai_providers?.[providerKey];\n\n    if (!providerConfig) {\n      throw new Error(`AI provider '${providerKey}' not configured in config.yaml`);\n    }\n\n    this.baseUrl = (providerConfig.base_url || this.getDefaultBaseUrl(this.provider)).replace(/\\/$/, '');\n    this.apiKey = providerConfig.api_key || this.getEnvApiKey(this.provider) || '';\n    this.model = providerConfig.model || this.getDefaultModel(this.provider);\n    this.temperature = providerConfig.temperature ?? 0.2;\n    this.parsingPrompt = providerConfig.parsing_prompt || 'Extract structured data from the following text:';\n    this.promptOptions = providerConfig.prompt_options || {};\n    this.timeoutMs = providerConfig.request_timeout_ms || 30000;\n    this.maxRetries = providerConfig.max_retries ?? 2;\n  }\n\n  private extractProviderFromKey(providerKey: string): AIProvider {\n    if (providerKey.startsWith('openai-')) {\n      return 'openai';\n    } else if (providerKey.startsWith('openrouter-')) {\n      return 'openrouter';\n    } else if (providerKey.startsWith('gemini-')) {\n      return 'gemini';\n    } else {\n      // Fallback: try to extract from the key\n      const parts = providerKey.split('-');\n      if (parts.length > 0) {\n        const baseProvider = parts[0] as AIProvider;\n        if (['openai', 'openrouter', 'gemini'].includes(baseProvider)) {\n          return baseProvider;\n        }\n      }\n      return 'openai'; // Default fallback\n    }\n  }\n\n  private getDefaultBaseUrl(provider: AIProvider): string {\n    switch (provider) {\n      case 'openai': return 'https://api.openai.com/v1';\n      case 'openrouter': return 'https://openrouter.ai/api/v1';\n      case 'gemini': return 'https://generativelanguage.googleapis.com/v1';\n      default: return 'https://api.openai.com/v1';\n    }\n  }\n\n  private getEnvApiKey(provider: AIProvider): string {\n    switch (provider) {\n      case 'openai': return process.env.OPENAI_API_KEY || '';\n      case 'openrouter': return process.env.OPENROUTER_API_KEY || '';\n      case 'gemini': return process.env.GEMINI_API_KEY || '';\n      default: return '';\n    }\n  }\n\n  private getDefaultModel(provider: AIProvider): string {\n    switch (provider) {\n      case 'openai': return 'gpt-3.5-turbo';\n      case 'openrouter': return 'openrouter/gpt-4';\n      case 'gemini': return 'gemini-pro';\n      default: return 'gpt-3.5-turbo';\n    }\n  }\n\n  private headers(): Record<string, string> {\n    const h: Record<string, string> = { 'Content-Type': 'application/json' };\n    if (this.apiKey) {\n      if (this.provider === 'gemini') {\n        // Gemini uses query parameter for API key\n      } else {\n        h['Authorization'] = `Bearer ${this.apiKey}`;\n      }\n    }\n    return h;\n  }\n\n  private buildRequestBody(messages: ChatMessage[], model?: string, opts: any = {}) {\n    const requestModel = model || this.model;\n    const requestOpts = { ...this.promptOptions, ...opts };\n\n    if (this.provider === 'gemini') {\n      // Gemini has a different API structure\n      return {\n        contents: messages.map(msg => ({\n          parts: [{ text: msg.content }],\n          role: msg.role === 'assistant' ? 'model' : 'user'\n        })),\n        generationConfig: {\n          temperature: this.temperature,\n          maxOutputTokens: requestOpts.max_tokens,\n          topP: requestOpts.top_p,\n        }\n      };\n    } else {\n      // OpenAI and OpenRouter compatible\n      return {\n        model: requestModel,\n        messages: messages.map((m) => ({ role: m.role, content: m.content })),\n        temperature: this.temperature,\n        ...requestOpts\n      };\n    }\n  }\n\n  private buildUrl(endpoint: string): string {\n    if (this.provider === 'gemini') {\n      return `${this.baseUrl}/models/${this.model}:${endpoint}?key=${this.apiKey}`;\n    } else {\n      return `${this.baseUrl}/${endpoint}`;\n    }\n  }\n\n  private async fetchWithRetry(url: string, opts: RequestInit, retriesLeft = this.maxRetries) {\n    try {\n      const controller = new AbortController();\n      const id = setTimeout(() => controller.abort(), this.timeoutMs);\n      const res = await fetch(url, { ...opts, signal: controller.signal });\n      clearTimeout(id);\n      if (!res.ok) {\n        const body = await res.text().catch(() => '');\n        if (retriesLeft > 0 && (res.status === 429 || res.status >= 500)) {\n          await delay(1000);\n          return this.fetchWithRetry(url, opts, retriesLeft - 1);\n        }\n        throw new Error(`${this.provider} request failed ${res.status}: ${body}`);\n      }\n      return res.json();\n    } catch (err) {\n      if (retriesLeft > 0) {\n        await delay(1000);\n        return this.fetchWithRetry(url, opts, retriesLeft - 1);\n      }\n      throw err;\n    }\n  }\n\n  async createChatCompletion(messages: ChatMessage[], model?: string, opts: any = {}) {\n    const endpoint = this.provider === 'gemini' ? 'generateContent' : 'chat/completions';\n    const url = this.buildUrl(endpoint);\n    const body = this.buildRequestBody(messages, model, opts);\n    return this.fetchWithRetry(url, { method: 'POST', headers: this.headers(), body: JSON.stringify(body) });\n  }\n\n  async parseText(text: string, customPrompt?: string): Promise<string> {\n    const prompt = customPrompt || this.parsingPrompt;\n    const messages: ChatMessage[] = [\n      { role: 'system', content: prompt },\n      { role: 'user', content: text }\n    ];\n\n    try {\n      const response = await this.createChatCompletion(messages);\n      if (this.provider === 'gemini') {\n        return response.candidates?.[0]?.content?.parts?.[0]?.text || '';\n      } else {\n        return response.choices?.[0]?.message?.content || '';\n      }\n    } catch (error) {\n      console.error(`Error parsing text with ${this.provider}:`, error);\n      throw error;\n    }\n  }\n}\n\n// Backward compatibility\nexport class OpenAIConsumer extends AIConsumer {\n  constructor() {\n    super('openai-gpt-3.5-turbo'); // Use a valid provider key from config\n  }\n}\n\nexport const openaiConsumer = new OpenAIConsumer();\n\n// New provider instances - use valid provider keys from config\nexport const openrouterConsumer = new AIConsumer('openrouter-gpt-4');\nexport const geminiConsumer = new AIConsumer('gemini-pro');\n"],
  "mappings": "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",
  "names": []
}
