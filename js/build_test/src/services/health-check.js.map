{
  "version": 3,
  "sources": ["../../../src/services/health-check.ts"],
  "sourcesContent": ["import { singleton } from 'tsyringe';\nimport { Logger } from '../shared/logger.js';\nimport { config } from '../shared/config-manager.js';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport { fileURLToPath } from 'url';\nimport { ResponseCacheService } from './cache.js';\n\nexport interface HealthStatus {\n  status: 'healthy' | 'unhealthy' | 'degraded';\n  timestamp: string;\n  uptime: number;\n  version: string;\n  checks: Record<string, HealthCheck>;\n}\n\nexport interface HealthCheck {\n  status: 'pass' | 'fail' | 'warn';\n  timestamp: string;\n  responseTime?: number;\n  details?: any;\n  error?: string;\n}\n\n@singleton()\nexport class HealthCheckService {\n  private logger = new Logger('HealthCheck');\n  private startTime = Date.now();\n\n  constructor(\n    private cacheService: ResponseCacheService\n  ) {}\n\n  /**\n   * Perform comprehensive health check\n   */\n  async performHealthCheck(): Promise<HealthStatus> {\n    const startTime = Date.now();\n    const checks: Record<string, HealthCheck> = {};\n\n    // Run all health checks in parallel\n    const checkPromises = [\n      this.checkMemoryUsage(),\n      this.checkStorageHealth(),\n      this.checkCacheHealth(),\n      this.checkConfigHealth(),\n      this.checkSystemResources()\n    ];\n\n    const results = await Promise.allSettled(checkPromises);\n\n    // Process results\n    checks.memory = this.processResult(results[0], 'memory');\n    checks.storage = this.processResult(results[1], 'storage');\n    checks.cache = this.processResult(results[2], 'cache');\n    checks.config = this.processResult(results[3], 'config');\n    checks.system = this.processResult(results[4], 'system');\n\n    // Determine overall status\n    const overallStatus = this.determineOverallStatus(checks);\n    const responseTime = Date.now() - startTime;\n\n    const health: HealthStatus = {\n      status: overallStatus,\n      timestamp: new Date().toISOString(),\n      uptime: Date.now() - this.startTime,\n      version: process.env.npm_package_version || '1.0.0',\n      checks\n    };\n\n    this.logger.info('Health check completed', {\n      status: overallStatus,\n      responseTime,\n      failedChecks: Object.entries(checks)\n        .filter(([, check]) => check.status === 'fail')\n        .map(([name]) => name)\n    });\n\n    return health;\n  }\n\n  /**\n   * Check memory usage\n   */\n  private async checkMemoryUsage(): Promise<HealthCheck> {\n    const start = Date.now();\n\n    try {\n      const memUsage = process.memoryUsage();\n      const heapUsedMB = Math.round(memUsage.heapUsed / 1024 / 1024);\n      const heapTotalMB = Math.round(memUsage.heapTotal / 1024 / 1024);\n      const rssMB = Math.round(memUsage.rss / 1024 / 1024);\n\n      const heapUsagePercent = (heapUsedMB / heapTotalMB) * 100;\n      let status: 'pass' | 'warn' | 'fail' = 'pass';\n\n      if (heapUsagePercent > 90 || rssMB > 1024) {\n        status = heapUsagePercent > 98 || rssMB > 2048 ? 'fail' : 'warn';\n      }\n\n      return {\n        status,\n        timestamp: new Date().toISOString(),\n        responseTime: Date.now() - start,\n        details: {\n          heapUsed: `${heapUsedMB}MB`,\n          heapTotal: `${heapTotalMB}MB`,\n          rss: `${rssMB}MB`,\n          heapUsagePercent: `${heapUsagePercent.toFixed(1)}%`\n        }\n      };\n\n    } catch (error: any) {\n      return {\n        status: 'fail',\n        timestamp: new Date().toISOString(),\n        responseTime: Date.now() - start,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Check storage health\n   */\n  private async checkStorageHealth(): Promise<HealthCheck> {\n    const start = Date.now();\n\n    try {\n      const storageDir = config.storage.local_directory;\n      const testFile = path.join(storageDir, 'health-check-test.tmp');\n\n      await fs.mkdir(storageDir, { recursive: true });\n      await fs.writeFile(testFile, 'health-check-test', 'utf8');\n      const content = await fs.readFile(testFile, 'utf8');\n      await fs.unlink(testFile);\n\n      if (content !== 'health-check-test') {\n        throw new Error('Storage read/write test failed');\n      }\n\n      return {\n        status: 'pass',\n        timestamp: new Date().toISOString(),\n        responseTime: Date.now() - start,\n        details: {\n          directory: storageDir,\n          writable: true,\n          readable: true\n        }\n      };\n\n    } catch (error: any) {\n      return {\n        status: 'fail',\n        timestamp: new Date().toISOString(),\n        responseTime: Date.now() - start,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Check cache health\n   */\n  private async checkCacheHealth(): Promise<HealthCheck> {\n    const start = Date.now();\n\n    try {\n      const cacheStats = this.cacheService.getStats();\n\n      return {\n        status: 'pass',\n        timestamp: new Date().toISOString(),\n        responseTime: Date.now() - start,\n        details: {\n          enabled: cacheStats.enabled,\n          keys: cacheStats.keys,\n          hitRate: `${(cacheStats.hitRate * 100).toFixed(1)}%`,\n          hits: cacheStats.hits,\n          misses: cacheStats.misses\n        }\n      };\n\n    } catch (error: any) {\n      return {\n        status: 'fail',\n        timestamp: new Date().toISOString(),\n        responseTime: Date.now() - start,\n        error: error.message\n      };\n    }\n  }\n\n  private async checkConfigHealth(): Promise<HealthCheck> {\n    const start = Date.now();\n\n    try {\n      // Use the same path resolution as ConfigManager (ES module equivalent)\n      const __filename = fileURLToPath(import.meta.url);\n      const __dirname = path.dirname(__filename);\n      const configPath = path.resolve(__dirname, '..', '..', '..', 'config.yaml');\n      let configExists = false;\n\n      try {\n        await fs.access(configPath);\n        configExists = true;\n      } catch {\n        // Using defaults\n      }\n\n      return {\n        status: 'pass',\n        timestamp: new Date().toISOString(),\n        responseTime: Date.now() - start,\n        details: {\n          configFileExists: configExists,\n          environment: process.env.NODE_ENV || 'development'\n        }\n      };\n\n    } catch (error: any) {\n      return {\n        status: 'fail',\n        timestamp: new Date().toISOString(),\n        responseTime: Date.now() - start,\n        error: error.message\n      };\n    }\n  }\n\n  private async checkSystemResources(): Promise<HealthCheck> {\n    const start = Date.now();\n\n    try {\n      return {\n        status: 'pass',\n        timestamp: new Date().toISOString(),\n        responseTime: Date.now() - start,\n        details: {\n          nodeVersion: process.version,\n          platform: process.platform,\n          uptime: `${Math.floor(process.uptime())}s`\n        }\n      };\n\n    } catch (error: any) {\n      return {\n        status: 'fail',\n        timestamp: new Date().toISOString(),\n        responseTime: Date.now() - start,\n        error: error.message\n      };\n    }\n  }\n\n  private processResult(result: PromiseSettledResult<HealthCheck>, name: string): HealthCheck {\n    if (result.status === 'fulfilled') {\n      return result.value;\n    } else {\n      this.logger.error(`Health check failed: ${name}`, { error: result.reason });\n      return {\n        status: 'fail',\n        timestamp: new Date().toISOString(),\n        error: result.reason?.message || 'Health check failed'\n      };\n    }\n  }\n\n  private determineOverallStatus(checks: Record<string, HealthCheck>): 'healthy' | 'unhealthy' | 'degraded' {\n    const statuses = Object.values(checks).map(check => check.status);\n\n    if (statuses.includes('fail')) {\n      return 'unhealthy';\n    } else if (statuses.includes('warn')) {\n      return 'degraded';\n    } else {\n      return 'healthy';\n    }\n  }\n\n  async isAlive(): Promise<boolean> {\n    try {\n      return process.uptime() > 0;\n    } catch {\n      return false;\n    }\n  }\n\n  async isReady(): Promise<boolean> {\n    try {\n      const health = await this.performHealthCheck();\n      return health.status === 'healthy' || health.status === 'degraded';\n    } catch {\n      return false;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
