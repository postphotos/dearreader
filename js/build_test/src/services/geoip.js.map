{
  "version": 3,
  "sources": ["../../../src/services/geoip.ts"],
  "sourcesContent": ["import { container, singleton } from 'tsyringe';\nimport fsp from 'fs/promises';\nimport { CityResponse, Reader } from 'maxmind';\nimport { AsyncService, AutoCastable, Prop, runOnce } from 'civkit';\nimport { Logger } from '../shared/index.js';\nimport path from 'path';\n\nexport enum GEOIP_SUPPORTED_LANGUAGES {\n    EN = 'en',\n    ZH_CN = 'zh-CN',\n    JA = 'ja',\n    DE = 'de',\n    FR = 'fr',\n    ES = 'es',\n    PT_BR = 'pt-BR',\n    RU = 'ru',\n}\n\nexport class GeoIPInfo extends AutoCastable {\n    @Prop()\n    code?: string;\n\n    @Prop()\n    name?: string;\n}\n\nexport class GeoIPCountryInfo extends GeoIPInfo {\n    @Prop()\n    eu?: boolean;\n}\n\nexport class GeoIPCityResponse extends AutoCastable {\n    @Prop()\n    continent?: GeoIPInfo;\n\n    @Prop()\n    country?: GeoIPCountryInfo;\n\n    @Prop({\n        arrayOf: GeoIPInfo\n    })\n    subdivisions?: GeoIPInfo[];\n\n    @Prop()\n    city?: string;\n\n    @Prop({\n        arrayOf: Number\n    })\n    coordinates?: [number, number, number];\n\n    @Prop()\n    timezone?: string;\n}\n\n@singleton()\nexport class GeoIPService extends AsyncService {\n\n    logger = new Logger('GeoIPService')\n\n    mmdbCity!: Reader<CityResponse>;\n\n    constructor(\n    ) {\n        super(...arguments);\n    }\n\n\n    override async init() {\n        await this.dependencyReady();\n\n        this.emit('ready');\n    }\n\n    @runOnce()\n    async _lazyload() {\n        const mmdpPath = path.resolve(__dirname, '..', '..', 'licensed', 'GeoLite2-City.mmdb');\n\n        const dbBuff = await fsp.readFile(mmdpPath, { flag: 'r', encoding: null });\n\n        this.mmdbCity = new Reader<CityResponse>(dbBuff);\n\n        this.logger.info(`Loaded GeoIP database, ${dbBuff.byteLength} bytes`);\n    }\n\n\n    async lookupCity(ip: string, lang: GEOIP_SUPPORTED_LANGUAGES = GEOIP_SUPPORTED_LANGUAGES.EN) {\n        await this._lazyload();\n\n        const r = this.mmdbCity.get(ip);\n\n        if (!r) {\n            return undefined;\n        }\n\n        return GeoIPCityResponse.from({\n            continent: r.continent ? {\n                code: r.continent?.code,\n                name: r.continent?.names?.[lang] || r.continent?.names?.en,\n            } : undefined,\n            country: r.country ? {\n                code: r.country?.iso_code,\n                name: r.country?.names?.[lang] || r.country?.names.en,\n                eu: r.country?.is_in_european_union,\n            } : undefined,\n            city: r.city?.names?.[lang] || r.city?.names?.en,\n            subdivisions: r.subdivisions?.map((x) => ({\n                code: x.iso_code,\n                name: x.names?.[lang] || x.names?.en,\n            })),\n            coordinates: r.location ? [\n                r.location.latitude, r.location.longitude, r.location.accuracy_radius\n            ] : undefined,\n            timezone: r.location?.time_zone,\n        });\n    }\n\n}\n\nconst instance = container.resolve(GeoIPService);\n\nexport default instance;\n"],
  "mappings": "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",
  "names": ["GEOIP_SUPPORTED_LANGUAGES"]
}
