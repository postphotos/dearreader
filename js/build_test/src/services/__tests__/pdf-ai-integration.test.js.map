{
  "version": 3,
  "sources": ["../../../../src/services/__tests__/pdf-ai-integration.test.ts"],
  "sourcesContent": ["import { expect } from 'chai';\nimport PDFExtractor from '../pdf-extract.js';\nimport { openaiConsumer, openrouterConsumer, geminiConsumer } from '../openai-consumer.js';\nimport config from '../../config.js';\n\ndescribe('PDF + AI Integration', () => {\n    // Check if AI is enabled and providers are configured\n    const aiEnabled = config.ai_enabled !== false;\n    const hasAnyAI = aiEnabled && (\n        (config.ai_providers?.['openai-gpt-3.5-turbo']?.api_key && config.ai_providers['openai-gpt-3.5-turbo'].api_key !== 'sk-your-openai-key-1') ||\n        (config.ai_providers?.['openrouter-gpt-4']?.api_key && config.ai_providers['openrouter-gpt-4'].api_key !== 'sk-or-v1-your-openrouter-key') ||\n        (config.ai_providers?.['gemini-pro']?.api_key && config.ai_providers['gemini-pro'].api_key !== 'your-gemini-api-key')\n    );\n\n    describe('Configuration Tests', () => {\n        it('should check AI and PDF integration configuration', () => {\n            // This test always passes - it verifies the configuration logic\n            console.log(`AI enabled: ${aiEnabled}`);\n            console.log(`AI providers configured: ${hasAnyAI}`);\n\n            expect(typeof aiEnabled).to.equal('boolean');\n            expect(typeof hasAnyAI).to.equal('boolean');\n        });\n    });\n\n    if (hasAnyAI) {\n        describe('PDF Text Extraction + AI Processing', () => {\n        it('should extract text from PDF and process with AI', async function() {\n            this.timeout(120000); // Allow time for both PDF processing and AI\n\n            // Create a test PDF with meaningful content\n            const testPdf = Buffer.from(\n                '%PDF-1.4\\n' +\n                '1 0 obj\\n' +\n                '<<\\n' +\n                '/Type /Catalog\\n' +\n                '/Pages 2 0 R\\n' +\n                '>>\\n' +\n                'endobj\\n' +\n                '2 0 obj\\n' +\n                '<<\\n' +\n                '/Type /Pages\\n' +\n                '/Kids [3 0 R]\\n' +\n                '/Count 1\\n' +\n                '>>\\n' +\n                'endobj\\n' +\n                '3 0 obj\\n' +\n                '<<\\n' +\n                '/Type /Page\\n' +\n                '/Parent 2 0 R\\n' +\n                '/MediaBox [0 0 612 792]\\n' +\n                '/Contents 4 0 R\\n' +\n                '>>\\n' +\n                'endobj\\n' +\n                '4 0 obj\\n' +\n                '<<\\n' +\n                '/Length 156\\n' +\n                '>>\\n' +\n                'stream\\n' +\n                'BT\\n' +\n                '72 720 Td\\n' +\n                '/F0 12 Tf\\n' +\n                '(DearReader is a web content extraction tool that converts web pages to clean, readable formats.) Tj\\n' +\n                '0 -20 Td\\n' +\n                '(It supports multiple output formats including Markdown, JSON, and plain text.) Tj\\n' +\n                'ET\\n' +\n                'endstream\\n' +\n                'endobj\\n' +\n                'xref\\n' +\n                '0 5\\n' +\n                '0000000000 65535 f\\n' +\n                '0000000009 00000 n\\n' +\n                '0000000058 00000 n\\n' +\n                '0000000115 00000 n\\n' +\n                '0000000271 00000 n\\n' +\n                'trailer\\n' +\n                '<<\\n' +\n                '/Size 5\\n' +\n                '/Root 1 0 R\\n' +\n                '>>\\n' +\n                'startxref\\n' +\n                '355\\n' +\n                '%%EOF',\n                'utf8'\n            );\n\n            // Step 1: Extract text from PDF\n            const extractedText = await PDFExtractor.extractTextFromPDF(testPdf);\n            expect(extractedText).to.be.a('string');\n            expect(extractedText.length).to.be.greaterThan(10);\n            expect(extractedText).to.include('DearReader');\n\n            // Step 2: Process extracted text with AI\n            const aiConsumers = [openaiConsumer, openrouterConsumer, geminiConsumer]\n                .filter(consumer => consumer.apiKey);\n\n            expect(aiConsumers.length).to.be.greaterThan(0, 'At least one AI provider should be configured');\n\n            const aiConsumer = aiConsumers[0]; // Use first available\n\n            try {\n                const summary = await aiConsumer.parseText(extractedText, 'Summarize this document in 2-3 sentences:');\n                expect(summary).to.be.a('string');\n                expect(summary.length).to.be.greaterThan(0);\n\n                console.log(`\uD83D\uDCC4 PDF Text: ${extractedText.substring(0, 100)}...`);\n                console.log(`\uD83E\uDD16 AI Summary (${aiConsumer.provider}): ${summary.substring(0, 100)}...`);\n\n            } catch (error: any) {\n                if (error.message.includes('429') || error.message.includes('rate limit')) {\n                    console.log(`AI provider ${aiConsumer.provider} rate limited, skipping test`);\n                    this.skip();\n                }\n                throw error;\n            }\n        });\n\n        it('should handle PDF with minimal content and use AI for enhancement', async function() {\n            this.timeout(30000); // Reduced timeout\n\n            // Skip this test if OCR dependencies are not available\n            try {\n                const tesseract = await import('tesseract.js');\n                if (!tesseract) {\n                    console.log('\u26A0\uFE0F  Tesseract.js not available, skipping OCR test');\n                    this.skip();\n                    return;\n                }\n            } catch (error) {\n                console.log('\u26A0\uFE0F  OCR dependencies not available, skipping test');\n                this.skip();\n                return;\n            }\n\n            // Create a simple PDF with minimal content that won't require OCR\n            const simplePdf = Buffer.from(\n                '%PDF-1.4\\n' +\n                '1 0 obj\\n<<\\n/Type /Catalog\\n/Pages 2 0 R\\n>>\\nendobj\\n' +\n                '2 0 obj\\n<<\\n/Type /Pages\\n/Kids [3 0 R]\\n/Count 1\\n>>\\nendobj\\n' +\n                '3 0 obj\\n<<\\n/Type /Page\\n/Parent 2 0 R\\n/MediaBox [0 0 612 792]\\n/Contents 4 0 R\\n>>\\nendobj\\n' +\n                '4 0 obj\\n<<\\n/Length 44\\n>>\\nstream\\nBT\\n/F1 12 Tf\\n72 720 Td\\n(Test content) Tj\\nET\\nendstream\\nendobj\\n' +\n                'xref\\n0 5\\n0000000000 65535 f\\n0000000009 00000 n\\n0000000058 00000 n\\n0000000115 00000 n\\n0000000174 00000 n\\n' +\n                'trailer\\n<<\\n/Size 5\\n/Root 1 0 R\\n>>\\nstartxref\\n218\\n%%EOF'\n            );\n\n            try {\n                const text = await PDFExtractor.extractTextFromPDF(simplePdf);\n                expect(text).to.be.a('string');\n                expect(text.length).to.be.greaterThan(0);\n\n                // If we have AI providers, test AI enhancement\n                const aiConsumers = [openaiConsumer, openrouterConsumer, geminiConsumer]\n                    .filter(consumer => consumer.apiKey);\n\n                if (aiConsumers.length > 0) {\n                    const aiConsumer = aiConsumers[0];\n\n                    try {\n                        const enhanced = await aiConsumer.parseText(text, 'Enhance this text:');\n                        expect(enhanced).to.be.a('string');\n                        expect(enhanced.length).to.be.greaterThan(0);\n                    } catch (error: any) {\n                        if (error.message.includes('429') || error.message.includes('rate limit')) {\n                            console.log('\u26A0\uFE0F  AI rate limited, skipping enhancement test');\n                        } else {\n                            throw error;\n                        }\n                    }\n                }\n            } catch (error: any) {\n                console.log(`\u26A0\uFE0F  PDF extraction failed: ${error.message}`);\n                // Don't fail the test for PDF extraction issues\n                expect(error.message).to.include('Failed to extract text from PDF');\n            }\n        });\n    });\n\n    describe('Multi-Provider AI Testing', () => {\n        it('should test all available AI providers with same content', async function() {\n            this.timeout(180000); // Allow time for multiple API calls\n\n            const testContent = 'This is a test document for AI processing. It contains information about web scraping and content extraction.';\n\n            const results: { [key: string]: string } = {};\n\n            // Test each available AI provider\n            const providers = [\n                { name: 'OpenAI', consumer: openaiConsumer },\n                { name: 'OpenRouter', consumer: openrouterConsumer },\n                { name: 'Gemini', consumer: geminiConsumer }\n            ];\n\n            for (const { name, consumer } of providers) {\n                if (!consumer.apiKey) {\n                    console.log(`\u26A0\uFE0F  ${name} not configured, skipping`);\n                    continue;\n                }\n\n                try {\n                    console.log(`\uD83D\uDD04 Testing ${name}...`);\n                    const summary = await consumer.parseText(testContent, 'Summarize this text:');\n                    results[name] = summary;\n                    expect(summary).to.be.a('string');\n                    expect(summary.length).to.be.greaterThan(0);\n                    console.log(`\u2705 ${name} successful: ${summary.substring(0, 50)}...`);\n                } catch (error: any) {\n                    if (error.message.includes('429') || error.message.includes('rate limit')) {\n                        console.log(`\u26A0\uFE0F  ${name} rate limited`);\n                        results[name] = 'Rate limited';\n                    } else {\n                        console.log(`\u274C ${name} failed: ${error.message}`);\n                        results[name] = `Error: ${error.message}`;\n                    }\n                }\n            }\n\n            // At least one provider should have worked\n            const successfulProviders = Object.values(results).filter(result =>\n                !result.startsWith('Error:') && !result.startsWith('Rate limited')\n            );\n\n            expect(successfulProviders.length).to.be.greaterThan(0, 'At least one AI provider should work');\n\n            console.log('\uD83D\uDCCA AI Provider Test Results:');\n            Object.entries(results).forEach(([provider, result]) => {\n                console.log(`   ${provider}: ${result.substring(0, 100)}${result.length > 100 ? '...' : ''}`);\n            });\n        });\n    });\n\n    describe('Error Handling and Fallbacks', () => {\n        it('should handle AI provider failures gracefully', async function() {\n            this.timeout(60000);\n\n            const testContent = 'Test content for error handling.';\n\n            // Test with a consumer that has no API key by creating a new instance\n            const failingConsumer = new (openaiConsumer.constructor as any)('openai');\n            failingConsumer.apiKey = '';\n\n            try {\n                await failingConsumer.parseText(testContent);\n                expect.fail('Should have thrown an error for missing API key');\n            } catch (error: any) {\n                expect(error).to.be.an('error');\n            }\n        });\n\n        it('should handle malformed PDF content', async function() {\n            this.timeout(60000);\n\n            const malformedPdf = Buffer.from('This is not a PDF file');\n\n            try {\n                await PDFExtractor.extractTextFromPDF(malformedPdf);\n                expect.fail('Should have thrown an error for malformed PDF');\n            } catch (error: any) {\n                expect(error.message).to.include('Failed to extract text from PDF');\n            }\n\n            // Even with PDF extraction failure, AI should handle the error gracefully\n            const aiConsumers = [openaiConsumer, openrouterConsumer, geminiConsumer]\n                .filter(consumer => consumer.apiKey);\n\n            if (aiConsumers.length > 0) {\n                const aiConsumer = aiConsumers[0];\n\n                try {\n                    // AI should still be able to process a description of the error\n                    const errorDescription = 'PDF extraction failed due to malformed content';\n                    const response = await aiConsumer.parseText(errorDescription, 'Explain what happened:');\n                    expect(response).to.be.a('string');\n                } catch (error: any) {\n                    if (error.message.includes('429') || error.message.includes('rate limit')) {\n                        this.skip();\n                    }\n                    throw error;\n                }\n            }\n        });\n    });\n\n    describe('Performance Testing', () => {\n        it('should handle concurrent PDF + AI processing', async function() {\n            this.timeout(60000); // Reduced timeout\n\n            const testPdf = Buffer.from(\n                '%PDF-1.4\\n' +\n                '1 0 obj\\n<<\\n/Type /Catalog\\n/Pages 2 0 R\\n>>\\nendobj\\n' +\n                '2 0 obj\\n<<\\n/Type /Pages\\n/Kids [3 0 R]\\n/Count 1\\n>>\\nendobj\\n' +\n                '3 0 obj\\n<<\\n/Type /Page\\n/Parent 2 0 R\\n/MediaBox [0 0 612 792]\\n/Contents 4 0 R\\n>>\\nendobj\\n' +\n                '4 0 obj\\n<<\\n/Length 68\\n>>\\nstream\\nBT\\n72 720 Td\\n/F0 12 Tf\\n(Performance test document content.) Tj\\nET\\nendstream\\nendobj\\n' +\n                'xref\\n0 5\\n0000000000 65535 f\\n0000000009 00000 n\\n0000000058 00000 n\\n0000000115 00000 n\\n0000000200 00000 n\\n' +\n                'trailer\\n<<\\n/Size 5\\n/Root 1 0 R\\n>>\\nstartxref\\n284\\n%%EOF'\n            );\n\n            const aiConsumers = [openaiConsumer, openrouterConsumer, geminiConsumer]\n                .filter(consumer => consumer.apiKey);\n\n            if (aiConsumers.length === 0) {\n                console.log('\u26A0\uFE0F  No AI providers configured, skipping performance test');\n                this.skip();\n                return;\n            }\n\n            const aiConsumer = aiConsumers[0];\n\n            try {\n                // Process just 2 PDFs concurrently instead of 3 to reduce load\n                const concurrentTasks = Array(2).fill(null).map(async () => {\n                    const text = await PDFExtractor.extractTextFromPDF(testPdf);\n                    if (text && text.length > 0) {\n                        const summary = await aiConsumer.parseText(text, 'Summarize:');\n                        return { text, summary };\n                    }\n                    return { text: 'No text extracted', summary: 'N/A' };\n                });\n\n                const results = await Promise.all(concurrentTasks);\n\n                results.forEach(result => {\n                    expect(result).to.have.property('text');\n                    expect(result).to.have.property('summary');\n                });\n\n                console.log(`\u2705 Successfully processed ${results.length} PDFs concurrently with AI`);\n            } catch (error: any) {\n                console.log(`\u26A0\uFE0F  Performance test failed: ${error.message}`);\n                if (error.message.includes('429') || error.message.includes('rate limit')) {\n                    this.skip();\n                } else {\n                    throw error;\n                }\n            }\n        });\n    });\n    } else {\n        describe('AI Disabled Tests', () => {\n            it('should handle AI being disabled gracefully', () => {\n                // When AI is disabled or not configured, the system should still function\n                expect(hasAnyAI).to.equal(false);\n            });\n\n            it('should still be able to extract text from PDFs without AI', async () => {\n                const testPdf = Buffer.from(\n                    '%PDF-1.4\\n' +\n                    '1 0 obj\\n<<\\n/Type /Catalog\\n/Pages 2 0 R\\n>>\\nendobj\\n' +\n                    '2 0 obj\\n<<\\n/Type /Pages\\n/Kids [3 0 R]\\n/Count 1\\n>>\\nendobj\\n' +\n                    '3 0 obj\\n<<\\n/Type /Page\\n/Parent 2 0 R\\n/MediaBox [0 0 612 792]\\n/Contents 4 0 R\\n>>\\nendobj\\n' +\n                    '4 0 obj\\n<<\\n/Length 44\\n>>\\nstream\\nBT\\n72 720 Td\\n/F0 12 Tf\\n(Hello World!) Tj\\nET\\nendstream\\nendobj\\n' +\n                    'xref\\n0 5\\n0000000000 65535 f\\n0000000009 00000 n\\n0000000058 00000 n\\n0000000115 00000 n\\n0000000200 00000 n\\n' +\n                    'trailer\\n' +\n                    '<<\\n/Size 5\\n/Root 1 0 R\\n>>\\nstartxref\\n284\\n%%EOF'\n                );\n\n                const text = await PDFExtractor.extractTextFromPDF(testPdf);\n                expect(text).to.be.a('string');\n                expect(text).to.include('Hello World');\n            });\n        });\n    }\n});"],
  "mappings": "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",
  "names": []
}
