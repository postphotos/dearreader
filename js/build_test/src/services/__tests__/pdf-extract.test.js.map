{
  "version": 3,
  "sources": ["../../../../src/services/__tests__/pdf-extract.test.ts"],
  "sourcesContent": ["import { expect } from 'chai';\nimport PDFExtractor from '../pdf-extract.js';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ndescribe('PDFExtractor', () => {\n    describe('extractTextFromPDF', () => {\n        it('should extract text from a valid PDF buffer', async () => {\n            // Create a minimal valid PDF buffer for testing\n            const pdfBuffer = Buffer.from(\n                '%PDF-1.4\\n' +\n                '1 0 obj\\n' +\n                '<<\\n' +\n                '/Type /Catalog\\n' +\n                '/Pages 2 0 R\\n' +\n                '>>\\n' +\n                'endobj\\n' +\n                '2 0 obj\\n' +\n                '<<\\n' +\n                '/Type /Pages\\n' +\n                '/Kids [3 0 R]\\n' +\n                '/Count 1\\n' +\n                '>>\\n' +\n                'endobj\\n' +\n                '3 0 obj\\n' +\n                '<<\\n' +\n                '/Type /Page\\n' +\n                '/Parent 2 0 R\\n' +\n                '/MediaBox [0 0 612 792]\\n' +\n                '/Contents 4 0 R\\n' +\n                '>>\\n' +\n                'endobj\\n' +\n                '4 0 obj\\n' +\n                '<<\\n' +\n                '/Length 44\\n' +\n                '>>\\n' +\n                'stream\\n' +\n                'BT\\n' +\n                '72 720 Td\\n' +\n                '/F0 12 Tf\\n' +\n                '(Hello, PDF World!) Tj\\n' +\n                'ET\\n' +\n                'endstream\\n' +\n                'endobj\\n' +\n                'xref\\n' +\n                '0 5\\n' +\n                '0000000000 65535 f\\n' +\n                '0000000009 00000 n\\n' +\n                '0000000058 00000 n\\n' +\n                '0000000115 00000 n\\n' +\n                '0000000200 00000 n\\n' +\n                'trailer\\n' +\n                '<<\\n' +\n                '/Size 5\\n' +\n                '/Root 1 0 R\\n' +\n                '>>\\n' +\n                'startxref\\n' +\n                '284\\n' +\n                '%%EOF',\n                'utf8'\n            );\n\n            const result = await PDFExtractor.extractTextFromPDF(pdfBuffer);\n            expect(result).to.be.a('string');\n            expect(result.length).to.be.greaterThan(0);\n        });\n\n        it('should handle empty PDF buffer', async () => {\n            const emptyBuffer = Buffer.from('');\n\n            try {\n                await PDFExtractor.extractTextFromPDF(emptyBuffer);\n                expect.fail('Should have thrown an error');\n            } catch (error: any) {\n                expect(error.message).to.include('Failed to extract text from PDF');\n            }\n        });\n\n        it('should handle invalid PDF buffer', async () => {\n            const invalidBuffer = Buffer.from('This is not a PDF file');\n\n            try {\n                await PDFExtractor.extractTextFromPDF(invalidBuffer);\n                expect.fail('Should have thrown an error');\n            } catch (error: any) {\n                expect(error.message).to.include('Failed to extract text from PDF');\n            }\n        });\n    });\n\n    describe('extractTextWithOCR', () => {\n        it('should check OCR availability', () => {\n            // This test always passes - it verifies OCR availability logic\n            const ocrEnabled = process.env.TEST_OCR_ENABLED === 'true';\n            if (ocrEnabled) {\n                console.log('\u2705 OCR testing is enabled');\n            } else {\n                console.log('\u26A0\uFE0F  OCR testing is disabled (set TEST_OCR_ENABLED=true to enable)');\n            }\n            expect(typeof ocrEnabled).to.equal('boolean');\n        });\n\n        if (process.env.TEST_OCR_ENABLED) {\n            it('should extract text using OCR from image buffer', async function() {\n                // Create a simple test image buffer (this would normally be a scanned PDF)\n                const imageBuffer = Buffer.from('fake-image-data');\n\n                const result = await PDFExtractor.extractTextWithOCR(imageBuffer);\n                expect(result).to.be.a('string');\n            });\n        } else {\n            it('should handle missing OCR configuration gracefully', () => {\n                // When OCR is not enabled, the system should still function\n                expect(process.env.TEST_OCR_ENABLED).to.not.equal('true');\n            });\n        }\n\n        it('should handle OCR errors gracefully', async () => {\n            const invalidBuffer = Buffer.from('');\n\n            try {\n                await PDFExtractor.extractTextWithOCR(invalidBuffer);\n                expect.fail('Should have thrown an error');\n            } catch (error) {\n                expect(error).to.be.an('error');\n            }\n        });\n    });\n});"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,cAAc;AACvB,OAAO,kBAAkB;AAIzB,SAAS,gBAAgB,MAAM;AAC3B,WAAS,sBAAsB,MAAM;AACjC,OAAG,+CAA+C,YAAY;AAE1D,YAAM,YAAY,OAAO;AAAA,QACrB;AAAA,QAiDA;AAAA,MACJ;AAEA,YAAM,SAAS,MAAM,aAAa,mBAAmB,SAAS;AAC9D,aAAO,MAAM,EAAE,GAAG,GAAG,EAAE,QAAQ;AAC/B,aAAO,OAAO,MAAM,EAAE,GAAG,GAAG,YAAY,CAAC;AAAA,IAC7C,CAAC;AAED,OAAG,kCAAkC,YAAY;AAC7C,YAAM,cAAc,OAAO,KAAK,EAAE;AAElC,UAAI;AACA,cAAM,aAAa,mBAAmB,WAAW;AACjD,eAAO,KAAK,6BAA6B;AAAA,MAC7C,SAAS,OAAY;AACjB,eAAO,MAAM,OAAO,EAAE,GAAG,QAAQ,iCAAiC;AAAA,MACtE;AAAA,IACJ,CAAC;AAED,OAAG,oCAAoC,YAAY;AAC/C,YAAM,gBAAgB,OAAO,KAAK,wBAAwB;AAE1D,UAAI;AACA,cAAM,aAAa,mBAAmB,aAAa;AACnD,eAAO,KAAK,6BAA6B;AAAA,MAC7C,SAAS,OAAY;AACjB,eAAO,MAAM,OAAO,EAAE,GAAG,QAAQ,iCAAiC;AAAA,MACtE;AAAA,IACJ,CAAC;AAAA,EACL,CAAC;AAED,WAAS,sBAAsB,MAAM;AACjC,OAAG,iCAAiC,MAAM;AAEtC,YAAM,aAAa,QAAQ,IAAI,qBAAqB;AACpD,UAAI,YAAY;AACZ,gBAAQ,IAAI,+BAA0B;AAAA,MAC1C,OAAO;AACH,gBAAQ,IAAI,6EAAmE;AAAA,MACnF;AACA,aAAO,OAAO,UAAU,EAAE,GAAG,MAAM,SAAS;AAAA,IAChD,CAAC;AAED,QAAI,QAAQ,IAAI,kBAAkB;AAC9B,SAAG,mDAAmD,iBAAiB;AAEnE,cAAM,cAAc,OAAO,KAAK,iBAAiB;AAEjD,cAAM,SAAS,MAAM,aAAa,mBAAmB,WAAW;AAChE,eAAO,MAAM,EAAE,GAAG,GAAG,EAAE,QAAQ;AAAA,MACnC,CAAC;AAAA,IACL,OAAO;AACH,SAAG,sDAAsD,MAAM;AAE3D,eAAO,QAAQ,IAAI,gBAAgB,EAAE,GAAG,IAAI,MAAM,MAAM;AAAA,MAC5D,CAAC;AAAA,IACL;AAEA,OAAG,uCAAuC,YAAY;AAClD,YAAM,gBAAgB,OAAO,KAAK,EAAE;AAEpC,UAAI;AACA,cAAM,aAAa,mBAAmB,aAAa;AACnD,eAAO,KAAK,6BAA6B;AAAA,MAC7C,SAAS,OAAO;AACZ,eAAO,KAAK,EAAE,GAAG,GAAG,GAAG,OAAO;AAAA,MAClC;AAAA,IACJ,CAAC;AAAA,EACL,CAAC;AACL,CAAC;",
  "names": []
}
