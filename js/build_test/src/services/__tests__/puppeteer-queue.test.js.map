{
  "version": 3,
  "sources": ["../../../../src/services/__tests__/puppeteer-queue.test.ts"],
  "sourcesContent": ["import 'reflect-metadata';\nimport { expect } from 'chai';\n\n// Mock browser and page for testing\nconst mockPage = {\n  isClosed: () => false,\n  close: async () => {},\n  setCookie: async () => {},\n  goto: async () => {},\n  waitForSelector: async () => {},\n  evaluate: async () => {},\n  content: async () => '',\n  url: () => 'https://example.com',\n  setUserAgent: async () => {},\n  setExtraHTTPHeaders: async () => {},\n  setViewport: async () => {},\n  screenshot: async () => Buffer.from(''),\n  pdf: async () => Buffer.from(''),\n  frames: () => [],\n  on: () => {},\n  off: () => {},\n  removeListener: () => {}\n} as any;\n\nconst mockBrowser = {\n  newPage: async () => mockPage,\n  close: async () => {},\n  connected: true,\n  process: () => ({ pid: 1234 }),\n  once: () => {},\n  on: () => {},\n  off: () => {},\n  removeListener: () => {}\n} as any;\n\ndescribe('PuppeteerControl Queue System', () => {\n  let puppeteerControl: any;\n\n  beforeEach(() => {\n    // Create a minimal mock of PuppeteerControl focusing on queue functionality\n    puppeteerControl = {\n      requestQueue: [],\n      pagePool: [],\n      maxConcurrentPages: 10,\n      currentActivePages: 0,\n      processing: false,\n\n      emit: function(event: string) {\n        if (event === 'crippled') {\n          this.requestQueue.forEach((req: any) => req.reject(new Error('Service has been crippled')));\n          this.requestQueue.length = 0;\n        }\n      },\n\n      getNextPage: function(priority: number = 0) {\n        return new Promise<any>((resolve, reject) => {\n          const request = { resolve, reject, priority, timestamp: Date.now() };\n          this.requestQueue.push(request);\n\n          const timeout = setTimeout(() => {\n            const index = this.requestQueue.indexOf(request);\n            if (index !== -1) {\n              this.requestQueue.splice(index, 1);\n              reject(new Error('Page request timeout'));\n            }\n          }, 100); // Reduced from 30000ms to 100ms for faster testing\n\n          request.resolve = (page: any) => { clearTimeout(timeout); resolve(page); };\n          request.reject = (error: any) => { clearTimeout(timeout); reject(error); };\n\n          // Intentionally not calling processQueue() to let test control processing\n        });\n      },\n\n      releasePage: function(page: any) {\n        const managedPage = this.pagePool.find((mp: any) => mp.page === page);\n        if (managedPage && managedPage.inUse) {\n          managedPage.inUse = false;\n          managedPage.lastUsed = Date.now();\n          this.currentActivePages--;\n          this.processQueue();\n        }\n      },\n\n      processQueue: function() {\n        if (this.processing || this.requestQueue.length === 0) {\n          return;\n        }\n        this.processing = true;\n\n        this.requestQueue.sort((a: any, b: any) => {\n          if (a.priority !== b.priority) return b.priority - a.priority;\n          return a.timestamp - b.timestamp;\n        });\n\n        while (this.requestQueue.length > 0 && this.currentActivePages < this.maxConcurrentPages) {\n          const request = this.requestQueue.shift()!;\n          let availablePage = this.pagePool.find((mp: any) => !mp.inUse);\n\n          if (availablePage) {\n            availablePage.inUse = true;\n            availablePage.lastUsed = Date.now();\n            this.currentActivePages++;\n            request.resolve(availablePage.page);\n          } else if (this.pagePool.length < this.maxConcurrentPages) {\n            // Create new page with all required properties to match mockPage\n            const newMockPage = {\n              isClosed: () => false,\n              close: async () => {},\n              setCookie: async () => {},\n              goto: async () => {},\n              waitForSelector: async () => {},\n              evaluate: async () => {},\n              content: async () => '',\n              url: () => 'https://example.com',\n              setUserAgent: async () => {},\n              setExtraHTTPHeaders: async () => {},\n              setViewport: async () => {},\n              screenshot: async () => Buffer.from(''),\n              pdf: async () => Buffer.from(''),\n              frames: () => [],\n              on: () => {},\n              off: () => {},\n              removeListener: () => {}\n            };\n            const managedPage = {\n              page: newMockPage,\n              context: {} as any,\n              sn: this.pagePool.length,\n              createdAt: Date.now(),\n              inUse: true,\n              lastUsed: Date.now()\n            };\n              this.pagePool.push(managedPage);\n              this.currentActivePages++;\n              request.resolve(managedPage.page);\n            } else {\n              this.requestQueue.unshift(request);\n              break;\n            }\n          }\n\n          this.processing = false;\n        }\n      };\n    });\n\n  describe('Queue Management', () => {\n    it('should add requests to queue when no pages available', async () => {\n      puppeteerControl.maxConcurrentPages = 0; // Ensure no pages are processed\n      const promise = puppeteerControl.getNextPage(0);\n      // Use a timeout to allow the event loop to process the promise\n      await new Promise(resolve => setTimeout(resolve, 10));\n      expect(puppeteerControl.requestQueue).to.have.lengthOf(1);\n      expect(puppeteerControl.requestQueue[0]).to.have.property('priority', 0);\n      // Prevent unhandled promise rejection for the test\n      promise.catch(() => {});\n    });\n\n    it('should prioritize requests by priority', async () => {\n      puppeteerControl.maxConcurrentPages = 0; // Ensure no pages are processed\n      puppeteerControl.getNextPage(0);\n      puppeteerControl.getNextPage(5);\n      puppeteerControl.getNextPage(1);\n\n      await new Promise(resolve => setTimeout(resolve, 10));\n      puppeteerControl.processQueue();\n\n      // This test should check the order of processing, not the queue state after processing.\n      // For this mock, we'll check the sorted queue before processing would dequeue it.\n      const queue = puppeteerControl.requestQueue;\n      expect(queue).to.have.lengthOf(3);\n      expect(queue[0].priority).to.equal(5);\n      expect(queue[1].priority).to.equal(1);\n      expect(queue[2].priority).to.equal(0);\n    });\n\n    it('should prioritize requests by timestamp when priorities are equal', async () => {\n      puppeteerControl.maxConcurrentPages = 0; // Ensure no pages are processed\n      const promise1 = puppeteerControl.getNextPage(1);\n      await new Promise(resolve => setTimeout(resolve, 10));\n      const promise2 = puppeteerControl.getNextPage(1);\n\n      await new Promise(resolve => setTimeout(resolve, 10));\n      puppeteerControl.processQueue();\n      const queue = puppeteerControl.requestQueue;\n      expect(queue).to.have.lengthOf(2);\n      expect(queue[0].timestamp).to.be.at.most(queue[1].timestamp);\n\n      // Prevent unhandled promise rejection\n      promise1.catch(() => {});\n      promise2.catch(() => {});\n    });\n  });\n\n  describe('Page Pool Management', () => {\n    it('should track active pages correctly', () => {\n      puppeteerControl.currentActivePages = 5;\n      expect(puppeteerControl.currentActivePages).to.equal(5);\n    });\n\n    it('should respect max concurrent pages limit', () => {\n      puppeteerControl.maxConcurrentPages = 1;\n      puppeteerControl.currentActivePages = 1;\n\n      const promise = puppeteerControl.getNextPage(0);\n      puppeteerControl.processQueue();\n      expect(puppeteerControl.requestQueue).to.have.lengthOf(1);\n      promise.catch(() => {});\n    });\n\n    it('should release pages back to pool', () => {\n      const managedPage = { page: mockPage, inUse: true };\n      puppeteerControl.pagePool = [managedPage];\n      puppeteerControl.currentActivePages = 1;\n\n      puppeteerControl.releasePage(mockPage);\n\n      expect(managedPage.inUse).to.be.false;\n      expect(puppeteerControl.currentActivePages).to.equal(0);\n    });\n  });\n\n  describe('Queue Processing', () => {\n    it('should process queue when pages become available', async () => {\n      const managedPage = { page: mockPage, inUse: false };\n      puppeteerControl.pagePool = [managedPage];\n\n      const promise = puppeteerControl.getNextPage(0);\n      puppeteerControl.processQueue();\n\n      const resolvedPage = await promise;\n      expect(resolvedPage).to.equal(mockPage);\n      expect(managedPage.inUse).to.be.true;\n    });\n\n    it('should create new pages when pool is not full', async () => {\n      const promise = puppeteerControl.getNextPage(0);\n      puppeteerControl.processQueue();\n\n      const resolvedPage = await promise;\n      expect(resolvedPage).to.have.property('isClosed');\n      expect(resolvedPage.isClosed()).to.be.false;\n      expect(resolvedPage.url()).to.equal('https://example.com');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle request timeouts', async function() {\n      this.timeout(500); // Reduced from 31000ms to 500ms to match faster mock timeout\n      const promise = puppeteerControl.getNextPage(0);\n      try {\n        await promise;\n      } catch (error: any) {\n        expect(error.message).to.equal('Page request timeout');\n      }\n    });\n\n    it('should reject all queued requests on service crash', async () => {\n      puppeteerControl.maxConcurrentPages = 0; // Ensure no pages are processed\n      const promises = [\n        puppeteerControl.getNextPage(0),\n        puppeteerControl.getNextPage(1)\n      ];\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      expect(puppeteerControl.requestQueue).to.have.lengthOf(2);\n      puppeteerControl.emit('crippled');\n\n      const results = await Promise.all(promises.map(p => p.catch((e: Error) => e)));\n      results.forEach(result => {\n        expect(result).to.be.an('error');\n        expect(result.message).to.equal('Service has been crippled');\n      });\n      expect(puppeteerControl.requestQueue).to.have.lengthOf(0);\n    });\n  });\n\n  describe('Priority Queue Behavior', () => {\n    it('should handle multiple priorities correctly', async () => {\n      puppeteerControl.maxConcurrentPages = 0; // Ensure no pages are processed\n      puppeteerControl.getNextPage(0);\n      puppeteerControl.getNextPage(10);\n      puppeteerControl.getNextPage(5);\n      puppeteerControl.getNextPage(1);\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      puppeteerControl.processQueue();\n\n      const queue = puppeteerControl.requestQueue;\n      expect(queue).to.have.length.of.at.least(4);\n      expect(queue[0].priority).to.equal(10);\n      expect(queue[1].priority).to.equal(5);\n      expect(queue[2].priority).to.equal(1);\n      expect(queue[3].priority).to.equal(0);\n    });\n\n    it('should maintain FIFO order for same priority', async () => {\n      puppeteerControl.maxConcurrentPages = 0; // Ensure no pages are processed\n      puppeteerControl.getNextPage(1);\n      await new Promise(resolve => setTimeout(resolve, 10));\n      puppeteerControl.getNextPage(1);\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      puppeteerControl.processQueue();\n      const queue = puppeteerControl.requestQueue;\n      expect(queue).to.have.length.of.at.least(2);\n      expect(queue[0].timestamp).to.be.at.most(queue[1].timestamp);\n    });\n  });\n});\n"],
  "mappings": "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",
  "names": []
}
