{
  "version": 3,
  "sources": ["../../../../src/services/__tests__/ai-task-manager.test.ts"],
  "sourcesContent": ["import { expect } from 'chai';\nimport {\n    getAIConsumerForTask,\n    getAIConsumerWithFallback,\n    getAvailableTasks,\n    getTaskConfig\n} from '../ai-task-manager.js';\nimport config from '../../config.js';\n\ndescribe('AI Task Manager', () => {\n    // Check if AI is enabled in config\n    const aiEnabled = config.ai_enabled !== false;\n    describe('Configuration Tests', () => {\n        it('should check AI enable/disable configuration', () => {\n            // This test always passes - it verifies the AI enable/disable logic\n            if (aiEnabled) {\n                console.log('\u2705 AI processing is enabled');\n            } else {\n                console.log('\u26A0\uFE0F  AI processing is disabled');\n            }\n            expect(typeof aiEnabled).to.equal('boolean');\n        });\n    });\n\n    if (aiEnabled) {\n        describe('getAIConsumerForTask', () => {\n            it('should return primary consumer for parse_pdf task', () => {\n                const consumer = getAIConsumerForTask('parse_pdf', false);\n                expect(consumer).to.not.be.null;\n                expect(consumer?.provider).to.equal('openai');\n                expect(consumer?.baseUrl).to.include('127.0.0.1');\n            });\n\n            it('should return backup consumer for parse_pdf task', () => {\n                const consumer = getAIConsumerForTask('parse_pdf', true);\n                expect(consumer).to.not.be.null;\n                expect(consumer?.provider).to.equal('openrouter');\n                expect(consumer?.baseUrl).to.include('openrouter.ai');\n            });\n\n            it('should return primary consumer for validate_format task', () => {\n                const consumer = getAIConsumerForTask('validate_format', false);\n                expect(consumer).to.not.be.null;\n                expect(consumer?.provider).to.equal('openrouter');\n            });\n\n            it('should return backup consumer for validate_format task', () => {\n                const consumer = getAIConsumerForTask('validate_format', true);\n                expect(consumer).to.not.be.null;\n                expect(consumer?.provider).to.equal('openai');\n            });\n\n            it('should return default consumer for unknown task', () => {\n                const consumer = getAIConsumerForTask('unknown_task', false);\n                expect(consumer).to.not.be.null;\n                expect(consumer?.provider).to.equal('openai'); // default\n            });\n\n            it('should return default backup consumer for unknown task', () => {\n                const consumer = getAIConsumerForTask('unknown_task', true);\n                expect(consumer).to.not.be.null;\n                expect(consumer?.provider).to.equal('openrouter'); // default_backup\n            });\n\n            it('should return null for invalid provider', () => {\n                // Temporarily modify config to test error handling\n                const originalTasks = config.ai_tasks;\n                config.ai_tasks = { ...originalTasks, test_invalid: 'invalid_provider' };\n\n                const consumer = getAIConsumerForTask('test_invalid', false);\n                expect(consumer).to.be.null;\n\n                // Restore original config\n                config.ai_tasks = originalTasks;\n            });\n        });\n\n        describe('getAIConsumerWithFallback', () => {\n            it('should return primary consumer when available', () => {\n                const consumer = getAIConsumerWithFallback('parse_pdf');\n                expect(consumer).to.not.be.null;\n                expect(consumer?.provider).to.equal('openai');\n            });\n\n            it('should fallback to backup when primary fails', () => {\n                // Temporarily modify config to simulate primary failure\n                const originalTasks = config.ai_tasks;\n                config.ai_tasks = {\n                    ...originalTasks,\n                    test_fallback: 'invalid_provider',\n                    test_fallback_backup: 'openrouter-gpt-4'\n                };\n\n                const consumer = getAIConsumerWithFallback('test_fallback');\n                expect(consumer).to.not.be.null;\n                expect(consumer?.provider).to.equal('openrouter');\n\n                // Restore original config\n                config.ai_tasks = originalTasks;\n            });\n\n            it('should fallback to default when both primary and backup fail', () => {\n                // Temporarily modify config to simulate both failing\n                const originalTasks = config.ai_tasks;\n                config.ai_tasks = {\n                    ...originalTasks,\n                    test_double_fallback: 'invalid_provider',\n                    test_double_fallback_backup: 'invalid_provider2'\n                };\n\n                const consumer = getAIConsumerWithFallback('test_double_fallback');\n                expect(consumer).to.not.be.null;\n                expect(consumer?.provider).to.equal('openai'); // default\n\n                // Restore original config\n                config.ai_tasks = originalTasks;\n            });\n        });\n\n        describe('getAvailableTasks', () => {\n            it('should return all configured tasks', () => {\n                const tasks = getAvailableTasks();\n                expect(tasks).to.be.an('array');\n                expect(tasks).to.include('parse_pdf');\n                expect(tasks).to.include('validate_format');\n                expect(tasks).to.include('edit_crawl');\n                expect(tasks).to.include('general_chat');\n                expect(tasks).to.include('code_analysis');\n                expect(tasks).to.include('default');\n            });\n\n            it('should include backup tasks', () => {\n                const tasks = getAvailableTasks();\n                expect(tasks).to.include('parse_pdf_backup');\n                expect(tasks).to.include('validate_format_backup');\n            });\n        });\n\n        describe('getTaskConfig', () => {\n            it('should return primary and backup config for parse_pdf', () => {\n                const config = getTaskConfig('parse_pdf');\n                expect(config.primary).to.equal('openai-gpt-3.5-turbo');\n                expect(config.backup).to.equal('openrouter-gpt-4');\n            });\n\n            it('should return primary and backup config for validate_format', () => {\n                const config = getTaskConfig('validate_format');\n                expect(config.primary).to.equal('openrouter-gpt-4');\n                expect(config.backup).to.equal('openai-gpt-4');\n            });\n\n            it('should return null for unknown task', () => {\n                const config = getTaskConfig('unknown_task');\n                expect(config.primary).to.be.null;\n                expect(config.backup).to.be.null;\n            });\n        });\n\n        describe('Integration Tests', () => {\n            it('should handle real API calls with fallback', async function() {\n                this.timeout(30000); // Increase timeout for API calls\n\n                const consumer = getAIConsumerWithFallback('general_chat');\n                expect(consumer).to.not.be.null;\n\n                try {\n                    const result = await consumer!.parseText('Hello, respond with \"test successful\"');\n                    expect(result).to.be.a('string');\n                    expect(result.length).to.be.greaterThan(0);\n                } catch (error) {\n                    // Allow API errors in test environment\n                    console.log('API call failed (expected in test environment):', error instanceof Error ? error.message : String(error));\n                }\n            });\n\n            it('should work with different task types', () => {\n                const tasks = ['parse_pdf', 'validate_format', 'edit_crawl', 'general_chat', 'code_analysis'];\n\n                tasks.forEach(task => {\n                    const consumer = getAIConsumerWithFallback(task);\n                    expect(consumer).to.not.be.null;\n                    expect(consumer?.provider).to.be.oneOf(['openai', 'openrouter', 'gemini']);\n                });\n            });\n\n            it('should maintain consumer properties', () => {\n                const consumer = getAIConsumerWithFallback('parse_pdf');\n                expect(consumer).to.not.be.null;\n                expect(consumer?.baseUrl).to.be.a('string');\n                expect(consumer?.model).to.be.a('string');\n                expect(consumer?.temperature).to.be.a('number');\n            });\n        });\n\n        describe('Error Handling', () => {\n            it('should handle missing ai_tasks configuration', () => {\n                const originalTasks = config.ai_tasks;\n                config.ai_tasks = undefined;\n\n                const consumer = getAIConsumerForTask('parse_pdf', false);\n                expect(consumer).to.be.null;\n\n                // Restore original config\n                config.ai_tasks = originalTasks;\n            });\n\n            it('should handle empty ai_tasks configuration', () => {\n                const originalTasks = config.ai_tasks;\n                config.ai_tasks = {};\n\n                const consumer = getAIConsumerForTask('parse_pdf', false);\n                expect(consumer).to.be.null;\n\n                // Restore original config\n                config.ai_tasks = originalTasks;\n            });\n        });\n    } else {\n        describe('AI Disabled Tests', () => {\n            it('should handle AI being disabled gracefully', () => {\n                // When AI is disabled, the system should still function without AI features\n                expect(aiEnabled).to.equal(false);\n            });\n\n            it('should return null for AI consumers when disabled', () => {\n                const consumer = getAIConsumerForTask('parse_pdf', false);\n                expect(consumer).to.be.null;\n            });\n\n            it('should return empty task list when AI is disabled', () => {\n                const tasks = getAvailableTasks();\n                expect(tasks).to.be.an('array');\n                // Tasks might still be returned but consumers will be null\n            });\n        });\n    }\n});"],
  "mappings": "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",
  "names": ["config"]
}
