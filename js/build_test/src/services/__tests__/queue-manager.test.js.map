{
  "version": 3,
  "sources": ["../../../../src/services/__tests__/queue-manager.test.ts"],
  "sourcesContent": ["import 'reflect-metadata';\nimport { expect } from 'chai';\nimport { QueueManager } from '../queue-manager.js';\nimport { Logger } from '../../shared/logger.js';\n\ndescribe('QueueManager', () => {\n  let queueManager: QueueManager;\n  let mockLogger: Logger;\n\n  beforeEach(() => {\n    mockLogger = {\n      info: () => {},\n      error: () => {},\n      warn: () => {},\n      debug: () => {}\n    } as any;\n\n    queueManager = new QueueManager(mockLogger);\n  });\n\n  describe('Basic Queue Operations', () => {\n    it('should initialize with empty queue', () => {\n      expect(queueManager.getAllTasks()).to.be.an('array').that.is.empty;\n      const stats = queueManager.getStatistics();\n      expect(stats.total_requests).to.equal(0);\n      expect(stats.active_requests).to.equal(0);\n      expect(stats.pending_requests).to.equal(0);\n    });\n\n    it('should enqueue tasks correctly', async () => {\n      const taskId = await queueManager.enqueue({\n        url: 'https://example.com',\n        priority: 1\n      });\n\n      expect(taskId).to.be.a('string');\n      expect(queueManager.getAllTasks()).to.have.lengthOf(1);\n\n      const task = queueManager.getTask(taskId);\n      expect(task).to.exist;\n      expect(task!.url).to.equal('https://example.com');\n      expect(task!.priority).to.equal(1);\n      expect(task!.status).to.equal('pending');\n    });\n\n    it('should dequeue tasks in priority order', async () => {\n      // Add tasks with different priorities\n      const taskId1 = await queueManager.enqueue({ url: 'https://low.com', priority: 1 });\n      const taskId2 = await queueManager.enqueue({ url: 'https://high.com', priority: 5 });\n      const taskId3 = await queueManager.enqueue({ url: 'https://medium.com', priority: 3 });\n\n      const dequeuedTask = await queueManager.dequeue();\n      expect(dequeuedTask).to.exist;\n      expect(dequeuedTask!.url).to.equal('https://high.com');\n      expect(dequeuedTask!.status).to.equal('processing');\n    });\n\n    it('should handle task completion', async () => {\n      const taskId = await queueManager.enqueue({\n        url: 'https://example.com',\n        priority: 1\n      });\n\n      const task = await queueManager.dequeue();\n      expect(task!.status).to.equal('processing');\n\n      queueManager.completeTask(taskId, { result: 'success' });\n\n      const completedTask = queueManager.getTask(taskId);\n      expect(completedTask!.status).to.equal('completed');\n      expect(completedTask!.result).to.deep.equal({ result: 'success' });\n\n      const stats = queueManager.getStatistics();\n      expect(stats.completed_requests).to.equal(1);\n    });\n\n    it('should handle task failure', async () => {\n      const taskId = await queueManager.enqueue({\n        url: 'https://example.com',\n        priority: 1\n      });\n\n      const task = await queueManager.dequeue();\n      expect(task!.status).to.equal('processing');\n\n      queueManager.failTask(taskId, 'Network error');\n\n      const failedTask = queueManager.getTask(taskId);\n      expect(failedTask!.status).to.equal('failed');\n      expect(failedTask!.error).to.equal('Network error');\n\n      const stats = queueManager.getStatistics();\n      expect(stats.failed_requests).to.equal(1);\n    });\n  });\n\n  describe('Queue Limits', () => {\n    it('should reject tasks when queue is full', async () => {\n      // Fill the queue to capacity\n      const maxSize = 1000;\n      for (let i = 0; i < maxSize; i++) {\n        await queueManager.enqueue({\n          url: `https://example${i}.com`,\n          priority: 1\n        });\n      }\n\n      try {\n        await queueManager.enqueue({\n          url: 'https://overflow.com',\n          priority: 1\n        });\n        expect.fail('Should have thrown an error');\n      } catch (error: any) {\n        expect(error.message).to.equal('Queue is full');\n      }\n    });\n\n    it('should not dequeue when at max concurrent limit', async () => {\n      // Mock active tasks at max\n      (queueManager as any).activeTasks = 10;\n\n      await queueManager.enqueue({\n        url: 'https://example.com',\n        priority: 1\n      });\n\n      const task = await queueManager.dequeue();\n      expect(task).to.be.null;\n    });\n  });\n\n  describe('Statistics', () => {\n    it('should track statistics correctly', async () => {\n      // Add and complete a task\n      const taskId1 = await queueManager.enqueue({\n        url: 'https://example.com',\n        priority: 1\n      });\n\n      let stats = queueManager.getStatistics();\n      expect(stats.total_requests).to.equal(1);\n      expect(stats.pending_requests).to.equal(1);\n\n      const task = await queueManager.dequeue();\n      queueManager.completeTask(taskId1);\n\n      stats = queueManager.getStatistics();\n      expect(stats.completed_requests).to.equal(1);\n      expect(stats.pending_requests).to.equal(0);\n    });\n\n    it('should provide comprehensive statistics', () => {\n      const stats = queueManager.getStatistics();\n\n      expect(stats).to.have.property('total_requests');\n      expect(stats).to.have.property('active_requests');\n      expect(stats).to.have.property('pending_requests');\n      expect(stats).to.have.property('completed_requests');\n      expect(stats).to.have.property('failed_requests');\n      expect(stats).to.have.property('max_concurrent');\n    });\n  });\n\n  describe('Queue Management', () => {\n    it('should clear the queue', async () => {\n      await queueManager.enqueue({ url: 'https://example.com', priority: 1 });\n      await queueManager.enqueue({ url: 'https://test.com', priority: 1 });\n\n      expect(queueManager.getAllTasks()).to.have.lengthOf(2);\n\n      queueManager.clear();\n\n      expect(queueManager.getAllTasks()).to.have.lengthOf(0);\n    });\n\n    it('should retrieve tasks by ID', async () => {\n      const taskId = await queueManager.enqueue({\n        url: 'https://example.com',\n        priority: 1\n      });\n\n      const task = queueManager.getTask(taskId);\n      expect(task).to.exist;\n      expect(task!.id).to.equal(taskId);\n\n      const nonExistentTask = queueManager.getTask('non-existent');\n      expect(nonExistentTask).to.be.undefined;\n    });\n  });\n});\n"],
  "mappings": "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",
  "names": []
}
