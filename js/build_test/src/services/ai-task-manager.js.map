{
  "version": 3,
  "sources": ["../../../src/services/ai-task-manager.ts"],
  "sourcesContent": ["import config from '../config.js';\nimport { AIConsumer } from './openai-consumer.js';\n\n// Helper function to get AI consumer for a specific task\nexport function getAIConsumerForTask(taskName: string, useBackup: boolean = false): AIConsumer | null {\n  const taskKey = useBackup ? `${taskName}_backup` : taskName;\n  const providerName = config.ai_tasks?.[taskKey] || config.ai_tasks?.[useBackup ? 'default_backup' : 'default'];\n\n  if (!providerName || !config.ai_providers?.[providerName]) {\n    console.warn(`No AI provider configured for task: ${taskName} (using ${useBackup ? 'backup' : 'primary'})`);\n    return null;\n  }\n\n  try {\n    return new AIConsumer(providerName);\n  } catch (error) {\n    console.error(`Failed to create AI consumer for provider ${providerName}:`, error);\n    return null;\n  }\n}\n\n// Helper function to get AI consumer with automatic fallback\nexport function getAIConsumerWithFallback(taskName: string): AIConsumer | null {\n  // Try primary first\n  let consumer = getAIConsumerForTask(taskName, false);\n  if (consumer) {\n    return consumer;\n  }\n\n  // Try backup\n  consumer = getAIConsumerForTask(taskName, true);\n  if (consumer) {\n    console.log(`Using backup AI provider for task: ${taskName}`);\n    return consumer;\n  }\n\n  // Try default\n  consumer = getAIConsumerForTask('default', false);\n  if (consumer) {\n    console.log(`Using default AI provider for task: ${taskName}`);\n    return consumer;\n  }\n\n  // Try default backup\n  consumer = getAIConsumerForTask('default', true);\n  if (consumer) {\n    console.log(`Using default backup AI provider for task: ${taskName}`);\n    return consumer;\n  }\n\n  console.error(`No AI providers available for task: ${taskName}`);\n  return null;\n}\n\n// Get all available tasks\nexport function getAvailableTasks(): string[] {\n  return Object.keys(config.ai_tasks || {});\n}\n\n// Get task configuration\nexport function getTaskConfig(taskName: string): { primary: string | null, backup: string | null } {\n  const primary = config.ai_tasks?.[taskName] || null;\n  const backup = config.ai_tasks?.[`${taskName}_backup`] || null;\n  return { primary, backup };\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,YAAY;AACnB,SAAS,kBAAkB;AAGpB,SAAS,qBAAqB,UAAkB,YAAqB,OAA0B;AACpG,QAAM,UAAU,YAAY,GAAG,QAAQ,YAAY;AACnD,QAAM,eAAe,OAAO,WAAW,OAAO,KAAK,OAAO,WAAW,YAAY,mBAAmB,SAAS;AAE7G,MAAI,CAAC,gBAAgB,CAAC,OAAO,eAAe,YAAY,GAAG;AACzD,YAAQ,KAAK,uCAAuC,QAAQ,WAAW,YAAY,WAAW,SAAS,GAAG;AAC1G,WAAO;AAAA,EACT;AAEA,MAAI;AACF,WAAO,IAAI,WAAW,YAAY;AAAA,EACpC,SAAS,OAAO;AACd,YAAQ,MAAM,6CAA6C,YAAY,KAAK,KAAK;AACjF,WAAO;AAAA,EACT;AACF;AAGO,SAAS,0BAA0B,UAAqC;AAE7E,MAAI,WAAW,qBAAqB,UAAU,KAAK;AACnD,MAAI,UAAU;AACZ,WAAO;AAAA,EACT;AAGA,aAAW,qBAAqB,UAAU,IAAI;AAC9C,MAAI,UAAU;AACZ,YAAQ,IAAI,sCAAsC,QAAQ,EAAE;AAC5D,WAAO;AAAA,EACT;AAGA,aAAW,qBAAqB,WAAW,KAAK;AAChD,MAAI,UAAU;AACZ,YAAQ,IAAI,uCAAuC,QAAQ,EAAE;AAC7D,WAAO;AAAA,EACT;AAGA,aAAW,qBAAqB,WAAW,IAAI;AAC/C,MAAI,UAAU;AACZ,YAAQ,IAAI,8CAA8C,QAAQ,EAAE;AACpE,WAAO;AAAA,EACT;AAEA,UAAQ,MAAM,uCAAuC,QAAQ,EAAE;AAC/D,SAAO;AACT;AAGO,SAAS,oBAA8B;AAC5C,SAAO,OAAO,KAAK,OAAO,YAAY,CAAC,CAAC;AAC1C;AAGO,SAAS,cAAc,UAAqE;AACjG,QAAM,UAAU,OAAO,WAAW,QAAQ,KAAK;AAC/C,QAAM,SAAS,OAAO,WAAW,GAAG,QAAQ,SAAS,KAAK;AAC1D,SAAO,EAAE,SAAS,OAAO;AAC3B;",
  "names": []
}
