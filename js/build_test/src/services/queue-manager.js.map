{
  "version": 3,
  "sources": ["../../../src/services/queue-manager.ts"],
  "sourcesContent": ["import { singleton } from 'tsyringe';\nimport { Logger } from '../shared/logger.js';\n\nexport interface QueueTask {\n  id: string;\n  url: string;\n  priority: number;\n  timestamp: number;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  result?: any;\n  error?: string;\n}\n\n@singleton()\nexport class QueueManager {\n  private queue: QueueTask[] = [];\n  private maxSize = 1000;\n  private maxConcurrent = 10;\n  private activeTasks = 0;\n\n  // Statistics\n  private totalRequests = 0;\n  private completedRequests = 0;\n  private failedRequests = 0;\n\n  // Keep track of all tasks for retrieval\n  private allTasks = new Map<string, QueueTask>();\n\n  constructor(private logger: Logger) {}\n\n  async enqueue(task: Omit<QueueTask, 'id' | 'timestamp' | 'status'>): Promise<string> {\n    if (this.queue.length >= this.maxSize) {\n      throw new Error('Queue is full');\n    }\n\n    const queueTask: QueueTask = {\n      ...task,\n      id: this.generateId(),\n      timestamp: Date.now(),\n      status: 'pending'\n    };\n\n    this.queue.push(queueTask);\n    this.totalRequests++;\n    this.allTasks.set(queueTask.id, queueTask);\n    this.logger.info(`Task enqueued: ${queueTask.id} for ${queueTask.url}`);\n\n    return queueTask.id;\n  }\n\n  async dequeue(): Promise<QueueTask | null> {\n    if (this.queue.length === 0 || this.activeTasks >= this.maxConcurrent) {\n      return null;\n    }\n\n    // Sort by priority (higher first) then by timestamp (earlier first)\n    this.queue.sort((a, b) => {\n      if (a.priority !== b.priority) return b.priority - a.priority;\n      return a.timestamp - b.timestamp;\n    });\n\n    const task = this.queue.shift()!;\n    task.status = 'processing';\n    this.activeTasks++;\n    this.logger.info(`Task dequeued: ${task.id}`);\n\n    return task;\n  }\n\n  completeTask(taskId: string, result?: any): void {\n    const task = this.allTasks.get(taskId);\n    if (task) {\n      task.status = 'completed';\n      task.result = result;\n      this.activeTasks--;\n      this.completedRequests++;\n      this.logger.info(`Task completed: ${taskId}`);\n    }\n  }\n\n  failTask(taskId: string, error: string): void {\n    const task = this.allTasks.get(taskId);\n    if (task) {\n      task.status = 'failed';\n      task.error = error;\n      this.activeTasks--;\n      this.failedRequests++;\n      this.logger.error(`Task failed: ${taskId} - ${error}`);\n    }\n  }\n\n  getTask(taskId: string): QueueTask | undefined {\n    return this.allTasks.get(taskId);\n  }\n\n  getStatistics() {\n    return {\n      total_requests: this.totalRequests,\n      active_requests: this.activeTasks,\n      pending_requests: this.queue.length,\n      completed_requests: this.completedRequests,\n      failed_requests: this.failedRequests,\n      max_concurrent: this.maxConcurrent\n    };\n  }\n\n  getAllTasks(): QueueTask[] {\n    return [...this.queue];\n  }\n\n  clear(): void {\n    this.queue.length = 0;\n    this.activeTasks = 0;\n    this.logger.info('Queue cleared');\n  }\n\n  private findTask(taskId: string): QueueTask | undefined {\n    return this.queue.find(task => task.id === taskId);\n  }\n\n  private generateId(): string {\n    return `task_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
