{
  "version": 3,
  "sources": ["../../src/config.ts"],
  "sourcesContent": ["import fs from 'fs';\nimport path from 'path';\nimport yaml from 'js-yaml';\nimport dotenv from 'dotenv';\n\n// Load environment variables from .env file\ndotenv.config();\n\nexport interface AIProviderConfig {\n  api_key?: string;\n  base_url?: string;\n  model?: string;\n  temperature?: number;\n  parsing_prompt?: string;\n  prompt_options?: {\n    max_tokens?: number;\n    top_p?: number;\n    frequency_penalty?: number;\n    presence_penalty?: number;\n  };\n  request_timeout_ms?: number;\n  max_retries?: number;\n}\n\nexport interface AIProvidersConfig {\n  [providerModelKey: string]: AIProviderConfig; // Dynamic provider-model keys like \"openai-gpt-3.5-turbo\"\n}\n\nexport interface ConcurrencyConfig {\n  max_api_concurrency?: number;\n  default_client_concurrency?: number;\n  max_queue_length_per_client?: number;\n}\n\nexport interface BasePathConfig {\n  enabled?: boolean;\n  path?: string;\n}\n\nexport interface AITaskAssignments {\n  [taskName: string]: string; // Maps task names to provider names\n}\n\nexport interface AppConfig {\n  url?: string;\n  base_path?: BasePathConfig;\n  ai_providers?: AIProvidersConfig;\n  ai_tasks?: AITaskAssignments;\n  concurrency?: ConcurrencyConfig;\n  [k: string]: any;\n}\n\nfunction loadYamlConfig(): Partial<AppConfig> {\n  try {\n    // Determine the project root directory\n    const projectRoot = process.cwd().endsWith('/js') ? path.resolve(process.cwd(), '..') : process.cwd();\n\n    // Load main config.yaml\n    const cfgPath = path.resolve(projectRoot, 'config.yaml');\n    const raw = fs.readFileSync(cfgPath, 'utf8');\n    const mainConfig = yaml.load(raw) as Partial<AppConfig>;\n\n    // Load crawl_pipeline.yaml if it exists\n    let pipelineConfig: any = {};\n    try {\n      const pipelinePath = path.resolve(projectRoot, 'crawl_pipeline.yaml');\n      const pipelineRaw = fs.readFileSync(pipelinePath, 'utf8');\n      pipelineConfig = yaml.load(pipelineRaw) || {};\n    } catch (err) {\n      // crawl_pipeline.yaml is optional\n      console.log('crawl_pipeline.yaml not found, using config.yaml only');\n    }\n\n    // Merge configs (main config takes precedence)\n    const merged = { ...pipelineConfig, ...mainConfig };\n    return substituteEnvVars(merged) || {};\n  } catch (err) {\n    console.error('Failed to load config files:', err instanceof Error ? err.message : String(err));\n    return {};\n  }\n}\n\n// Substitute environment variables in config values\nfunction substituteEnvVars(obj: any): any {\n  if (typeof obj === 'string') {\n    // Handle ${VAR} and ${VAR:-default} syntax\n    return obj.replace(/\\$\\{([^}]+)\\}/g, (match, varExpr) => {\n      const [varName, defaultValue] = varExpr.split(':-');\n      return process.env[varName] || defaultValue || match;\n    });\n  } else if (Array.isArray(obj)) {\n    return obj.map(substituteEnvVars);\n  } else if (obj && typeof obj === 'object') {\n    const result: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      result[key] = substituteEnvVars(value);\n    }\n    return result;\n  }\n  return obj;\n}\n\nconst yamlCfg = loadYamlConfig();\n\n// Helper function to merge YAML config with environment variables\nfunction mergeProviderConfig(yamlConfig?: AIProviderConfig, envPrefix: string = ''): AIProviderConfig {\n  const envKey = envPrefix ? `${envPrefix}_API_KEY` : '';\n  const envBaseUrl = envPrefix ? `${envPrefix}_BASE_URL` : '';\n  const envModel = envPrefix ? `${envPrefix}_MODEL` : '';\n  const envTemp = envPrefix ? `${envPrefix}_TEMPERATURE` : '';\n  const envPrompt = envPrefix ? `${envPrefix}_PARSING_PROMPT` : '';\n  const envMaxTokens = envPrefix ? `${envPrefix}_MAX_TOKENS` : '';\n  const envTopP = envPrefix ? `${envPrefix}_TOP_P` : '';\n  const envFreqPenalty = envPrefix ? `${envPrefix}_FREQUENCY_PENALTY` : '';\n  const envPresPenalty = envPrefix ? `${envPrefix}_PRESENCE_PENALTY` : '';\n  const envTimeout = envPrefix ? `${envPrefix}_REQUEST_TIMEOUT_MS` : '';\n  const envRetries = envPrefix ? `${envPrefix}_MAX_RETRIES` : '';\n\n  return {\n    api_key: process.env[envKey] || yamlConfig?.api_key || '',\n    base_url: process.env[envBaseUrl] || yamlConfig?.base_url || '',\n    model: process.env[envModel] || yamlConfig?.model || '',\n    temperature: Number(process.env[envTemp]) || yamlConfig?.temperature || 0.2,\n    parsing_prompt: process.env[envPrompt] || yamlConfig?.parsing_prompt || 'Extract structured data from the following text:',\n    prompt_options: {\n      max_tokens: Number(process.env[envMaxTokens]) || yamlConfig?.prompt_options?.max_tokens || 2048,\n      top_p: Number(process.env[envTopP]) || yamlConfig?.prompt_options?.top_p || 1.0,\n      frequency_penalty: Number(process.env[envFreqPenalty]) || yamlConfig?.prompt_options?.frequency_penalty || 0.0,\n      presence_penalty: Number(process.env[envPresPenalty]) || yamlConfig?.prompt_options?.presence_penalty || 0.0,\n    },\n    request_timeout_ms: Number(process.env[envTimeout]) || yamlConfig?.request_timeout_ms || 30000,\n    max_retries: Number(process.env[envRetries]) || yamlConfig?.max_retries || 2,\n  };\n}\n\n// Load all provider-model configurations from YAML\nfunction loadAIProviders(): AIProvidersConfig {\n  const providers: AIProvidersConfig = {};\n\n  // Load all providers defined in YAML\n  if (yamlCfg.ai_providers) {\n    Object.entries(yamlCfg.ai_providers).forEach(([providerKey, yamlConfig]) => {\n      providers[providerKey] = mergeProviderConfig(yamlConfig as AIProviderConfig);\n    });\n  }\n\n  // If no providers defined in YAML, provide some defaults\n  if (Object.keys(providers).length === 0) {\n    providers['openai-gpt-3.5-turbo'] = mergeProviderConfig(undefined, 'OPENAI');\n    providers['openrouter-gpt-4'] = mergeProviderConfig(undefined, 'OPENROUTER');\n    providers['gemini-pro'] = mergeProviderConfig(undefined, 'GEMINI');\n  }\n\n  return providers;\n}\n\nconst config: AppConfig = {\n  url: yamlCfg.url || process.env.READER_BASE_URL || 'http://localhost:3001/',\n  base_path: {\n    enabled: yamlCfg.base_path?.enabled ?? false,\n    path: yamlCfg.base_path?.path || '/dearreader/',\n  },\n  ai_providers: loadAIProviders(),\n  ai_tasks: yamlCfg.ai_tasks || {\n    parse_pdf: 'openai-gpt-3.5-turbo',\n    parse_pdf_backup: 'openrouter-gpt-4',\n    validate_format: 'openrouter-gpt-4',\n    validate_format_backup: 'openai-gpt-4',\n    edit_crawl: 'openrouter-claude',\n    edit_crawl_backup: 'gemini-pro',\n    general_chat: 'openai-gpt-3.5-turbo',\n    general_chat_backup: 'openrouter-gpt-4',\n    code_analysis: 'openrouter-gpt-4',\n    code_analysis_backup: 'openai-gpt-4',\n    ocr_processing: 'gemini-pro-vision',\n    ocr_processing_backup: 'openrouter-claude',\n    sentiment_analysis: 'openrouter-claude',\n    sentiment_analysis_backup: 'gemini-pro',\n    content_classification: 'openai-gpt-3.5-turbo',\n    content_classification_backup: 'openrouter-gpt-4',\n    default: 'openai-gpt-3.5-turbo',\n    default_backup: 'openrouter-gpt-4',\n  },\n  concurrency: {\n    max_api_concurrency: Number(process.env.MAX_API_CONCURRENCY) || (yamlCfg.concurrency && yamlCfg.concurrency.max_api_concurrency) || 50,\n    default_client_concurrency: Number(process.env.DEFAULT_CLIENT_CONCURRENCY) || (yamlCfg.concurrency && yamlCfg.concurrency.default_client_concurrency) || 5,\n    max_queue_length_per_client: Number(process.env.MAX_QUEUE_LENGTH_PER_CLIENT) || (yamlCfg.concurrency && yamlCfg.concurrency.max_queue_length_per_client) || 20,\n  },\n  ...yamlCfg,\n};\n\nexport default config;\n"],
  "mappings": "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",
  "names": []
}
