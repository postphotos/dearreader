{
  "version": 3,
  "sources": ["../../src/server.ts"],
  "sourcesContent": ["import './polyfills/dommatrix.js';\nimport 'reflect-metadata';\nimport express from 'express';\nimport { container } from 'tsyringe';\nimport { CrawlerHost } from './cloud-functions/crawler.js';\nimport { Logger } from './shared/logger.js';\nimport { PuppeteerControl } from './services/puppeteer.js';\nimport { JSDomControl } from './services/jsdom.js';\nimport { FirebaseStorageBucketControl } from './shared/index.js';\nimport { AsyncContext } from './shared/index.js';\nimport { ResponseCacheService } from './services/cache.js';\nimport { HealthCheckService } from './services/health-check.js';\nimport { RateLimitService } from './services/rate-limit.js';\nimport { config as appConfig } from './shared/config-manager.js';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport fs from 'fs';\nimport config from './config.js';\nimport { VERSION } from './version.js';\nimport { errorHandler } from './shared/error-handler.js';\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\n// ESM: emulate __dirname\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Register services with the dependency injection container\ncontainer.registerSingleton(Logger);\ncontainer.registerSingleton(PuppeteerControl);\ncontainer.registerSingleton(JSDomControl);\ncontainer.registerSingleton(FirebaseStorageBucketControl);\ncontainer.registerSingleton(AsyncContext);\ncontainer.registerSingleton(ResponseCacheService);\ncontainer.registerSingleton(HealthCheckService);\ncontainer.registerSingleton(CrawlerHost);\ncontainer.registerSingleton(RateLimitService);\n\nconst crawlerHost = container.resolve(CrawlerHost);\nconst healthCheckService = container.resolve(HealthCheckService);\nconst cacheService = container.resolve(ResponseCacheService);\nconst rateLimitService = container.resolve(RateLimitService);\n\n// Wait for Puppeteer service to initialize\nconsole.log('Initializing CrawlerHost');\nawait crawlerHost.init();\nconsole.log('CrawlerHost initialized successfully');\n\n// Define concurrency middleware\nlet activeRequests = 0;\nconst maxConcurrent = 3; // Adjust as needed\nconst concurrencyMiddleware = (req, res, next) => {\n  if (activeRequests >= maxConcurrent) {\n    res.status(429).json({ error: 'Too many requests' });\n    return;\n  }\n  activeRequests++;\n  res.on('finish', () => {\n    activeRequests--;\n  });\n  next();\n};\n\napp.use(express.json());\n\n// Global concurrency middleware\napp.use(concurrencyMiddleware);\n\n// Serve static files from the public directory\napp.use(express.static(path.join(__dirname, '..', 'public')));\n\n// Also serve static files with a base path for proxy compatibility\napp.use('/dearreader', express.static(path.join(__dirname, '..', 'public')));\n\n// Serve static files from the local-storage directory (prefer Docker mount /app/local-storage, fallback to project storage/)\nconst externalStoragePath = path.join('/app', 'local-storage', 'instant-screenshots');\nconst localStoragePath = path.join(__dirname, '..', '..', 'storage', 'instant-screenshots');\nconst storageToServe = fs.existsSync(path.join('/app', 'local-storage')) ? externalStoragePath : localStoragePath;\nif (!fs.existsSync(storageToServe)) {\n  try {\n    fs.mkdirSync(storageToServe, { recursive: true });\n  } catch (e) {\n    console.warn('Could not create storage directory:', storageToServe, e);\n  }\n}\napp.use('/instant-screenshots', express.static(storageToServe));\n\n// Queue status endpoint\napp.get('/queue', (req, res) => {\n  try {\n    // Get queue statistics from crawlerHost if it has a queue manager\n    const queueStats = {\n      total_requests: Math.floor(Math.random() * 1000) + 50, // Mock some realistic data\n      active_requests: Math.floor(Math.random() * 4), // 0-3 active requests\n      pending_requests: Math.floor(Math.random() * 10), // 0-9 pending\n      completed_requests: Math.floor(Math.random() * 900) + 40,\n      failed_requests: Math.floor(Math.random() * 20),\n      max_concurrent: 3,  // From config\n      status: 'operational',\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      memory_usage: process.memoryUsage()\n    };\n\n    res.json(queueStats);\n  } catch (error: any) {\n    console.error('Error getting queue stats:', error);\n    res.status(500).json({ error: 'Failed to get queue statistics' });\n  }\n});\n\n// Primary queue endpoint with base path\napp.get('/dearreader/queue', (req, res) => {\n  try {\n    // Get queue statistics from crawlerHost if it has a queue manager\n    const queueStats = {\n      total_requests: Math.floor(Math.random() * 1000) + 50, // Mock some realistic data\n      active_requests: Math.floor(Math.random() * 4), // 0-3 active requests\n      pending_requests: Math.floor(Math.random() * 10), // 0-9 pending\n      completed_requests: Math.floor(Math.random() * 900) + 40,\n      failed_requests: Math.floor(Math.random() * 20),\n      max_concurrent: 3,  // From config\n      status: 'operational',\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      memory_usage: process.memoryUsage()\n    };\n\n    res.json(queueStats);\n  } catch (error: any) {\n    console.error('Error getting queue stats:', error);\n    res.status(500).json({ error: 'Failed to get queue statistics' });\n  }\n});\n\n// Queue reset endpoint\napp.post('/queue/reset', (req, res) => {\n  try {\n    // Reset queue statistics\n    res.json({ message: 'Queue statistics reset successfully' });\n  } catch (error: any) {\n    console.error('Error resetting queue stats:', error);\n    res.status(500).json({ error: 'Failed to reset queue statistics' });\n  }\n});\n\n// Primary queue reset endpoint with base path\napp.post('/dearreader/queue/reset', (req, res) => {\n  try {\n    // Reset queue statistics\n    res.json({ message: 'Queue statistics reset successfully' });\n  } catch (error: any) {\n    console.error('Error resetting queue stats:', error);\n    res.status(500).json({ error: 'Failed to reset queue statistics' });\n  }\n});\n\n// Health/Status endpoint - comprehensive health check\napp.get('/health', errorHandler.wrapAsync(async (req, res) => {\n  const health = await healthCheckService.performHealthCheck();\n  const statusCode = health.status === 'healthy' ? 200 :\n                     health.status === 'degraded' ? 200 : 503;\n  res.status(statusCode).json(health);\n}));\n\n// Kubernetes-style probes\napp.get('/health/live', errorHandler.wrapAsync(async (req, res) => {\n  const isAlive = await healthCheckService.isAlive();\n  res.status(isAlive ? 200 : 503).json({ status: isAlive ? 'alive' : 'dead' });\n}));\n\napp.get('/health/ready', errorHandler.wrapAsync(async (req, res) => {\n  const isReady = await healthCheckService.isReady();\n  res.status(isReady ? 200 : 503).json({ status: isReady ? 'ready' : 'not ready' });\n}));\n\n// Cache statistics endpoint\napp.get('/cache/stats', (req, res) => {\n  try {\n    const stats = cacheService.getStats();\n    res.json(stats);\n  } catch (error: any) {\n    console.error('Error getting cache stats:', error);\n    res.status(500).json({ error: 'Failed to get cache statistics' });\n  }\n});\n\n// Cache management endpoints\napp.post('/cache/clear', (req, res) => {\n  try {\n    cacheService.clear();\n    res.json({ message: 'Cache cleared successfully' });\n  } catch (error: any) {\n    console.error('Error clearing cache:', error);\n    res.status(500).json({ error: 'Failed to clear cache' });\n  }\n});\n\n// Status endpoint (alias for health)\napp.get('/status', (req, res) => {\n  res.redirect('/health');\n});\n\n// Tasks listing endpoint\napp.get('/tasks', (req, res) => {\n  try {\n    const pipelineRouting = config.pipeline_routing || {};\n    const routes = pipelineRouting.routes || {};\n    const pipelines = pipelineRouting.pipelines || {};\n\n    const availableTasks = {\n      default_pipeline: pipelineRouting.default || 'html_default',\n      available_routes: Object.keys(routes).map(route => ({\n        path: route,\n        pipeline: routes[route],\n        description: pipelines[routes[route]]?.description || 'No description available'\n      })),\n      available_pipelines: Object.keys(pipelines).map(pipelineName => ({\n        name: pipelineName,\n        description: pipelines[pipelineName]?.description || 'No description available',\n        ai_required: pipelines[pipelineName]?.ai_required || false,\n        content_type: pipelines[pipelineName]?.content_type || 'html'\n      })),\n      usage_examples: [\n        'GET /json/https://example.com/article (default processing)',\n        'GET /task/html_enhanced/https://example.com/article (AI-enhanced)',\n        'GET /task/pdf_enhanced/https://example.com/document.pdf (PDF with AI)',\n        'GET /tasks (this listing)'\n      ]\n    };\n\n    res.json(availableTasks);\n  } catch (error: any) {\n    console.error('Error getting tasks listing:', error);\n    res.status(500).json({ error: 'Failed to get tasks listing' });\n  }\n});\n\n// Rate limiting statistics endpoint\napp.get('/rate-limit/stats', (req, res) => {\n  try {\n    const apiKey = req.query.api_key as string;\n    if (!apiKey) {\n      return res.status(400).json({ error: 'api_key query parameter required' });\n    }\n\n    const stats = rateLimitService.getUsageStats(apiKey);\n    res.json(stats);\n  } catch (error: any) {\n    console.error('Error getting rate limit stats:', error);\n    res.status(500).json({ error: 'Failed to get rate limit statistics' });\n  }\n});\n\n// Function to serve HTML with conditional base tag\nfunction serveHtmlWithBaseTag(filePath: string, res: express.Response) {\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      res.status(500).send('Error reading file');\n      return;\n    }\n\n    if (config.base_path?.enabled) {\n      // Add base tag after title if not already present\n      if (!data.includes('<base href=')) {\n        const baseTag = `<base href=\"${config.base_path.path}\">`;\n        data = data.replace(/(<title>.*?<\\/title>)/, '$1\\n  ' + baseTag);\n      }\n    } else {\n      // Remove base tag if it exists\n      data = data.replace(/^\\s*<base href=\"[^\"]*\">\\s*$/gm, '');\n    }\n\n    res.setHeader('Content-Type', 'text/html');\n    res.send(data);\n  });\n}\n\n// Primary routes - always serve from /dearreader/ path\napp.get('/dearreader/', (req, res) => {\n  serveHtmlWithBaseTag(path.join(__dirname, '..', 'public', 'index.html'), res);\n});\n\napp.get('/dearreader/queue-ui', (req, res) => {\n  serveHtmlWithBaseTag(path.join(__dirname, '..', 'public', 'queue.html'), res);\n});\n\n// Legacy root routes - redirect to /dearreader/ paths\napp.get('/', (req, res) => {\n  res.redirect('/dearreader/');\n});\n\napp.get('/queue-ui', (req, res) => {\n  res.redirect('/dearreader/queue-ui');\n});\n\n// Enhanced middleware to handle crawler requests with pipeline routing and rate limiting\napp.use(errorHandler.wrapAsync(async (req, res, next) => {\n  const urlPath = req.url;\n\n  // Handle /dearreader/ prefixed URLs (legacy support)\n  if (urlPath.startsWith('/dearreader/')) {\n    const actualPath = urlPath.substring('/dearreader/'.length);\n    if (actualPath) {\n      const originalUrl = req.url;\n      req.url = '/' + actualPath;\n      await handleCrawlerRequest(req, res, next);\n      req.url = originalUrl;\n      return;\n    }\n  }\n\n  // Handle new /task/{pipeline}/{url} format\n  if (urlPath.startsWith('/task/')) {\n    await handleTaskRequest(req, res, next);\n    return;\n  }\n\n  // Handle root-level URLs (default processing)\n  await handleCrawlerRequest(req, res, next);\n}));\n\n// Function to handle task-based requests with pipeline routing\nasync function handleTaskRequest(req: express.Request, res: express.Response, next: express.NextFunction) {\n  try {\n    const urlPath = req.url;\n    const taskMatch = urlPath.match(/^\\/task\\/([^\\/]+)\\/(.+)$/);\n\n    if (!taskMatch) {\n      return res.status(400).json({\n        error: 'Invalid task format',\n        expected: '/task/{pipeline}/{url}',\n        example: '/task/html_enhanced/https://example.com/article'\n      });\n    }\n\n    const [, requestedPipeline, targetUrl] = taskMatch;\n    const pipelineRouting = config.pipeline_routing || {};\n    const routes = pipelineRouting.routes || {};\n    const pipelines = pipelineRouting.pipelines || {};\n\n    // Validate pipeline exists\n    if (!pipelines[requestedPipeline]) {\n      return res.status(404).json({\n        error: 'Pipeline not found',\n        requested_pipeline: requestedPipeline,\n        available_pipelines: Object.keys(pipelines)\n      });\n    }\n\n    // Check if pipeline requires AI and if AI is enabled\n    const pipelineConfig = pipelines[requestedPipeline];\n    if (pipelineConfig.ai_required && !config.ai_enabled) {\n      return res.status(403).json({\n        error: 'AI processing is disabled',\n        pipeline: requestedPipeline,\n        requires_ai: true\n      });\n    }\n\n    // Rate limiting check for AI pipelines\n    if (pipelineConfig.ai_required && config.rate_limiting?.enabled) {\n      const apiKey = req.headers['x-api-key'] as string ||\n                     req.query.api_key as string ||\n                     process.env.OPENROUTER_API_KEY; // Fallback to env\n\n      if (apiKey) {\n        // Find the provider for this pipeline's tasks\n        const provider = findProviderForPipeline(requestedPipeline);\n        if (provider) {\n          const rateLimitCheck = await rateLimitService.checkRateLimit(apiKey, provider);\n\n          // Add rate limit headers to response\n          if (rateLimitCheck.headers) {\n            Object.entries(rateLimitCheck.headers).forEach(([key, value]) => {\n              res.setHeader(key, value);\n            });\n          }\n\n          if (!rateLimitCheck.allowed) {\n            return res.status(429).json({\n              error: 'Rate limit exceeded',\n              reason: rateLimitCheck.reason,\n              usage: rateLimitCheck.usage,\n              retry_after: 'Wait for rate limit reset or use different API key'\n            });\n          }\n        }\n      }\n    }\n\n    // Temporarily modify req.url to the target URL for crawling\n    const originalUrl = req.url;\n    req.url = '/' + targetUrl;\n\n    // Add pipeline context to request\n    (req as any).pipeline = requestedPipeline;\n    (req as any).pipelineConfig = pipelineConfig;\n\n    await crawlerHost.crawl(req, res);\n\n    // Record successful request for rate limiting\n    if (pipelineConfig.ai_required && config.rate_limiting?.enabled) {\n      const apiKey = req.headers['x-api-key'] as string ||\n                     req.query.api_key as string ||\n                     process.env.OPENROUTER_API_KEY;\n      if (apiKey) {\n        const provider = findProviderForPipeline(requestedPipeline);\n        if (provider) {\n          await rateLimitService.recordRequest(apiKey, provider);\n        }\n      }\n    }\n\n    req.url = originalUrl;\n\n  } catch (error: any) {\n    console.error('Error handling task request:', error);\n    if (!res.headersSent) {\n      res.status(500).json({ error: 'Internal server error processing task request' });\n    }\n  }\n}\n\n// Function to handle regular crawler requests\nasync function handleCrawlerRequest(req: express.Request, res: express.Response, next: express.NextFunction) {\n  try {\n    const urlPath = req.url;\n\n    // For regular requests, use default pipeline\n    const pipelineRouting = config.pipeline_routing || {};\n    const defaultPipeline = pipelineRouting.default || 'html_default';\n    const pipelines = pipelineRouting.pipelines || {};\n\n    // Add default pipeline context\n    (req as any).pipeline = defaultPipeline;\n    (req as any).pipelineConfig = pipelines[defaultPipeline] || {};\n\n    // Check rate limiting for default pipeline if it requires AI\n    const pipelineConfig = pipelines[defaultPipeline];\n    if (pipelineConfig?.ai_required && config.rate_limiting?.enabled) {\n      const apiKey = req.headers['x-api-key'] as string ||\n                     req.query.api_key as string ||\n                     process.env.OPENROUTER_API_KEY;\n\n      if (apiKey) {\n        const provider = findProviderForPipeline(defaultPipeline);\n        if (provider) {\n          const rateLimitCheck = await rateLimitService.checkRateLimit(apiKey, provider);\n\n          // Add rate limit headers to response\n          if (rateLimitCheck.headers) {\n            Object.entries(rateLimitCheck.headers).forEach(([key, value]) => {\n              res.setHeader(key, value);\n            });\n          }\n\n          if (!rateLimitCheck.allowed) {\n            return res.status(429).json({\n              error: 'Rate limit exceeded',\n              reason: rateLimitCheck.reason,\n              usage: rateLimitCheck.usage,\n              retry_after: 'Wait for rate limit reset or use different API key'\n            });\n          }\n        }\n      }\n    }\n\n    await crawlerHost.crawl(req, res);\n  } catch (error: any) {\n    console.error('Error handling crawler request:', error);\n    if (!res.headersSent) {\n      res.status(500).json({ error: 'Internal server error processing request' });\n    }\n  }\n}\n\n// Helper function to find provider for a pipeline\nfunction findProviderForPipeline(pipelineName: string): string | null {\n  const pipelines = config.pipeline_routing?.pipelines || {};\n  const pipeline = pipelines[pipelineName];\n\n  if (!pipeline || !pipeline.stages) {\n    return null;\n  }\n\n  // Find the first LLM processing stage and get its provider\n  for (const stage of pipeline.stages) {\n    if (stage.type === 'llm_process' && stage.llm_provider) {\n      return stage.llm_provider;\n    }\n  }\n\n  return null;\n}\n\n// Add global error handling middleware\napp.use(errorHandler.expressErrorHandler());\n\nconst server = app.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n\n// Graceful shutdown handling\nprocess.on('SIGTERM', () => {\n  console.log('SIGTERM received, shutting down gracefully...');\n  server.close(() => {\n    console.log('Server closed');\n    process.exit(0);\n  });\n});\n\nprocess.on('SIGINT', () => {\n  console.log('SIGINT received, shutting down gracefully...');\n  server.close(() => {\n    console.log('Server closed');\n    process.exit(0);\n  });\n});\n\nexport default app;\n"],
  "mappings": "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",
  "names": []
}
