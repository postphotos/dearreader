{
  "version": 3,
  "sources": ["../../src/index.ts"],
  "sourcesContent": ["import 'reflect-metadata';\nimport express from 'express';\nimport config from './config.js';\nimport { concurrencyMiddleware } from './middleware/concurrency.js';\nimport { CrawlerHost } from './cloud-functions/crawler.js';\nimport { Logger } from './shared/logger.js';\nimport { container } from 'tsyringe';\nimport { PuppeteerControl } from './services/puppeteer.js';\nimport { JSDomControl } from './services/jsdom.js';\nimport { FirebaseStorageBucketControl } from './shared/index.js';\nimport { AsyncContext } from './shared/index.js';\n\n// Local Express server setup instead of Firebase Functions\nconst app = express();\napp.use(express.json());\n// apply global concurrency middleware early\napp.use(concurrencyMiddleware);\n\ncontainer.registerSingleton(Logger);\ncontainer.registerSingleton(PuppeteerControl);\ncontainer.registerSingleton(JSDomControl);\ncontainer.registerSingleton(FirebaseStorageBucketControl);\ncontainer.registerSingleton(AsyncContext);\ncontainer.registerSingleton(CrawlerHost);\n\nconst crawlerHost = container.resolve(CrawlerHost);\n\n// API endpoints for local crawler\napp.post('/crawl', async (req: express.Request, res: express.Response) => {\n  try {\n    await crawlerHost.crawl(req, res);\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    res.status(500).json({ error: errorMessage });\n  }\n});\n\napp.get('/', (req, res) => {\n  res.json({ message: 'DearReader Local Crawler Server Running' });\n});\n\n// Export for use in server.js\nexport default app;\n\n\nprocess.on('unhandledRejection', (reason, promise) => {\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n    // Application specific logging, throwing an error, or other logic here\n});\n\nprocess.on('uncaughtException', (err) => {\n    console.error('Uncaught Exception:', err);\n\n    // Looks like Firebase runtime does not handle error properly.\n    // Make sure to quit the process.\n    process.nextTick(() => process.exit(1));\n    console.error('Uncaught exception, process quit.');\n    throw err;\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO;AACP,OAAO,aAAa;AAEpB,SAAS,6BAA6B;AACtC,SAAS,mBAAmB;AAC5B,SAAS,cAAc;AACvB,SAAS,iBAAiB;AAC1B,SAAS,wBAAwB;AACjC,SAAS,oBAAoB;AAC7B,SAAS,oCAAoC;AAC7C,SAAS,oBAAoB;AAG7B,MAAM,MAAM,QAAQ;AACpB,IAAI,IAAI,QAAQ,KAAK,CAAC;AAEtB,IAAI,IAAI,qBAAqB;AAE7B,UAAU,kBAAkB,MAAM;AAClC,UAAU,kBAAkB,gBAAgB;AAC5C,UAAU,kBAAkB,YAAY;AACxC,UAAU,kBAAkB,4BAA4B;AACxD,UAAU,kBAAkB,YAAY;AACxC,UAAU,kBAAkB,WAAW;AAEvC,MAAM,cAAc,UAAU,QAAQ,WAAW;AAGjD,IAAI,KAAK,UAAU,OAAO,KAAsB,QAA0B;AACxE,MAAI;AACF,UAAM,YAAY,MAAM,KAAK,GAAG;AAAA,EAClC,SAAS,OAAO;AACd,UAAM,eAAe,iBAAiB,QAAQ,MAAM,UAAU;AAC9D,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,aAAa,CAAC;AAAA,EAC9C;AACF,CAAC;AAED,IAAI,IAAI,KAAK,CAAC,KAAK,QAAQ;AACzB,MAAI,KAAK,EAAE,SAAS,0CAA0C,CAAC;AACjE,CAAC;AAGD,IAAO,cAAQ;AAGf,QAAQ,GAAG,sBAAsB,CAAC,QAAQ,YAAY;AAClD,UAAQ,MAAM,2BAA2B,SAAS,WAAW,MAAM;AAEvE,CAAC;AAED,QAAQ,GAAG,qBAAqB,CAAC,QAAQ;AACrC,UAAQ,MAAM,uBAAuB,GAAG;AAIxC,UAAQ,SAAS,MAAM,QAAQ,KAAK,CAAC,CAAC;AACtC,UAAQ,MAAM,mCAAmC;AACjD,QAAM;AACV,CAAC;",
  "names": []
}
