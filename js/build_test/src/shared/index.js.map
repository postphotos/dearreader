{
  "version": 3,
  "sources": ["../../../src/shared/index.ts"],
  "sourcesContent": ["import { CloudHTTPv2 } from './decorators.js';\nimport type { Ctx } from './types.js';\nimport { Logger } from './logger.js';\nimport { OutputServerEventStream } from './output-stream.js';\nimport { RPCReflect } from './rpc-reflect.js';\nimport { injectable } from 'tsyringe';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n@injectable()\nexport class AsyncContext {\n    private storage: Map<string, any> = new Map();\n    set(key: string, value: any) {\n        this.storage.set(key, value);\n    }\n\n    get(key: string): any {\n        return this.storage.get(key);\n    }\n}\n\nexport class InsufficientBalanceError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = 'InsufficientBalanceError';\n    }\n}\n\nexport function Param(name: string, options?: any): ParameterDecorator {\n    return (target: Object, propertyKey: string | symbol | undefined, parameterIndex: number) => {\n        // Implementation details would go here\n    };\n}\n\n@injectable()\nexport class FirebaseStorageBucketControl {\n    private localStorageDir: string;\n\n    constructor() {\n        // Prefer Docker-mounted path /app/local-storage when available, otherwise use project-local storage directory.\n        const preferred = process.env.LOCAL_STORAGE_DIR || path.join('/app', 'local-storage');\n        const fallback = path.join(process.cwd(), 'storage');\n        let chosen = preferred;\n        try {\n            // try creating preferred; if it fails or is on a read-only fs, fall back\n            if (!fs.existsSync(preferred)) {\n                fs.mkdirSync(preferred, { recursive: true });\n            }\n            chosen = preferred;\n        } catch (e) {\n            // fallback to project storage\n            if (!fs.existsSync(fallback)) {\n                try {\n                    fs.mkdirSync(fallback, { recursive: true });\n                } catch (e2) {\n                    // last resort: use OS temp dir\n                    chosen = path.join(process.cwd(), '.local-storage');\n                    if (!fs.existsSync(chosen)) {\n                        fs.mkdirSync(chosen, { recursive: true });\n                    }\n                }\n            } else {\n                // fallback exists\n            }\n            chosen = fs.existsSync(fallback) ? fallback : chosen;\n        }\n        this.localStorageDir = chosen;\n    }\n\n    async uploadFile(filePath: string, destination: string): Promise<string> {\n        const destPath = path.join(this.localStorageDir, destination);\n        await fs.promises.copyFile(filePath, destPath);\n        return `file://${destPath}`;\n    }\n\n    async downloadFile(filePath: string, destination: string): Promise<void> {\n        const sourcePath = path.join(this.localStorageDir, filePath);\n        await fs.promises.copyFile(sourcePath, destination);\n    }\n\n    async deleteFile(filePath: string): Promise<void> {\n        const fullPath = path.join(this.localStorageDir, filePath);\n        await fs.promises.unlink(fullPath);\n    }\n\n    async fileExists(filePath: string): Promise<boolean> {\n        const fullPath = path.join(this.localStorageDir, filePath);\n        return fs.existsSync(fullPath);\n    }\n\n    async saveFile(filePath: string, content: Buffer, options?: any): Promise<void> {\n        const fullPath = path.join(this.localStorageDir, filePath);\n        await fs.promises.writeFile(fullPath, new Uint8Array(content));\n    }\n\n    async signDownloadUrl(filePath: string, expirationTime: number): Promise<string> {\n        const fullPath = path.join(this.localStorageDir, filePath);\n        return `file://${fullPath}`;\n    }\n}\n\nexport {\n    CloudHTTPv2,\n    Ctx,\n    Logger,\n    OutputServerEventStream,\n    RPCReflect,\n};\n\nexport const loadModulesDynamically = (path: string) => {\n    // Simplified implementation\n    console.log(`Loading modules from ${path}`);\n};\n\nexport const registry = {\n    exportAll: () => ({}),\n    exportGrouped: () => ({}),\n    allHandsOnDeck: async () => {},\n};\n"],
  "mappings": "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",
  "names": ["path"]
}
