{
  "version": 3,
  "sources": ["../../../src/shared/config-manager.ts"],
  "sourcesContent": ["import Joi from 'joi';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as yaml from 'js-yaml';\nimport { Logger } from './logger.js';\nimport { fileURLToPath } from 'url';\n\nconst logger = new Logger('ConfigManager');\n\n// ES module equivalent of __dirname\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport interface AppConfig {\n  url: string;\n  base_path: {\n    enabled: boolean;\n    path: string;\n  };\n  robots: {\n    respect_robots_txt: boolean;\n  };\n  pdf: {\n    enable_parsing: boolean;\n    max_file_size_mb: number;\n    processing_timeout_seconds: number;\n    enable_ocr: boolean;\n    extract_metadata: boolean;\n    max_pages: number;\n  };\n  domain: {\n    allow_all_tlds: boolean;\n  };\n  storage: {\n    local_directory: string;\n    max_file_age_days: number;\n  };\n  development: {\n    debug: boolean;\n    cors_enabled: boolean;\n  };\n  performance: {\n    max_concurrent_pages: number;\n    page_idle_timeout: number;\n    health_check_interval: number;\n    request_timeout: number;\n    max_requests_per_page: number;\n    max_rps: number;\n    max_domains_per_page: number;\n  };\n  queue: {\n    max_concurrent: number;\n    max_retries: number;\n    retry_delay: number;\n    job_timeout: number;\n    max_connections: number;\n  };\n  browser: {\n    viewport_width: number;\n    viewport_height: number;\n    stealth_mode: boolean;\n    navigation_timeout: number;\n    wait_for_network_idle: boolean;\n  };\n  cache: {\n    robots_cache_timeout: number;\n    enable_response_cache: boolean;\n    cache_size_limit: number;\n  };\n  content: {\n    enable_readability: boolean;\n    remove_selectors: string;\n    target_selectors: string;\n    extract_images: boolean;\n    extract_links: boolean;\n    max_content_length: number;\n    exclude_file_types: string;\n    exclude_url_patterns: string;\n  };\n  environment: {\n    max_workers: number;\n    single_process_dev: boolean;\n  };\n  ai_enabled: boolean;\n  ai_providers: {\n    [key: string]: {\n      api_key: string;\n      base_url: string;\n      model: string;\n      temperature: number;\n      parsing_prompt: string;\n      prompt_options: {\n        max_tokens: number;\n        top_p: number;\n        frequency_penalty: number;\n        presence_penalty: number;\n      };\n      request_timeout_ms: number;\n      max_retries: number;\n    };\n  };\n  ai_tasks: {\n    [key: string]: string;\n  };\n  concurrency: {\n    max_api_concurrency: number;\n    default_client_concurrency: number;\n    max_queue_length_per_client: number;\n  };\n  proxy: {\n    http_proxy: string;\n    https_proxy: string;\n    socks_proxy: string;\n  };\n  headers: {\n    custom_headers: { [key: string]: string };\n    cors_bypass_headers: { [key: string]: string };\n    robots_bypass_headers: { [key: string]: string };\n  };\n}\n\nconst configSchema = Joi.object<AppConfig>({\n  url: Joi.string().uri().default('http://localhost:3001'),\n  base_path: Joi.object({\n    enabled: Joi.boolean().default(true),\n    path: Joi.string().default('/dearreader/')\n  }).default(),\n  robots: Joi.object({\n    respect_robots_txt: Joi.boolean().default(true)\n  }).default(),\n  pdf: Joi.object({\n    enable_parsing: Joi.boolean().default(true),\n    max_file_size_mb: Joi.number().min(1).max(500).default(50),\n    processing_timeout_seconds: Joi.number().min(5).max(300).default(30),\n    enable_ocr: Joi.boolean().default(false),\n    extract_metadata: Joi.boolean().default(true),\n    max_pages: Joi.number().min(1).max(1000).default(100)\n  }).default(),\n  domain: Joi.object({\n    allow_all_tlds: Joi.boolean().default(false)\n  }).default(),\n  storage: Joi.object({\n    local_directory: Joi.string().default('./storage'),\n    max_file_age_days: Joi.number().min(1).default(7)\n  }).default(),\n  development: Joi.object({\n    debug: Joi.boolean().default(false),\n    cors_enabled: Joi.boolean().default(true)\n  }).default(),\n  performance: Joi.object({\n    max_concurrent_pages: Joi.number().min(1).max(100).default(10),\n    page_idle_timeout: Joi.number().min(1000).default(60000),\n    health_check_interval: Joi.number().min(1000).default(30000),\n    request_timeout: Joi.number().min(1000).default(10000),\n    max_requests_per_page: Joi.number().min(10).default(1000),\n    max_rps: Joi.number().min(1).default(60),\n    max_domains_per_page: Joi.number().min(1).default(200)\n  }).default(),\n  queue: Joi.object({\n    max_concurrent: Joi.number().min(1).max(50).default(3),\n    max_retries: Joi.number().min(0).default(3),\n    retry_delay: Joi.number().min(100).default(5000),\n    job_timeout: Joi.number().min(1000).default(60000),\n    max_connections: Joi.number().min(1).default(3)\n  }).default(),\n  browser: Joi.object({\n    viewport_width: Joi.number().min(100).default(1024),\n    viewport_height: Joi.number().min(100).default(1024),\n    stealth_mode: Joi.boolean().default(true),\n    navigation_timeout: Joi.number().min(1000).default(30000),\n    wait_for_network_idle: Joi.boolean().default(true)\n  }).default(),\n  cache: Joi.object({\n    robots_cache_timeout: Joi.number().min(1000).default(86400000),\n    enable_response_cache: Joi.boolean().default(false),\n    cache_size_limit: Joi.number().min(10).default(1000)\n  }).default(),\n  content: Joi.object({\n    enable_readability: Joi.boolean().default(true),\n    remove_selectors: Joi.string().default(''),\n    target_selectors: Joi.string().default(''),\n    extract_images: Joi.boolean().default(true),\n    extract_links: Joi.boolean().default(true),\n    max_content_length: Joi.number().min(1000).default(1000000),\n    exclude_file_types: Joi.string().default('.xml, .rss, .atom, .json, .css, .js'),\n    exclude_url_patterns: Joi.string().default('')\n  }).default(),\n  environment: Joi.object({\n    max_workers: Joi.number().min(1).default(4),\n    single_process_dev: Joi.boolean().default(true)\n  }).default(),\n  ai_enabled: Joi.boolean().default(true),\n  ai_providers: Joi.object().pattern(\n    Joi.string(),\n    Joi.object({\n      api_key: Joi.string().default(''),\n      base_url: Joi.string().uri().default(''),\n      model: Joi.string().default(''),\n      temperature: Joi.number().min(0).max(2).default(0.2),\n      parsing_prompt: Joi.string().default(''),\n      prompt_options: Joi.object({\n        max_tokens: Joi.number().min(1).default(2048),\n        top_p: Joi.number().min(0).max(1).default(1.0),\n        frequency_penalty: Joi.number().min(-2).max(2).default(0.0),\n        presence_penalty: Joi.number().min(-2).max(2).default(0.0)\n      }).default(),\n      request_timeout_ms: Joi.number().min(1000).default(30000),\n      max_retries: Joi.number().min(0).default(2)\n    })\n  ).default({}),\n  ai_tasks: Joi.object().pattern(Joi.string(), Joi.string()).default({}),\n  concurrency: Joi.object({\n    max_api_concurrency: Joi.number().min(1).default(50),\n    default_client_concurrency: Joi.number().min(1).default(5),\n    max_queue_length_per_client: Joi.number().min(1).default(20)\n  }).default(),\n  proxy: Joi.object({\n    http_proxy: Joi.string().default(''),\n    https_proxy: Joi.string().default(''),\n    socks_proxy: Joi.string().default('')\n  }).default(),\n  headers: Joi.object({\n    custom_headers: Joi.object().pattern(Joi.string(), Joi.string()).default({}),\n    cors_bypass_headers: Joi.object().pattern(Joi.string(), Joi.string()).default({}),\n    robots_bypass_headers: Joi.object().pattern(Joi.string(), Joi.string()).default({})\n  }).default()\n});\n\nexport class ConfigManager {\n  private static instance: ConfigManager;\n  private config: AppConfig;\n  private configPath: string;\n  private watcher: fs.FSWatcher | null = null;\n  private onConfigChangeCallbacks: Array<(config: AppConfig) => void> = [];\n\n  private constructor() {\n    // Look for config in project root (parent of js directory)\n    this.configPath = path.resolve(__dirname, '..', '..', '..', 'config.yaml');\n    this.config = this.loadAndValidateConfig();\n    this.setupFileWatcher();\n  }\n\n  public static getInstance(): ConfigManager {\n    if (!ConfigManager.instance) {\n      ConfigManager.instance = new ConfigManager();\n    }\n    return ConfigManager.instance;\n  }\n\n  public getConfig(): AppConfig {\n    return this.config;\n  }\n\n  public getConfigPath(): string {\n    return this.configPath;\n  }\n\n  private loadAndValidateConfig(): AppConfig {\n    try {\n      let rawConfig: any = {};\n\n      if (fs.existsSync(this.configPath)) {\n        const configContent = fs.readFileSync(this.configPath, 'utf8');\n        rawConfig = yaml.load(configContent) || {};\n        logger.info(`Loaded configuration from ${this.configPath}`);\n      } else {\n        logger.warn(`No config.yaml found at ${this.configPath}, using defaults`);\n      }\n\n      // Apply environment variable overrides\n      this.applyEnvironmentOverrides(rawConfig);\n\n      // Validate and apply defaults\n      const { error, value } = configSchema.validate(rawConfig, {\n        allowUnknown: true,\n        abortEarly: false\n      });\n\n      if (error) {\n        logger.error('Configuration validation failed:', error.details);\n        throw new Error(`Configuration validation failed: ${error.message}`);\n      }\n\n      logger.info('Configuration loaded and validated successfully');\n      return value;\n\n    } catch (error) {\n      logger.error('Failed to load configuration:', error);\n      throw error;\n    }\n  }\n\n  private setupFileWatcher(): void {\n    try {\n      // Watch the config file for changes\n      this.watcher = fs.watch(this.configPath, { persistent: false }, (eventType) => {\n        if (eventType === 'change') {\n          logger.info('Config file changed, reloading...');\n          try {\n            const newConfig = this.loadAndValidateConfig();\n            this.config = newConfig;\n\n            // Notify all registered callbacks\n            this.onConfigChangeCallbacks.forEach(callback => {\n              try {\n                callback(newConfig);\n              } catch (error) {\n                logger.error('Error in config change callback:', error);\n              }\n            });\n\n            logger.info('Configuration hot-reloaded successfully');\n          } catch (error) {\n            logger.error('Failed to reload configuration:', error);\n          }\n        }\n      });\n\n      logger.info('Config file watcher started');\n    } catch (error) {\n      logger.warn('Failed to setup config file watcher:', error);\n    }\n  }\n\n  public onConfigChange(callback: (config: AppConfig) => void): void {\n    this.onConfigChangeCallbacks.push(callback);\n  }\n\n  public reload(): void {\n    try {\n      this.config = this.loadAndValidateConfig();\n      logger.info('Configuration reloaded successfully');\n    } catch (error) {\n      logger.error('Failed to reload configuration:', error);\n      throw error;\n    }\n  }\n\n  public destroy(): void {\n    if (this.watcher) {\n      this.watcher.close();\n      this.watcher = null;\n      logger.info('Config file watcher stopped');\n    }\n  }\n\n  private applyEnvironmentOverrides(config: any): void {\n    // Environment variable overrides\n    const envMappings = {\n      'RESPECT_ROBOTS_TXT': 'robots.respect_robots_txt',\n      'ENABLE_PDF_PARSING': 'pdf.enable_parsing',\n      'ALLOW_ALL_TLDS': 'domain.allow_all_tlds',\n      'DEBUG_MODE': 'development.debug',\n      'MAX_CONCURRENT': 'queue.max_concurrent',\n      'STORAGE_DIR': 'storage.local_directory'\n    };\n\n    for (const [envVar, configPath] of Object.entries(envMappings)) {\n      const envValue = process.env[envVar];\n      if (envValue !== undefined) {\n        this.setNestedProperty(config, configPath, this.parseEnvValue(envValue));\n        logger.info(`Applied environment override: ${envVar} -> ${configPath}`);\n      }\n    }\n  }\n\n  private parseEnvValue(value: string): any {\n    if (value.toLowerCase() === 'true') return true;\n    if (value.toLowerCase() === 'false') return false;\n    const num = Number(value);\n    if (!isNaN(num)) return num;\n    return value;\n  }\n\n  private setNestedProperty(obj: any, path: string, value: any): void {\n    const keys = path.split('.');\n    let current = obj;\n\n    for (let i = 0; i < keys.length - 1; i++) {\n      const key = keys[i];\n      if (!(key in current)) {\n        current[key] = {};\n      }\n      current = current[key];\n    }\n\n    current[keys[keys.length - 1]] = value;\n  }\n}\n\n// Export singleton instance\nexport const config = ConfigManager.getInstance().getConfig();\nexport default ConfigManager;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,SAAS;AAChB,YAAY,QAAQ;AACpB,YAAY,UAAU;AACtB,YAAY,UAAU;AACtB,SAAS,cAAc;AACvB,SAAS,qBAAqB;AAE9B,MAAM,SAAS,IAAI,OAAO,eAAe;AAGzC,MAAM,aAAa,cAAc,YAAY,GAAG;AAChD,MAAM,YAAY,KAAK,QAAQ,UAAU;AA8GzC,MAAM,eAAe,IAAI,OAAkB;AAAA,EACzC,KAAK,IAAI,OAAO,EAAE,IAAI,EAAE,QAAQ,uBAAuB;AAAA,EACvD,WAAW,IAAI,OAAO;AAAA,IACpB,SAAS,IAAI,QAAQ,EAAE,QAAQ,IAAI;AAAA,IACnC,MAAM,IAAI,OAAO,EAAE,QAAQ,cAAc;AAAA,EAC3C,CAAC,EAAE,QAAQ;AAAA,EACX,QAAQ,IAAI,OAAO;AAAA,IACjB,oBAAoB,IAAI,QAAQ,EAAE,QAAQ,IAAI;AAAA,EAChD,CAAC,EAAE,QAAQ;AAAA,EACX,KAAK,IAAI,OAAO;AAAA,IACd,gBAAgB,IAAI,QAAQ,EAAE,QAAQ,IAAI;AAAA,IAC1C,kBAAkB,IAAI,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,GAAG,EAAE,QAAQ,EAAE;AAAA,IACzD,4BAA4B,IAAI,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,GAAG,EAAE,QAAQ,EAAE;AAAA,IACnE,YAAY,IAAI,QAAQ,EAAE,QAAQ,KAAK;AAAA,IACvC,kBAAkB,IAAI,QAAQ,EAAE,QAAQ,IAAI;AAAA,IAC5C,WAAW,IAAI,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,GAAI,EAAE,QAAQ,GAAG;AAAA,EACtD,CAAC,EAAE,QAAQ;AAAA,EACX,QAAQ,IAAI,OAAO;AAAA,IACjB,gBAAgB,IAAI,QAAQ,EAAE,QAAQ,KAAK;AAAA,EAC7C,CAAC,EAAE,QAAQ;AAAA,EACX,SAAS,IAAI,OAAO;AAAA,IAClB,iBAAiB,IAAI,OAAO,EAAE,QAAQ,WAAW;AAAA,IACjD,mBAAmB,IAAI,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ,CAAC;AAAA,EAClD,CAAC,EAAE,QAAQ;AAAA,EACX,aAAa,IAAI,OAAO;AAAA,IACtB,OAAO,IAAI,QAAQ,EAAE,QAAQ,KAAK;AAAA,IAClC,cAAc,IAAI,QAAQ,EAAE,QAAQ,IAAI;AAAA,EAC1C,CAAC,EAAE,QAAQ;AAAA,EACX,aAAa,IAAI,OAAO;AAAA,IACtB,sBAAsB,IAAI,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,GAAG,EAAE,QAAQ,EAAE;AAAA,IAC7D,mBAAmB,IAAI,OAAO,EAAE,IAAI,GAAI,EAAE,QAAQ,GAAK;AAAA,IACvD,uBAAuB,IAAI,OAAO,EAAE,IAAI,GAAI,EAAE,QAAQ,GAAK;AAAA,IAC3D,iBAAiB,IAAI,OAAO,EAAE,IAAI,GAAI,EAAE,QAAQ,GAAK;AAAA,IACrD,uBAAuB,IAAI,OAAO,EAAE,IAAI,EAAE,EAAE,QAAQ,GAAI;AAAA,IACxD,SAAS,IAAI,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ,EAAE;AAAA,IACvC,sBAAsB,IAAI,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ,GAAG;AAAA,EACvD,CAAC,EAAE,QAAQ;AAAA,EACX,OAAO,IAAI,OAAO;AAAA,IAChB,gBAAgB,IAAI,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,QAAQ,CAAC;AAAA,IACrD,aAAa,IAAI,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ,CAAC;AAAA,IAC1C,aAAa,IAAI,OAAO,EAAE,IAAI,GAAG,EAAE,QAAQ,GAAI;AAAA,IAC/C,aAAa,IAAI,OAAO,EAAE,IAAI,GAAI,EAAE,QAAQ,GAAK;AAAA,IACjD,iBAAiB,IAAI,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ,CAAC;AAAA,EAChD,CAAC,EAAE,QAAQ;AAAA,EACX,SAAS,IAAI,OAAO;AAAA,IAClB,gBAAgB,IAAI,OAAO,EAAE,IAAI,GAAG,EAAE,QAAQ,IAAI;AAAA,IAClD,iBAAiB,IAAI,OAAO,EAAE,IAAI,GAAG,EAAE,QAAQ,IAAI;AAAA,IACnD,cAAc,IAAI,QAAQ,EAAE,QAAQ,IAAI;AAAA,IACxC,oBAAoB,IAAI,OAAO,EAAE,IAAI,GAAI,EAAE,QAAQ,GAAK;AAAA,IACxD,uBAAuB,IAAI,QAAQ,EAAE,QAAQ,IAAI;AAAA,EACnD,CAAC,EAAE,QAAQ;AAAA,EACX,OAAO,IAAI,OAAO;AAAA,IAChB,sBAAsB,IAAI,OAAO,EAAE,IAAI,GAAI,EAAE,QAAQ,KAAQ;AAAA,IAC7D,uBAAuB,IAAI,QAAQ,EAAE,QAAQ,KAAK;AAAA,IAClD,kBAAkB,IAAI,OAAO,EAAE,IAAI,EAAE,EAAE,QAAQ,GAAI;AAAA,EACrD,CAAC,EAAE,QAAQ;AAAA,EACX,SAAS,IAAI,OAAO;AAAA,IAClB,oBAAoB,IAAI,QAAQ,EAAE,QAAQ,IAAI;AAAA,IAC9C,kBAAkB,IAAI,OAAO,EAAE,QAAQ,EAAE;AAAA,IACzC,kBAAkB,IAAI,OAAO,EAAE,QAAQ,EAAE;AAAA,IACzC,gBAAgB,IAAI,QAAQ,EAAE,QAAQ,IAAI;AAAA,IAC1C,eAAe,IAAI,QAAQ,EAAE,QAAQ,IAAI;AAAA,IACzC,oBAAoB,IAAI,OAAO,EAAE,IAAI,GAAI,EAAE,QAAQ,GAAO;AAAA,IAC1D,oBAAoB,IAAI,OAAO,EAAE,QAAQ,qCAAqC;AAAA,IAC9E,sBAAsB,IAAI,OAAO,EAAE,QAAQ,EAAE;AAAA,EAC/C,CAAC,EAAE,QAAQ;AAAA,EACX,aAAa,IAAI,OAAO;AAAA,IACtB,aAAa,IAAI,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ,CAAC;AAAA,IAC1C,oBAAoB,IAAI,QAAQ,EAAE,QAAQ,IAAI;AAAA,EAChD,CAAC,EAAE,QAAQ;AAAA,EACX,YAAY,IAAI,QAAQ,EAAE,QAAQ,IAAI;AAAA,EACtC,cAAc,IAAI,OAAO,EAAE;AAAA,IACzB,IAAI,OAAO;AAAA,IACX,IAAI,OAAO;AAAA,MACT,SAAS,IAAI,OAAO,EAAE,QAAQ,EAAE;AAAA,MAChC,UAAU,IAAI,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE;AAAA,MACvC,OAAO,IAAI,OAAO,EAAE,QAAQ,EAAE;AAAA,MAC9B,aAAa,IAAI,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,QAAQ,GAAG;AAAA,MACnD,gBAAgB,IAAI,OAAO,EAAE,QAAQ,EAAE;AAAA,MACvC,gBAAgB,IAAI,OAAO;AAAA,QACzB,YAAY,IAAI,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ,IAAI;AAAA,QAC5C,OAAO,IAAI,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,QAAQ,CAAG;AAAA,QAC7C,mBAAmB,IAAI,OAAO,EAAE,IAAI,EAAE,EAAE,IAAI,CAAC,EAAE,QAAQ,CAAG;AAAA,QAC1D,kBAAkB,IAAI,OAAO,EAAE,IAAI,EAAE,EAAE,IAAI,CAAC,EAAE,QAAQ,CAAG;AAAA,MAC3D,CAAC,EAAE,QAAQ;AAAA,MACX,oBAAoB,IAAI,OAAO,EAAE,IAAI,GAAI,EAAE,QAAQ,GAAK;AAAA,MACxD,aAAa,IAAI,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ,CAAC;AAAA,IAC5C,CAAC;AAAA,EACH,EAAE,QAAQ,CAAC,CAAC;AAAA,EACZ,UAAU,IAAI,OAAO,EAAE,QAAQ,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,EAAE,QAAQ,CAAC,CAAC;AAAA,EACrE,aAAa,IAAI,OAAO;AAAA,IACtB,qBAAqB,IAAI,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ,EAAE;AAAA,IACnD,4BAA4B,IAAI,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ,CAAC;AAAA,IACzD,6BAA6B,IAAI,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ,EAAE;AAAA,EAC7D,CAAC,EAAE,QAAQ;AAAA,EACX,OAAO,IAAI,OAAO;AAAA,IAChB,YAAY,IAAI,OAAO,EAAE,QAAQ,EAAE;AAAA,IACnC,aAAa,IAAI,OAAO,EAAE,QAAQ,EAAE;AAAA,IACpC,aAAa,IAAI,OAAO,EAAE,QAAQ,EAAE;AAAA,EACtC,CAAC,EAAE,QAAQ;AAAA,EACX,SAAS,IAAI,OAAO;AAAA,IAClB,gBAAgB,IAAI,OAAO,EAAE,QAAQ,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,EAAE,QAAQ,CAAC,CAAC;AAAA,IAC3E,qBAAqB,IAAI,OAAO,EAAE,QAAQ,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,EAAE,QAAQ,CAAC,CAAC;AAAA,IAChF,uBAAuB,IAAI,OAAO,EAAE,QAAQ,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,EAAE,QAAQ,CAAC,CAAC;AAAA,EACpF,CAAC,EAAE,QAAQ;AACb,CAAC;AAEM,MAAM,cAAc;AAAA,EAOjB,cAAc;AAHtB,SAAQ,UAA+B;AACvC,SAAQ,0BAA8D,CAAC;AAIrE,SAAK,aAAa,KAAK,QAAQ,WAAW,MAAM,MAAM,MAAM,aAAa;AACzE,SAAK,SAAS,KAAK,sBAAsB;AACzC,SAAK,iBAAiB;AAAA,EACxB;AAAA,EAEA,OAAc,cAA6B;AACzC,QAAI,CAAC,cAAc,UAAU;AAC3B,oBAAc,WAAW,IAAI,cAAc;AAAA,IAC7C;AACA,WAAO,cAAc;AAAA,EACvB;AAAA,EAEO,YAAuB;AAC5B,WAAO,KAAK;AAAA,EACd;AAAA,EAEO,gBAAwB;AAC7B,WAAO,KAAK;AAAA,EACd;AAAA,EAEQ,wBAAmC;AACzC,QAAI;AACF,UAAI,YAAiB,CAAC;AAEtB,UAAI,GAAG,WAAW,KAAK,UAAU,GAAG;AAClC,cAAM,gBAAgB,GAAG,aAAa,KAAK,YAAY,MAAM;AAC7D,oBAAY,KAAK,KAAK,aAAa,KAAK,CAAC;AACzC,eAAO,KAAK,6BAA6B,KAAK,UAAU,EAAE;AAAA,MAC5D,OAAO;AACL,eAAO,KAAK,2BAA2B,KAAK,UAAU,kBAAkB;AAAA,MAC1E;AAGA,WAAK,0BAA0B,SAAS;AAGxC,YAAM,EAAE,OAAO,MAAM,IAAI,aAAa,SAAS,WAAW;AAAA,QACxD,cAAc;AAAA,QACd,YAAY;AAAA,MACd,CAAC;AAED,UAAI,OAAO;AACT,eAAO,MAAM,oCAAoC,MAAM,OAAO;AAC9D,cAAM,IAAI,MAAM,oCAAoC,MAAM,OAAO,EAAE;AAAA,MACrE;AAEA,aAAO,KAAK,iDAAiD;AAC7D,aAAO;AAAA,IAET,SAAS,OAAO;AACd,aAAO,MAAM,iCAAiC,KAAK;AACnD,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEQ,mBAAyB;AAC/B,QAAI;AAEF,WAAK,UAAU,GAAG,MAAM,KAAK,YAAY,EAAE,YAAY,MAAM,GAAG,CAAC,cAAc;AAC7E,YAAI,cAAc,UAAU;AAC1B,iBAAO,KAAK,mCAAmC;AAC/C,cAAI;AACF,kBAAM,YAAY,KAAK,sBAAsB;AAC7C,iBAAK,SAAS;AAGd,iBAAK,wBAAwB,QAAQ,cAAY;AAC/C,kBAAI;AACF,yBAAS,SAAS;AAAA,cACpB,SAAS,OAAO;AACd,uBAAO,MAAM,oCAAoC,KAAK;AAAA,cACxD;AAAA,YACF,CAAC;AAED,mBAAO,KAAK,yCAAyC;AAAA,UACvD,SAAS,OAAO;AACd,mBAAO,MAAM,mCAAmC,KAAK;AAAA,UACvD;AAAA,QACF;AAAA,MACF,CAAC;AAED,aAAO,KAAK,6BAA6B;AAAA,IAC3C,SAAS,OAAO;AACd,aAAO,KAAK,wCAAwC,KAAK;AAAA,IAC3D;AAAA,EACF;AAAA,EAEO,eAAe,UAA6C;AACjE,SAAK,wBAAwB,KAAK,QAAQ;AAAA,EAC5C;AAAA,EAEO,SAAe;AACpB,QAAI;AACF,WAAK,SAAS,KAAK,sBAAsB;AACzC,aAAO,KAAK,qCAAqC;AAAA,IACnD,SAAS,OAAO;AACd,aAAO,MAAM,mCAAmC,KAAK;AACrD,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEO,UAAgB;AACrB,QAAI,KAAK,SAAS;AAChB,WAAK,QAAQ,MAAM;AACnB,WAAK,UAAU;AACf,aAAO,KAAK,6BAA6B;AAAA,IAC3C;AAAA,EACF;AAAA,EAEQ,0BAA0BA,SAAmB;AAEnD,UAAM,cAAc;AAAA,MAClB,sBAAsB;AAAA,MACtB,sBAAsB;AAAA,MACtB,kBAAkB;AAAA,MAClB,cAAc;AAAA,MACd,kBAAkB;AAAA,MAClB,eAAe;AAAA,IACjB;AAEA,eAAW,CAAC,QAAQ,UAAU,KAAK,OAAO,QAAQ,WAAW,GAAG;AAC9D,YAAM,WAAW,QAAQ,IAAI,MAAM;AACnC,UAAI,aAAa,QAAW;AAC1B,aAAK,kBAAkBA,SAAQ,YAAY,KAAK,cAAc,QAAQ,CAAC;AACvE,eAAO,KAAK,iCAAiC,MAAM,OAAO,UAAU,EAAE;AAAA,MACxE;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,cAAc,OAAoB;AACxC,QAAI,MAAM,YAAY,MAAM,OAAQ,QAAO;AAC3C,QAAI,MAAM,YAAY,MAAM,QAAS,QAAO;AAC5C,UAAM,MAAM,OAAO,KAAK;AACxB,QAAI,CAAC,MAAM,GAAG,EAAG,QAAO;AACxB,WAAO;AAAA,EACT;AAAA,EAEQ,kBAAkB,KAAUC,OAAc,OAAkB;AAClE,UAAM,OAAOA,MAAK,MAAM,GAAG;AAC3B,QAAI,UAAU;AAEd,aAAS,IAAI,GAAG,IAAI,KAAK,SAAS,GAAG,KAAK;AACxC,YAAM,MAAM,KAAK,CAAC;AAClB,UAAI,EAAE,OAAO,UAAU;AACrB,gBAAQ,GAAG,IAAI,CAAC;AAAA,MAClB;AACA,gBAAU,QAAQ,GAAG;AAAA,IACvB;AAEA,YAAQ,KAAK,KAAK,SAAS,CAAC,CAAC,IAAI;AAAA,EACnC;AACF;AAGO,MAAM,SAAS,cAAc,YAAY,EAAE,UAAU;AAC5D,IAAO,yBAAQ;",
  "names": ["config", "path"]
}
