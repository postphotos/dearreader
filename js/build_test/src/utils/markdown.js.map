{
  "version": 3,
  "sources": ["../../../src/utils/markdown.ts"],
  "sourcesContent": ["\nexport function tidyMarkdown(markdown: string): string {\n\n    // Step 1: Handle complex broken links with text and optional images spread across multiple lines\n    let normalizedMarkdown = markdown.replace(/\\[\\s*([^\\]\\n]+?)\\s*\\]\\s*\\(\\s*([^)]+)\\s*\\)/g, (match, text, url) => {\n        // Remove internal new lines and excessive spaces within the text\n        text = text.replace(/\\s+/g, ' ').trim();\n        url = url.replace(/\\s+/g, '').trim();\n        return `[${text}](${url})`;\n    });\n\n    normalizedMarkdown = normalizedMarkdown.replace(/\\[\\s*([^\\]\\n!]*?)\\s*\\n*(?:!\\[([^\\]]*)\\]\\((.*?)\\))?\\s*\\n*\\]\\s*\\(\\s*([^)]+)\\s*\\)/g, (match, text, alt, imgUrl, linkUrl) => {\n        // Normalize by removing excessive spaces and new lines\n        text = text.replace(/\\s+/g, ' ').trim();\n        alt = alt ? alt.replace(/\\s+/g, ' ').trim() : '';\n        imgUrl = imgUrl ? imgUrl.replace(/\\s+/g, '').trim() : '';\n        linkUrl = linkUrl.replace(/\\s+/g, '').trim();\n        if (imgUrl) {\n            return `[${text} ![${alt}](${imgUrl})](${linkUrl})`;\n        } else {\n            return `[${text}](${linkUrl})`;\n        }\n    });\n\n    // Step 2: Normalize regular links that may be broken across lines\n    normalizedMarkdown = normalizedMarkdown.replace(/\\[\\s*([^\\]]+)\\]\\s*\\(\\s*([^)]+)\\)/g, (match, text, url) => {\n        text = text.replace(/\\s+/g, ' ').trim();\n        url = url.replace(/\\s+/g, '').trim();\n        return `[${text}](${url})`;\n    });\n\n    // Step 3: Replace more than two consecutive empty lines with exactly two empty lines\n    normalizedMarkdown = normalizedMarkdown.replace(/\\n{3,}/g, '\\n\\n');\n\n    // Step 4: Remove leading spaces from each line\n    normalizedMarkdown = normalizedMarkdown.replace(/^[ \\t]+/gm, '');\n\n    return normalizedMarkdown.trim();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACO,SAAS,aAAa,UAA0B;AAGnD,MAAI,qBAAqB,SAAS,QAAQ,8CAA8C,CAAC,OAAO,MAAM,QAAQ;AAE1G,WAAO,KAAK,QAAQ,QAAQ,GAAG,EAAE,KAAK;AACtC,UAAM,IAAI,QAAQ,QAAQ,EAAE,EAAE,KAAK;AACnC,WAAO,IAAI,IAAI,KAAK,GAAG;AAAA,EAC3B,CAAC;AAED,uBAAqB,mBAAmB,QAAQ,mFAAmF,CAAC,OAAO,MAAM,KAAK,QAAQ,YAAY;AAEtK,WAAO,KAAK,QAAQ,QAAQ,GAAG,EAAE,KAAK;AACtC,UAAM,MAAM,IAAI,QAAQ,QAAQ,GAAG,EAAE,KAAK,IAAI;AAC9C,aAAS,SAAS,OAAO,QAAQ,QAAQ,EAAE,EAAE,KAAK,IAAI;AACtD,cAAU,QAAQ,QAAQ,QAAQ,EAAE,EAAE,KAAK;AAC3C,QAAI,QAAQ;AACR,aAAO,IAAI,IAAI,MAAM,GAAG,KAAK,MAAM,MAAM,OAAO;AAAA,IACpD,OAAO;AACH,aAAO,IAAI,IAAI,KAAK,OAAO;AAAA,IAC/B;AAAA,EACJ,CAAC;AAGD,uBAAqB,mBAAmB,QAAQ,qCAAqC,CAAC,OAAO,MAAM,QAAQ;AACvG,WAAO,KAAK,QAAQ,QAAQ,GAAG,EAAE,KAAK;AACtC,UAAM,IAAI,QAAQ,QAAQ,EAAE,EAAE,KAAK;AACnC,WAAO,IAAI,IAAI,KAAK,GAAG;AAAA,EAC3B,CAAC;AAGD,uBAAqB,mBAAmB,QAAQ,WAAW,MAAM;AAGjE,uBAAqB,mBAAmB,QAAQ,aAAa,EAAE;AAE/D,SAAO,mBAAmB,KAAK;AACnC;",
  "names": []
}
