{
  "version": 3,
  "sources": ["../../../src/middleware/concurrency.ts"],
  "sourcesContent": ["import { Request, Response, NextFunction } from 'express';\nimport config from '../config.js';\n\ntype ReleaseFn = () => void;\n\nclass Semaphore {\n  private permits: number;\n  private waiting: Array<(release: ReleaseFn) => void> = [];\n\n  constructor(private maxPermits: number) {\n    this.permits = maxPermits;\n  }\n\n  async acquire(): Promise<ReleaseFn> {\n    if (this.permits > 0) {\n      this.permits -= 1;\n      return () => {\n        this.permits += 1;\n        this._drainWaiting();\n      };\n    }\n\n    return new Promise<ReleaseFn>((resolve) => {\n      this.waiting.push((release) => resolve(release));\n    });\n  }\n\n  private _drainWaiting() {\n    if (this.waiting.length > 0 && this.permits > 0) {\n      const waiter = this.waiting.shift()!;\n      this.permits -= 1;\n      waiter(() => {\n        this.permits += 1;\n        this._drainWaiting();\n      });\n    }\n  }\n}\n\nconst globalSemaphore = new Semaphore(config.concurrency?.max_api_concurrency || 50);\n\nconst clientSemaphores = new Map<string, { sem: Semaphore; queued: number }>();\n\nfunction getClientId(req: Request) {\n  return (req.headers['x-api-key'] as string) || (req.ip || (req.connection as any)?.remoteAddress || 'anon');\n}\n\nexport function concurrencyMiddleware(req: Request, res: Response, next: NextFunction) {\n  const clientId = getClientId(req);\n  const clientCfg = { max: config.concurrency?.default_client_concurrency || 5, maxQueue: config.concurrency?.max_queue_length_per_client || 20 };\n\n  let clientState = clientSemaphores.get(clientId);\n  if (!clientState) {\n    clientState = { sem: new Semaphore(clientCfg.max), queued: 0 };\n    clientSemaphores.set(clientId, clientState);\n  }\n\n  if (clientState.queued >= clientCfg.maxQueue) {\n    res.setHeader('Retry-After', '5');\n    return res.status(429).json({ error: 'Client queue limit exceeded, try again later' });\n  }\n\n  clientState.queued += 1;\n\n  globalSemaphore\n    .acquire()\n    .then((releaseGlobal) => {\n      clientState!.queued -= 1;\n      clientState!.sem\n        .acquire()\n        .then((releaseClient) => {\n          const cleanup = () => {\n            try {\n              releaseClient();\n            } catch {}\n            try {\n              releaseGlobal();\n            } catch {}\n          };\n          res.once('finish', cleanup);\n          res.once('close', cleanup);\n          next();\n        })\n        .catch(() => {\n          try {\n            releaseGlobal();\n          } catch {}\n          res.setHeader('Retry-After', '1');\n          res.status(503).json({ error: 'Failed to acquire client semaphore' });\n        });\n    })\n    .catch(() => {\n      res.setHeader('Retry-After', '1');\n      res.status(503).json({ error: 'Server busy, try again later' });\n    });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,YAAY;AAInB,MAAM,UAAU;AAAA,EAId,YAAoB,YAAoB;AAApB;AAFpB,SAAQ,UAA+C,CAAC;AAGtD,SAAK,UAAU;AAAA,EACjB;AAAA,EAEA,MAAM,UAA8B;AAClC,QAAI,KAAK,UAAU,GAAG;AACpB,WAAK,WAAW;AAChB,aAAO,MAAM;AACX,aAAK,WAAW;AAChB,aAAK,cAAc;AAAA,MACrB;AAAA,IACF;AAEA,WAAO,IAAI,QAAmB,CAAC,YAAY;AACzC,WAAK,QAAQ,KAAK,CAAC,YAAY,QAAQ,OAAO,CAAC;AAAA,IACjD,CAAC;AAAA,EACH;AAAA,EAEQ,gBAAgB;AACtB,QAAI,KAAK,QAAQ,SAAS,KAAK,KAAK,UAAU,GAAG;AAC/C,YAAM,SAAS,KAAK,QAAQ,MAAM;AAClC,WAAK,WAAW;AAChB,aAAO,MAAM;AACX,aAAK,WAAW;AAChB,aAAK,cAAc;AAAA,MACrB,CAAC;AAAA,IACH;AAAA,EACF;AACF;AAEA,MAAM,kBAAkB,IAAI,UAAU,OAAO,aAAa,uBAAuB,EAAE;AAEnF,MAAM,mBAAmB,oBAAI,IAAgD;AAE7E,SAAS,YAAY,KAAc;AACjC,SAAQ,IAAI,QAAQ,WAAW,MAAiB,IAAI,MAAO,IAAI,YAAoB,iBAAiB;AACtG;AAEO,SAAS,sBAAsB,KAAc,KAAe,MAAoB;AACrF,QAAM,WAAW,YAAY,GAAG;AAChC,QAAM,YAAY,EAAE,KAAK,OAAO,aAAa,8BAA8B,GAAG,UAAU,OAAO,aAAa,+BAA+B,GAAG;AAE9I,MAAI,cAAc,iBAAiB,IAAI,QAAQ;AAC/C,MAAI,CAAC,aAAa;AAChB,kBAAc,EAAE,KAAK,IAAI,UAAU,UAAU,GAAG,GAAG,QAAQ,EAAE;AAC7D,qBAAiB,IAAI,UAAU,WAAW;AAAA,EAC5C;AAEA,MAAI,YAAY,UAAU,UAAU,UAAU;AAC5C,QAAI,UAAU,eAAe,GAAG;AAChC,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,+CAA+C,CAAC;AAAA,EACvF;AAEA,cAAY,UAAU;AAEtB,kBACG,QAAQ,EACR,KAAK,CAAC,kBAAkB;AACvB,gBAAa,UAAU;AACvB,gBAAa,IACV,QAAQ,EACR,KAAK,CAAC,kBAAkB;AACvB,YAAM,UAAU,MAAM;AACpB,YAAI;AACF,wBAAc;AAAA,QAChB,QAAQ;AAAA,QAAC;AACT,YAAI;AACF,wBAAc;AAAA,QAChB,QAAQ;AAAA,QAAC;AAAA,MACX;AACA,UAAI,KAAK,UAAU,OAAO;AAC1B,UAAI,KAAK,SAAS,OAAO;AACzB,WAAK;AAAA,IACP,CAAC,EACA,MAAM,MAAM;AACX,UAAI;AACF,sBAAc;AAAA,MAChB,QAAQ;AAAA,MAAC;AACT,UAAI,UAAU,eAAe,GAAG;AAChC,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,qCAAqC,CAAC;AAAA,IACtE,CAAC;AAAA,EACL,CAAC,EACA,MAAM,MAAM;AACX,QAAI,UAAU,eAAe,GAAG;AAChC,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,+BAA+B,CAAC;AAAA,EAChE,CAAC;AACL;",
  "names": []
}
