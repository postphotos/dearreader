{
  "version": 3,
  "sources": ["../../../src/cloud-functions/crawler.ts"],
  "sourcesContent": ["import {\n    marshalErrorLike,\n    RPCHost,\n    HashManager,\n    AssertionFailureError, Defer,\n} from 'civkit';\nimport { singleton } from 'tsyringe';\nimport { AsyncContext, FirebaseStorageBucketControl, Logger } from '../shared/index.js';\nimport _ from 'lodash';\nimport { PageSnapshot, PuppeteerControl, ScrappingOptions } from '../services/puppeteer.js';\nimport { Request, Response } from 'express';\n// import { AltTextService } from '../services/alt-text';\nimport TurndownService from 'turndown';\n// No type definitions available for turndown-plugin-gfm \u2014 require it at runtime and treat as any\n// @ts-ignore\nimport * as turndownPluginGfm from 'turndown-plugin-gfm';\n// import { Crawled } from '../db/crawled';\nimport { cleanAttribute } from '../utils/misc.js';\nimport { randomUUID } from 'crypto';\nimport * as yaml from 'js-yaml';\nimport {\n    ConfigurationSchema,\n    CrawlerConfiguration,\n    TurndownOptions,\n    RequestHeaders,\n    CookieData,\n    AbuseEvent,\n    ImgBrief,\n    ExtendedSnapshot\n} from '../types/interfaces.js';\n\nimport { CrawlerOptions } from '../dto/scraping-options.js';\n// import { PDFExtractor } from '../services/pdf-extract.js';\nimport PDFExtractor from '../services/pdf-extract.js';\nimport { RobotsChecker } from '../services/robots-checker.js';\nimport { DomainBlockade } from '../db/domain-blockade.js';\nimport { JSDomControl } from '../services/jsdom.js';\n\nimport { TransferProtocolMetadata } from 'civkit';\nimport * as fs from 'fs';\nimport * as path from 'path';\n// import { URL } from 'url'; // Use the global URL instead of Node's URL\n\nconsole.log('Initializing CrawlerHost');\n\n// Helper: safely resolve a string or URL to a URL object.\n// If the input is a relative path, resolve against the provided base or default to http://localhost:3000\nfunction safeNormalizeUrl(input: string | URL, base?: string | URL): URL {\n    try {\n        if (input instanceof URL) return input;\n        // If base provided, let URL resolve against it\n        if (base) return new URL(input, base);\n        // Try as absolute URL first\n        return new URL(input);\n    } catch (_) {\n        // If it's a relative path, resolve against default local base\n        const defaultBase = base ? String(base) : 'http://localhost:3000';\n        return new URL(input.toString(), defaultBase);\n    }\n}\n\n\n/**\n * Sends a response to the client with the specified data and metadata, setting status, headers, and content type as needed.\n * @param res - Express response object\n * @param data - Data to send in the response\n * @param meta - Metadata for response headers, status code, and content type\n */\nfunction sendResponse<T>(res: Response, data: T, meta: TransferProtocolMetadata): T {\n    if (meta.code) {\n        res.status(meta.code);\n    }\n    if (meta.contentType) {\n        res.type(meta.contentType);\n    }\n    if (meta.headers) {\n        for (const [key, value] of Object.entries(meta.headers)) {\n            if (value !== undefined) {\n                res.setHeader(key, value);\n            }\n        }\n    }\n    res.send(data);\n    return data;\n}\n\n\nexport interface ExtraScrappingOptions extends ScrappingOptions {\n    withIframe?: boolean;\n    targetSelector?: string | string[];\n    removeSelector?: string | string[];\n    keepImgDataUrl?: boolean;\n    pdfAction?: string;\n}\n\nexport interface FormattedPage {\n    title?: string;\n    description?: string;\n    url?: string;\n    content?: string;\n    publishedTime?: string;\n    html?: string;\n    text?: string;\n    screenshotUrl?: string;\n    screenshot?: Buffer;\n    pageshotUrl?: string;\n    pageshot?: Buffer;\n    links?: { [k: string]: string; };\n    images?: { [k: string]: string; };\n\n    toString: () => string;\n}\n@singleton()\nexport class CrawlerHost extends RPCHost {\n    private static md5Hasher = new HashManager('md5', 'hex');\n    logger = new Logger('CrawlerHost');\n    turnDownPlugins = [turndownPluginGfm.tables];\n\n    cacheRetentionMs = 1000 * 3600 * 24 * 7;\n    cacheValidMs = 1000 * 3600;\n    urlValidMs = 1000 * 3600 * 4;\n    abuseBlockMs = 1000 * 3600;\n\n    private config: CrawlerConfiguration = {};\n\n    constructor(\n        public puppeteerControl: PuppeteerControl,\n        protected jsdomControl: JSDomControl,\n        // protected altTextService: AltTextService,\n        // protected pdfExtractor: PDFExtractor,\n        protected pdfExtractor: PDFExtractor,\n        protected robotsChecker: RobotsChecker,\n        protected firebaseObjectStorage: FirebaseStorageBucketControl,\n        protected threadLocal: AsyncContext,\n    ) {\n        super(...arguments);\n        console.log('CrawlerHost constructor called');\n        this.loadConfig();\n        console.log('Initializing CrawlerHost with dependencies:', {\n            puppeteerControl: !!puppeteerControl,\n            jsdomControl: !!jsdomControl,\n            firebaseObjectStorage: !!firebaseObjectStorage,\n            threadLocal: !!threadLocal,\n            pdfExtractor: !!pdfExtractor,\n            robotsChecker: !!robotsChecker,\n        });\n\n        puppeteerControl.on('crawled', async (snapshot: PageSnapshot, options: ScrappingOptions & { url: URL; }) => {\n            console.log('Crawled event received', { url: options.url.toString() });\n            if (!snapshot.title?.trim() && !snapshot.pdfs?.length) {\n                console.log('Skipping snapshot due to empty title and no PDFs');\n                return;\n            }\n            if (options.cookies?.length) {\n                console.log('Skipping caching due to cookies');\n                // Potential privacy issue, dont cache if cookies are used\n                return;\n            }\n        });\n\n        // Add crawl method to puppeteerControl if it doesn't already exist\n        if (!puppeteerControl.crawl) {\n            puppeteerControl.crawl = async function(url: URL, options?: ExtraScrappingOptions): Promise<PageSnapshot | undefined> {\n                console.log('PuppeteerControl crawl method called:', { url: url.toString(), options });\n                const iterator = this.scrape(url, options);\n                for await (const snapshot of iterator) {\n                    if (snapshot) {\n                        return snapshot;\n                    }\n                }\n                return undefined;\n            };\n        }\n\n        puppeteerControl.on('abuse', async (abuseEvent: { url: URL; reason: string, sn: number; }) => {\n            console.log('Abuse event received', abuseEvent);\n            this.logger.warn(`Abuse detected on ${abuseEvent.url}, blocking ${abuseEvent.url.hostname}`, { reason: abuseEvent.reason, sn: abuseEvent.sn });\n\n            const blockade = new DomainBlockade();\n            blockade.domain = abuseEvent.url.hostname.toLowerCase();\n            blockade.triggerReason = `${abuseEvent.reason}`;\n            blockade.triggerUrl = abuseEvent.url.toString();\n            blockade.createdAt = new Date();\n            blockade.expireAt = new Date(Date.now() + this.abuseBlockMs);\n            await blockade.save().catch(() => {\n                console.error('Failed to save domain blockade');\n                this.logger.warn(`Failed to save domain blockade for ${abuseEvent.url.hostname}`);\n            });\n\n        });\n    }\n\n    private loadConfig() {\n        try {\n            const configPath = path.join(process.cwd(), 'config.yaml');\n            if (fs.existsSync(configPath)) {\n                const configContent = fs.readFileSync(configPath, 'utf8');\n                const loadedConfig = yaml.load(configContent) as ConfigurationSchema;\n                this.config = loadedConfig || {};\n                console.log('Loaded configuration from config.yaml:', this.config);\n            } else {\n                console.log('No config.yaml found, using defaults');\n                this.config = {};\n            }\n\n            // Override with environment variables if they exist\n            this.applyEnvironmentOverrides();\n\n        } catch (error) {\n            console.error('Error loading config.yaml:', error);\n            this.config = {};\n            this.applyEnvironmentOverrides();\n        }\n    }\n\n    private applyEnvironmentOverrides() {\n        // Environment variable overrides\n        if (process.env.RESPECT_ROBOTS_TXT) {\n            this.config.robots = this.config.robots || {};\n            this.config.robots.respect_robots_txt = process.env.RESPECT_ROBOTS_TXT === 'true';\n        }\n\n        if (process.env.ENABLE_PDF_PARSING) {\n            this.config.pdf = this.config.pdf || {};\n            this.config.pdf.enable_parsing = process.env.ENABLE_PDF_PARSING === 'true';\n        }\n\n        if (process.env.ALLOW_ALL_TLDS) {\n            this.config.domain = this.config.domain || {};\n            this.config.domain.allow_all_tlds = process.env.ALLOW_ALL_TLDS === 'true';\n        }\n\n        if (process.env.DEBUG_MODE) {\n            this.config.development = this.config.development || {};\n            this.config.development.debug = process.env.DEBUG_MODE === 'true';\n        }\n\n        // Set defaults if not configured\n        this.config.robots = this.config.robots || { respect_robots_txt: true };\n        this.config.pdf = this.config.pdf || {\n            enable_parsing: true,\n            max_file_size_mb: 50,\n            processing_timeout_seconds: 30,\n            enable_ocr: false,\n            extract_metadata: true,\n            max_pages: 100\n        };\n        this.config.domain = this.config.domain || { allow_all_tlds: false };\n        this.config.storage = this.config.storage || { local_directory: \"./storage\", max_file_age_days: 7 };\n        this.config.development = this.config.development || { debug: false, cors_enabled: true };\n\n        // New configuration defaults\n        this.config.performance = this.config.performance || {\n            max_concurrent_pages: 10,\n            page_idle_timeout: 60000,\n            health_check_interval: 30000,\n            request_timeout: 10000,\n            max_requests_per_page: 1000,\n            max_rps: 60,\n            max_domains_per_page: 200\n        };\n\n        this.config.queue = this.config.queue || {\n            max_concurrent: 3,\n            max_retries: 3,\n            retry_delay: 5000,\n            job_timeout: 60000\n        };\n\n        this.config.browser = this.config.browser || {\n            viewport_width: 1024,\n            viewport_height: 1024,\n            stealth_mode: true,\n            navigation_timeout: 30000,\n            wait_for_network_idle: true\n        };\n\n        this.config.cache = this.config.cache || {\n            robots_cache_timeout: 86400000,\n            enable_response_cache: false,\n            cache_size_limit: 1000\n        };\n\n        this.config.content = this.config.content || {\n            enable_readability: true,\n            remove_selectors: \"\",\n            target_selectors: \"\",\n            extract_images: true,\n            extract_links: true,\n            max_content_length: 1000000\n        };\n    }\n\n    override async init() {\n        console.log('Initializing CrawlerHost');\n        await this.dependencyReady();\n\n        this.emit('ready');\n        console.log('CrawlerHost ready');\n        console.log('CrawlerHost initialization complete');\n    }\n\n    markdownToHtml(markdown: string): string {\n        // Simple markdown to HTML converter for the index page\n        let html = markdown\n            // Headers\n            .replace(/^# (.*$)/gim, '<h1>$1</h1>')\n            .replace(/^## (.*$)/gim, '<h2>$1</h2>')\n            .replace(/^### (.*$)/gim, '<h3>$1</h3>')\n            .replace(/^#### (.*$)/gim, '<h4>$1</h4>')\n            // Bold\n            .replace(/\\*\\*(.*)\\*\\*/gim, '<strong>$1</strong>')\n            // Italic\n            .replace(/\\*(.*)\\*/gim, '<em>$1</em>')\n            // Code inline\n            .replace(/`([^`]+)`/gim, '<code>$1</code>')\n            // Links\n            .replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/gim, '<a href=\"$2\">$1</a>')\n            // Line breaks\n            .replace(/\\n\\n/gim, '</p><p>')\n            .replace(/\\n/gim, '<br>');\n\n        // Handle code blocks\n        html = html.replace(/```bash\\n([\\s\\S]*?)\\n```/gim, '<pre><code class=\"language-bash\">$1</code></pre>');\n        html = html.replace(/```([\\s\\S]*?)```/gim, '<pre><code>$1</code></pre>');\n\n        // Wrap in paragraphs\n        html = '<p>' + html + '</p>';\n\n        // Clean up empty paragraphs\n        html = html.replace(/<p><\\/p>/gim, '');\n        html = html.replace(/<p><h/gim, '<h');\n        html = html.replace(/<\\/h([1-6])><\\/p>/gim, '</h$1>');\n        html = html.replace(/<p><pre>/gim, '<pre>');\n        html = html.replace(/<\\/pre><\\/p>/gim, '</pre>');\n\n        return html;\n    }\n\n    getIndex(req?: Request): FormattedPage {\n        console.log('Getting index');\n\n        // Build the base URL from the request\n        const protocol = req?.get('x-forwarded-proto') || req?.protocol || 'http';\n        const host = req?.get('host') || 'localhost:3000';\n        const baseUrl = `${protocol}://${host}`;\n\n        const indexData = {\n            title: 'DearReader API - Local Web Content Extractor',\n            description: 'Convert any URL to LLM-friendly content',\n            url: baseUrl,\n            content: '',\n            publishedTime: undefined,\n            html: undefined,\n            text: undefined,\n            screenshotUrl: undefined,\n            screenshot: undefined,\n            pageshotUrl: undefined,\n            pageshot: undefined,\n            links: undefined,\n            images: undefined,\n            toString: function () {\n                return `Title: DearReader API - Local Web Content Extractor\n\nURL Source: ${this.url}\n\nMarkdown Content:\nDearReader API - Local Web Content Extractor\n===========================================\n\nWelcome to your local DearReader API! Convert any URL to LLM-friendly content.\n\n## \uD83D\uDCDA Try These Examples\n\n### Basic Content Extraction\n- [${baseUrl}/https://example.com](${baseUrl}/https://example.com)\n- [${baseUrl}/https://news.ycombinator.com](${baseUrl}/https://news.ycombinator.com)\n- [${baseUrl}/https://github.com/jina-ai/reader](${baseUrl}/https://github.com/jina-ai/reader)\n\n### With Different Response Formats\n- [JSON Format: ${baseUrl}/https://example.com (Accept: application/json)](${baseUrl}/https://example.com)\n- [Markdown: ${baseUrl}/https://example.com (Accept: text/plain)](${baseUrl}/https://example.com)\n- [HTML: ${baseUrl}/https://example.com (X-Respond-With: html)](${baseUrl}/https://example.com)\n- [Text Only: ${baseUrl}/https://example.com (X-Respond-With: text)](${baseUrl}/https://example.com)\n\n### Screenshots\n- [Screenshot: ${baseUrl}/https://example.com (X-Respond-With: screenshot)](${baseUrl}/https://example.com)\n- [Full Page: ${baseUrl}/https://example.com (X-Respond-With: pageshot)](${baseUrl}/https://example.com)\n\n## \uD83D\uDD27 Usage\n\nSimply append any URL to: \\`${baseUrl}/YOUR_URL\\`\n\nExamples:\n\\`\\`\\`bash\n# Get JSON response\ncurl -H \"Accept: application/json\" \"${baseUrl}/https://example.com\"\n\n# Get markdown\ncurl \"${baseUrl}/https://example.com\"\n\n# Get screenshot URL\ncurl -H \"X-Respond-With: screenshot\" \"${baseUrl}/https://example.com\"\n\\`\\`\\`\n\n## \uD83C\uDF10 Response Formats\n- **Default**: Clean markdown content\n- **JSON**: Complete metadata with links, images, and content\n- **HTML**: Cleaned HTML content\n- **Text**: Plain text extraction\n- **Screenshot/Pageshot**: URL to saved image\n\n## \uD83D\uDCCA Queue Monitoring\n- [Queue API: ${baseUrl}/queue](${baseUrl}/queue) - JSON queue statistics\n- [Queue Monitor: ${baseUrl}/queue-ui](${baseUrl}/queue-ui) - Real-time queue dashboard\n\n---\n\uD83D\uDCC1 Source Code: [GitHub Repository](https://github.com/postphotos/reader)`;\n            }\n        };\n        console.log('Index object created:', indexData);\n        return indexData;\n    }\n\n    getTurndown(options?: TurndownOptions) {\n        console.log('Getting Turndown service', options);\n        const turnDownService = new TurndownService({\n            codeBlockStyle: 'fenced' as 'fenced',\n            preformattedCode: true,\n        });\n        if (!options?.noRules) {\n            console.log('Adding Turndown rules');\n            turnDownService.addRule('remove-irrelevant', {\n                filter: ['meta', 'style', 'script', 'noscript', 'link', 'textarea', 'select'],\n                replacement: () => ''\n            });\n            turnDownService.addRule('truncate-svg', {\n                    filter: (node) => node.nodeName === 'SVG',\n    replacement: () => ''\n            });\n            turnDownService.addRule('title-as-h1', {\n                filter: ['title'],\n                replacement: (innerText) => `${innerText}\\n===============\\n`\n            });\n        }\n\n        if (options?.imgDataUrlToObjectUrl) {\n            console.log('Adding data-url-to-pseudo-object-url rule');\n            turnDownService.addRule('data-url-to-pseudo-object-url', {\n                filter: (node) => Boolean(node.tagName === 'IMG' && node.getAttribute('src')?.startsWith('data:')),\n                replacement: (_content, node) => {\n                    const element = node as any; // TurndownService types are incomplete\n                    const src = (element.getAttribute('src') || '').trim();\n                    const alt = cleanAttribute(element.getAttribute('alt')) || '';\n\n                    if (options.url) {\n                        const refUrl = new URL(options.url.toString());\n                        const mappedUrl = new URL(`blob:${refUrl.origin}/${CrawlerHost.md5Hasher.hash(src)}`);\n\n                        return `![${alt}](${mappedUrl})`;\n                    }\n\n                    return `![${alt}](blob:${CrawlerHost.md5Hasher.hash(src)})`;\n                }\n            });\n        }\n\n        turnDownService.addRule('improved-paragraph', {\n            filter: 'p',\n            replacement: (innerText) => {\n                const trimmed = innerText.trim();\n                if (!trimmed) {\n                    return '';\n                }\n\n                return `${trimmed.replace(/\\n{3,}/g, '\\n\\n')}\\n\\n`;\n            }\n        });\n        turnDownService.addRule('improved-inline-link', {\n            filter: function (node, options) {\n                return Boolean(\n                    options.linkStyle === 'inlined' &&\n                    node.nodeName === 'A' &&\n                    node.getAttribute('href')\n                );\n            },\n\n            replacement: function (content, node) {\n                const element = node as any; // TurndownService types are incomplete\n                let href = element.getAttribute('href');\n                if (href) href = href.replace(/([()])/g, '\\\\$1');\n                let title = cleanAttribute(element.getAttribute('title'));\n                if (title) title = ' \"' + title.replace(/\"/g, '\\\\\"') + '\"';\n\n                const fixedContent = content.replace(/\\s+/g, ' ').trim();\n                let fixedHref = href.replace(/\\s+/g, '').trim();\n                if (options?.url) {\n                    try {\n                        fixedHref = new URL(fixedHref, options.url).toString();\n                    } catch (_err) {\n                        void 0;\n                    }\n                }\n\n                return `[${fixedContent}](${fixedHref}${title || ''})`;\n            }\n        });\n        turnDownService.addRule('improved-code', {\n            filter: function (node) {\n                const element = node as any; // TurndownService types are incomplete\n                let hasSiblings = element.previousSibling || element.nextSibling;\n                let isCodeBlock = element.parentNode?.nodeName === 'PRE' && !hasSiblings;\n\n                return node.nodeName === 'CODE' && !isCodeBlock;\n            },\n\n            replacement: function (inputContent: string | null) {\n                if (!inputContent) return '';\n                let content = inputContent;\n\n                let delimiter = '`';\n                const matches: string[] = content.match(/`+/gm) || [];\n                while (matches.indexOf(delimiter) !== -1) delimiter = delimiter + '`';\n                if (content.includes('\\n')) {\n                    delimiter = '```';\n                }\n\n                let extraSpace = delimiter === '```' ? '\\n' : /^`|^ .*?[^ ].* $|`$/.test(content) ? ' ' : '';\n\n                return delimiter + extraSpace + content + (delimiter === '```' && !content.endsWith(extraSpace) ? extraSpace : '') + delimiter;\n            }\n        });\n\n        console.log('Turndown service configured');\n        return turnDownService;\n    }\n\n    getGeneralSnapshotMixins(snapshot: PageSnapshot) {\n        console.log('Getting general snapshot mixins');\n        let inferred: ExtendedSnapshot | undefined;\n        const mixin: { images?: { [key: string]: string }; links?: { [key: string]: string } } = {};\n\n        if (this.threadLocal.get('withImagesSummary')) {\n            console.log('Generating image summary');\n            inferred ??= this.jsdomControl.inferSnapshot(snapshot);\n            const imageSummary = {} as { [k: string]: string; };\n            const imageIdxTrack = new Map<string, number[]>();\n\n            let imgIdx = 0;\n\n            for (const img of (inferred.imgs || [])) {\n                const imgSerial = ++imgIdx;\n                const idxArr = imageIdxTrack.has(img.src) ? imageIdxTrack.get(img.src)! : [];\n                idxArr.push(imgSerial);\n                imageIdxTrack.set(img.src, idxArr);\n                imageSummary[img.src] = img.alt || '';\n            }\n\n            mixin.images =\n                _(imageSummary)\n                    .toPairs()\n                    .map(\n                        ([url, alt], i) => {\n                            return [`Image ${(imageIdxTrack?.get(url) || [i + 1]).join(',')}${alt ? `: ${alt}` : ''}`, url];\n                        }\n                    ).fromPairs()\n                    .value();\n            console.log(`Generated image summary with ${Object.keys(mixin.images || {}).length} images`);\n        }\n        if (this.threadLocal.get('withLinksSummary')) {\n            console.log('Generating link summary');\n            inferred ??= this.jsdomControl.inferSnapshot(snapshot);\n            mixin.links = _.invert(inferred.links || {});\n            console.log(`Generated link summary with ${Object.keys(mixin.links || {}).length} links`);\n        }\n\n        return mixin;\n    }\n\n    async formatSnapshot(mode: string | 'markdown' | 'html' | 'text' | 'screenshot' | 'pageshot', snapshot: PageSnapshot & {\n        screenshotUrl?: string;\n        pageshotUrl?: string;\n    }, nominalUrl?: URL): Promise<FormattedPage> {\n        console.log('Formatting snapshot', { mode, url: nominalUrl?.toString() });\n\n        if (mode === 'screenshot') {\n            if (snapshot.screenshot && !snapshot.screenshotUrl) {\n                console.log('Saving screenshot');\n                const fileName = `screenshot-${randomUUID()}.png`;\n                await this.saveFileLocally(fileName, snapshot.screenshot);\n                snapshot.screenshotUrl = `/instant-screenshots/${fileName}`;\n                console.log('Screenshot saved and URL generated', { screenshotUrl: snapshot.screenshotUrl });\n            }\n\n            return {\n                ...this.getGeneralSnapshotMixins(snapshot),\n                screenshotUrl: snapshot.screenshotUrl,\n                toString() {\n                    return this.screenshotUrl!;\n                }\n            } as FormattedPage;\n        }\n\n        if (mode === 'pageshot') {\n            if (snapshot.pageshot && !snapshot.pageshotUrl) {\n                console.log('Saving pageshot');\n                const fileName = `pageshot-${randomUUID()}.png`;\n                await this.saveFileLocally(fileName, snapshot.pageshot);\n                snapshot.pageshotUrl = `/instant-screenshots/${fileName}`;\n                console.log('Pageshot saved and URL generated', { pageshotUrl: snapshot.pageshotUrl });\n            }\n\n            return {\n                ...this.getGeneralSnapshotMixins(snapshot),\n                html: snapshot.html,\n                pageshotUrl: snapshot.pageshotUrl,\n                toString() {\n                    return this.pageshotUrl!;\n                }\n            } as FormattedPage;\n        }\n\n        if (mode === 'html') {\n            console.log('Formatting as HTML');\n            return {\n                ...this.getGeneralSnapshotMixins(snapshot),\n                html: snapshot.html,\n                toString() {\n                    return this.html!;\n                }\n            } as FormattedPage;\n        }\n\n        if (mode === 'text') {\n            console.log('Formatting as text');\n            return {\n                ...this.getGeneralSnapshotMixins(snapshot),\n                text: snapshot.text,\n                toString() {\n                    return this.text!;\n                }\n            } as FormattedPage;\n        }\n\n        const imgDataUrlToObjectUrl = !Boolean(this.threadLocal.get('keepImgDataUrl'));\n        let contentText = '';\n        const imageSummary = {} as { [k: string]: string; };\n        const imageIdxTrack = new Map<string, number[]>();\n\n        // Process content\n        const isPdfMode = snapshot.pdfs && snapshot.pdfs.length > 0 && this.config.pdf?.enable_parsing;\n        if (isPdfMode) {\n            console.log('PDF mode detected and PDF processing is enabled');\n            contentText = snapshot.parsed?.content || snapshot.text;\n        } else if (snapshot.pdfs && snapshot.pdfs.length > 0 && !this.config.pdf?.enable_parsing) {\n            console.log('PDF mode detected but PDF processing is disabled in config, skipping PDF content');\n            contentText = snapshot.text;\n        } else if (\n            (snapshot.maxElemDepth && snapshot.maxElemDepth > 256) ||\n            (snapshot.elemCount && snapshot.elemCount > 70_000)\n        ) {\n            console.log('Degrading to text to protect the server');\n            this.logger.warn('Degrading to text to protect the server', { url: snapshot.href });\n            contentText = snapshot.text;\n        } else {\n            console.log('Processing HTML content');\n            const jsDomElementOfHTML = this.jsdomControl.snippetToElement(snapshot.html, snapshot.href);\n            let toBeTurnedToMd = jsDomElementOfHTML;\n            let turnDownService = this.getTurndown({ url: snapshot.rebase || nominalUrl, imgDataUrlToObjectUrl });\n\n            if (mode !== 'markdown' && snapshot.parsed?.content) {\n                console.log('Processing parsed content for non-markdown mode');\n                const jsDomElementOfParsed = this.jsdomControl.snippetToElement(snapshot.parsed.content, snapshot.href);\n                const par1 = this.jsdomControl.runTurndown(turnDownService, jsDomElementOfHTML);\n                const par2 = this.jsdomControl.runTurndown(turnDownService, jsDomElementOfParsed);\n\n                if (par2.length >= 0.3 * par1.length) {\n                    console.log('Readability seems to have done its job, adjusting turnDownService');\n                    turnDownService = this.getTurndown({ noRules: true, url: snapshot.rebase || nominalUrl, imgDataUrlToObjectUrl });\n                    toBeTurnedToMd = jsDomElementOfParsed;\n                } else {\n                    console.log('Readability output not sufficient, using original HTML');\n                }\n            }\n\n            for (const plugin of this.turnDownPlugins) {\n                turnDownService.use(plugin);\n            }\n\n            const urlToAltMap: { [k: string]: string | undefined; } = {};\n            if (snapshot.imgs?.length && this.threadLocal.get('withGeneratedAlt')) {\n                const tasks = _.uniqBy(snapshot.imgs, 'src').map(async (x) => {\n                    const r = \"ALT TEXT!!!\"; // Placeholder for actual alt text generation\n                    if (r && x.src) {\n                        urlToAltMap[x.src.trim()] = r;\n                    }\n                });\n                await Promise.all(tasks);\n\n                let imgIdx = 0;\n                turnDownService.addRule('img-generated-alt', {\n                    filter: 'img',\n                    replacement: (_content, node) => {\n                        const element = node as any; // TurndownService types are incomplete\n                        let linkPreferredSrc = (element.getAttribute('src') || '').trim();\n                        if (!linkPreferredSrc || linkPreferredSrc.startsWith('data:')) {\n                            const dataSrc = (element.getAttribute('data-src') || '').trim();\n                            if (dataSrc && !dataSrc.startsWith('data:')) {\n                                linkPreferredSrc = dataSrc;\n                            }\n                        }\n\n                        let src: string | undefined;\n                        try {\n                            src = new URL(linkPreferredSrc, snapshot.rebase || nominalUrl).toString();\n                        } catch (_err) {\n                            void 0;\n                        }\n                        const alt = cleanAttribute(element.getAttribute('alt'));\n                        if (!src) {\n                            return '';\n                        }\n                        const mapped = urlToAltMap[src];\n                        const imgSerial = ++imgIdx;\n                        const idxArr = imageIdxTrack.has(src) ? imageIdxTrack.get(src)! : [];\n                        idxArr.push(imgSerial);\n                        imageIdxTrack.set(src, idxArr);\n\n                        imageSummary[src] = mapped || alt;\n\n                        const effectiveAlt = `Image ${imgIdx}: ${mapped || alt}`;\n\n                        if (imgDataUrlToObjectUrl) {\n                            const mappedUrl = `blob:${nominalUrl?.origin || ''}/${CrawlerHost.md5Hasher.hash(src)}`;\n                            return `![${effectiveAlt}](${mappedUrl})`;\n                        }\n\n                        return `![${effectiveAlt}](${src})`;\n                    }\n                });\n            }\n\n            if (toBeTurnedToMd) {\n                try {\n                    contentText = this.jsdomControl.runTurndown(turnDownService, toBeTurnedToMd).trim();\n                } catch (err) {\n                    this.logger.warn(`Turndown failed to run, retrying without plugins`, { err });\n                    const vanillaTurnDownService = this.getTurndown({ url: snapshot.rebase || nominalUrl, imgDataUrlToObjectUrl });\n                    try {\n                        contentText = this.jsdomControl.runTurndown(vanillaTurnDownService, toBeTurnedToMd).trim();\n                    } catch (err2) {\n                        this.logger.warn(`Turndown failed to run, giving up`, { err: err2 });\n                    }\n                }\n            }\n\n            if ((!contentText || (contentText.startsWith('<') && contentText.endsWith('>'))) && toBeTurnedToMd !== jsDomElementOfHTML) {\n                try {\n                    contentText = this.jsdomControl.runTurndown(turnDownService, jsDomElementOfHTML);\n                } catch (err) {\n                    this.logger.warn(`Turndown failed to run on fallback, retrying without plugins`, { err });\n                    const vanillaTurnDownService = this.getTurndown({ url: snapshot.rebase || nominalUrl, imgDataUrlToObjectUrl });\n                    try {\n                        contentText = this.jsdomControl.runTurndown(vanillaTurnDownService, jsDomElementOfHTML);\n                    } catch (err2) {\n                        this.logger.warn(`Turndown fallback failed, giving up`, { err: err2 });\n                    }\n                }\n            }\n\n            if (!contentText || (contentText.startsWith('<') && contentText.endsWith('>'))) {\n                contentText = snapshot.text;\n            }\n        }\n\n        const cleanText = (contentText || '').trim();\n\n        const formatted: FormattedPage = {\n            title: (snapshot.parsed?.title || snapshot.title || '').trim(),\n            url: nominalUrl?.toString() || snapshot.href?.trim(),\n            content: cleanText,\n            publishedTime: snapshot.parsed?.publishedTime || undefined,\n\n            toString(): string {\n                if (mode === 'markdown') {\n                    return this.content as string;\n                }\n\n                const mixins: string[] = [];\n                if (this.publishedTime) {\n                    mixins.push(`Published Time: ${this.publishedTime}`);\n                }\n                const suffixMixins: string[] = [];\n                if (this.images) {\n                    const imageSummaryChunks: string[] = ['Images:'];\n                    for (const [k, v] of Object.entries(this.images)) {\n                        imageSummaryChunks.push(`- ![${k}](${v})`);\n                    }\n                    if (imageSummaryChunks.length === 1) {\n                        imageSummaryChunks.push('This page does not seem to contain any images.');\n                    }\n                    suffixMixins.push(imageSummaryChunks.join('\\n'));\n                }\n                // Always include the Links/Buttons section\n                const linkSummaryChunks = ['Links/Buttons:'];\n                if (this.links) {\n                    for (const [k, v] of Object.entries(this.links)) {\n                        linkSummaryChunks.push(`- [${k}](${v})`);\n                    }\n                }\n                if (linkSummaryChunks.length === 1) {\n                    linkSummaryChunks.push('This page does not seem to contain any buttons/links.');\n                }\n                suffixMixins.push(linkSummaryChunks.join('\\n'));\n\n                return `Title: ${this.title}\n\n    URL Source: ${this.url}\n    ${mixins.length ? `\\n${mixins.join('\\n\\n')}\\n` : ''}\n    Markdown Content:\n    ${this.content}\n    ${suffixMixins.length ? `\\n${suffixMixins.join('\\n\\n')}\\n` : ''}`;\n            }\n        };\n\n        if (this.threadLocal.get('withImagesSummary')) {\n            formatted.images =\n                _(imageSummary)\n                    .toPairs()\n                    .map(\n                        ([url, alt], i) => {\n                            return [`Image ${(imageIdxTrack?.get(url) || [i + 1]).join(',')}${alt ? `: ${alt}` : ''}`, url];\n                        }\n                    ).fromPairs()\n                    .value();\n        }\n\n        // Always include links and images for JSON responses or when explicitly requested\n        const acceptHeader = this.threadLocal.get('accept') || '';\n        const returnFormat = this.threadLocal.get('x-return-format');\n        const wantsJson = acceptHeader.includes('application/json') || returnFormat === 'json' || this.threadLocal.get('withLinksSummary');\n\n        if (wantsJson) {\n            formatted.links = this.jsdomControl.inferSnapshot(snapshot).links || {};\n            // Always include images for JSON responses\n            if (!formatted.images) {\n                formatted.images = _(imageSummary)\n                    .toPairs()\n                    .map(([url, alt], i) => {\n                        return [`Image ${(imageIdxTrack?.get(url) || [i + 1]).join(',')}${alt ? `: ${alt}` : ''}`, url];\n                    })\n                    .fromPairs()\n                    .value();\n            }\n            // For JSON responses, use plain text instead of markdown to avoid HTML tags\n            formatted.content = snapshot.text || cleanText;\n        }\n\n        return formatted;\n    }\n\n    private isValidTLD(hostname: string): boolean {\n        const parts = hostname.split('.');\n        return parts.length > 1 && parts[parts.length - 1].length >= 2;\n    }\n\n    private serveScreenshot(screenshotPath: string, res: Response) {\n        const relativePath = screenshotPath.replace(/^instant-screenshots\\//, '');\n        const fullPath = path.join('/app', 'local-storage', 'instant-screenshots', relativePath);\n        console.log(`Attempting to serve screenshot from: ${fullPath}`);\n        if (fs.existsSync(fullPath)) {\n            return res.sendFile(fullPath);\n        } else {\n            console.log(`Screenshot not found: ${fullPath}`);\n            return sendResponse(res, 'Screenshot not found', { contentType: 'text/plain', code: 404 });\n        }\n    }\n\n    private sendFormattedResponse(res: Response, formatted: FormattedPage, respondWith: string, snapshot?: PageSnapshot): any {\n        const acceptHeader = this.threadLocal.get('accept') || '';\n        const returnFormat = this.threadLocal.get('x-return-format') || '';\n        const wantsJson = acceptHeader.includes('application/json') || returnFormat === 'json';\n\n        if (respondWith === 'screenshot' && formatted.screenshotUrl) {\n            return sendResponse(res, '', { code: 302, headers: { Location: formatted.screenshotUrl } });\n        }\n        if (respondWith === 'pageshot' && formatted.pageshotUrl) {\n            return sendResponse(res, '', { code: 302, headers: { Location: formatted.pageshotUrl } });\n        }\n\n        if (wantsJson) {\n            const lang = snapshot?.parsed?.lang || 'en';\n            const description = snapshot?.parsed?.excerpt || formatted.title;\n            const siteName = snapshot?.parsed?.siteName || '';\n            const byline = snapshot?.parsed?.byline || '';\n\n            const jsonResponse = {\n                code: 200,\n                status: 20000,\n                data: {\n                    title: formatted.title,\n                    description: description,\n                    url: formatted.url,\n                    content: formatted.content,\n                    links: formatted.links || {},\n                    images: formatted.images || {},\n                    metadata: {\n                        lang: lang,\n                        description: description,\n                        'og:title': formatted.title,\n                        'og:description': description,\n                        'og:type': 'website',\n                        'og:url': formatted.url,\n                        'og:site_name': siteName,\n                        'article:author': byline,\n                        'article:published_time': formatted.publishedTime || '',\n                        viewport: 'width=device-width, initial-scale=1.0'\n                    },\n                    usage: {\n                        tokens: Math.ceil((formatted.content?.length || 0) / 4)\n                    }\n                },\n                meta: {\n                    usage: {\n                        tokens: Math.ceil((formatted.content?.length || 0) / 4)\n                    }\n                }\n            };\n\n            return sendResponse(res, jsonResponse, { contentType: 'application/json' });\n        }\n\n        // Fallback to plain/text representation\n        let responseText: string;\n        if (formatted && typeof formatted.toString === 'function') {\n            responseText = formatted.toString();\n        } else {\n            responseText = String(formatted);\n        }\n\n        return sendResponse(res, responseText, { contentType: 'text/plain' });\n    }\n\n    getUrlDigest(urlToCrawl: URL): string {\n    const normalizedURL = safeNormalizeUrl(urlToCrawl);\n        if (!normalizedURL.hash.startsWith('#/')) {\n            normalizedURL.hash = '';\n        }\n        return CrawlerHost.md5Hasher.hash(normalizedURL.toString());\n    }\n\n    async *scrap(urlToCrawl: URL, crawlOpts?: ExtraScrappingOptions, crawlerOpts?: CrawlerOptions): AsyncGenerator<PageSnapshot | undefined> {\n        this.logger.info(`Starting scrap for URL: ${urlToCrawl.toString()}`);\n        console.log('Starting scrap for URL:', urlToCrawl.toString(), { crawlOpts, crawlerOpts });\n\n        if (crawlerOpts?.html) {\n            console.log('Using provided HTML');\n            const fakeSnapshot = {\n                href: urlToCrawl.toString(),\n                html: crawlerOpts.html,\n                title: '',\n                text: '',\n            } as PageSnapshot;\n            yield this.jsdomControl.narrowSnapshot(fakeSnapshot, crawlOpts);\n            return;\n        }\n\n        const scrapIterator = this.puppeteerControl.scrape(urlToCrawl, crawlOpts);\n\n        if (crawlOpts?.targetSelector || crawlOpts?.removeSelector || crawlOpts?.withIframe) {\n            console.log('Using custom selectors or iframe narrowing');\n            for await (const x of scrapIterator) {\n                if (x) {\n                    yield this.jsdomControl.narrowSnapshot(x, crawlOpts);\n                }\n            }\n        } else {\n            console.log('Using default scraping method');\n            yield* scrapIterator;\n        }\n    }\n\n    async *scrapMany(urls: URL[], options?: ExtraScrappingOptions, crawlerOpts?: CrawlerOptions): AsyncGenerator<(PageSnapshot | undefined)[]> {\n        const iterators = urls.map((url) => this.scrap(url, options, crawlerOpts));\n        const results: (PageSnapshot | undefined)[] = Array(iterators.length).fill(undefined);\n        let concluded = false;\n        let nextDeferred = Defer<void>();\n\n        const handler = async (it: AsyncGenerator<PageSnapshot | undefined>, idx: number) => {\n            try {\n                for await (const x of it) {\n                    results[idx] = x;\n                    if (x) {\n                        nextDeferred.resolve();\n                        nextDeferred = Defer();\n                    }\n                }\n            } catch (err: unknown) {\n                this.logger.warn(`Failed to scrap ${urls[idx]}`, { err: marshalErrorLike(err as Error) });\n            }\n        };\n\n        Promise.all(iterators.map(handler)).finally(() => {\n            concluded = true;\n            nextDeferred.resolve();\n        });\n\n        yield results;\n\n        try {\n            while (!concluded) {\n                await nextDeferred.promise;\n                yield results;\n            }\n        } finally {\n            for (const x of iterators) {\n                x.return(undefined);\n            }\n        }\n    }\n\n    configure(opts: CrawlerOptions, req: Request, urlToCrawl: URL): ExtraScrappingOptions {\n        this.threadLocal.set('withGeneratedAlt', opts.withGeneratedAlt);\n        this.threadLocal.set('withLinksSummary', opts.withLinksSummary);\n        this.threadLocal.set('withImagesSummary', opts.withImagesSummary);\n        this.threadLocal.set('keepImgDataUrl', opts.keepImgDataUrl);\n        this.threadLocal.set('cacheTolerance', opts.cacheTolerance);\n        this.threadLocal.set('userAgent', opts.userAgent);\n        this.threadLocal.set('host', req.headers.host || '127.0.0.1:1337');\n        if (opts.timeout) {\n            this.threadLocal.set('timeout', opts.timeout * 1000);\n        }\n\n        const cookieHeader = req.headers['x-set-cookie'];\n        const cookies: CookieData[] = cookieHeader ?\n            (Array.isArray(cookieHeader) ? cookieHeader : [cookieHeader])\n                .map(cookie => {\n                    const [name, ...valueParts] = cookie.split('=');\n                    const value = valueParts.join('=');\n                    return { name, value, url: urlToCrawl.toString() };\n                })\n            : [];\n\n        const cookiesForLog = cookies.map(({ name, url }) => ({ name, url }));\n        console.log('Cookies:', cookiesForLog);\n        return {\n            proxyUrl: opts.proxyUrl,\n            cookies: cookies,\n            favorScreenshot: ['screenshot', 'pageshot'].includes(opts.respondWith),\n            removeSelector: opts.removeSelector,\n            targetSelector: opts.targetSelector,\n            waitForSelector: opts.waitForSelector,\n            overrideUserAgent: opts.userAgent,\n            timeoutMs: opts.timeout ? opts.timeout * 1000 : undefined,\n            withIframe: opts.withIframe,\n            viewportWidth: opts.viewportWidth || undefined,\n            viewportHeight: opts.viewportHeight || undefined,\n            fullPage: opts.fullPage || false,\n            pdfAction: opts.pdfAction,\n        };\n    }\n\n    async simpleCrawl(mode: string, url: URL, opts?: ExtraScrappingOptions): Promise<FormattedPage> {\n        const it = this.scrap(url, { ...opts, minIntervalMs: 500 });\n\n        let lastSnapshot: PageSnapshot | undefined;\n        let goodEnough = false;\n        try {\n            for await (const x of it) {\n                lastSnapshot = x;\n                if (goodEnough) {\n                    break;\n                }\n                if (lastSnapshot?.parsed?.content) {\n                    goodEnough = true;\n                }\n            }\n        } catch (err) {\n            if (lastSnapshot) {\n                return this.formatSnapshot(mode, lastSnapshot, url);\n            }\n            throw err;\n        }\n\n        if (!lastSnapshot) {\n            throw new AssertionFailureError(`No content available`);\n        }\n\n        return this.formatSnapshot(mode, lastSnapshot, url);\n    }\n\n    async saveFileLocally(fileName: string, content: Buffer): Promise<string> {\n        const localDir = path.join('/app', 'local-storage', 'instant-screenshots');\n        console.log(`Attempting to save file in directory: ${localDir}`);\n        try {\n            if (!fs.existsSync(localDir)) {\n                console.log(`Directory ${localDir} does not exist. Creating it.`);\n                fs.mkdirSync(localDir, { recursive: true });\n            }\n            const filePath = path.join(localDir, fileName);\n            console.log(`Writing file to: ${filePath}`);\n            await fs.promises.writeFile(filePath, new Uint8Array(content));\n            return `/instant-screenshots/${fileName}`;\n        } catch (error) {\n            console.error(`Error saving file locally: ${error}`);\n            throw error;\n        }\n    }\n\n    /**\n     * Parses the incoming request URL and determines the target URL to crawl\n     */\n    private parseRequestUrl(req: Request): { url: string; forceJson: boolean } {\n        let noSlashURL = req.url.slice(1);\n        let forceJsonResponse = false;\n\n        // Handle JSON endpoint: /json/https://example.com\n        if (noSlashURL.startsWith('json/')) {\n            forceJsonResponse = true;\n            noSlashURL = noSlashURL.slice(5); // Remove 'json/' prefix\n            console.log('JSON endpoint detected, forcing JSON response for URL:', noSlashURL);\n        }\n\n        return { url: noSlashURL, forceJson: forceJsonResponse };\n    }\n\n    /**\n     * Handles special routes (favicon, root path, screenshots)\n     * Returns the response if handled, null if should continue with normal flow\n     */\n    private async handleSpecialRoutes(req: Request, res: Response, url: string): Promise<boolean> {\n        // Handle favicon.ico request early\n        if (url === 'favicon.ico') {\n            console.log('Favicon request detected');\n            sendResponse(res, 'Favicon not available', { contentType: 'text/plain', code: 404 });\n            return true;\n        }\n\n        // Handle root path - return index\n        if (!url || url === '/') {\n            console.log('Root path requested, returning index');\n            await this.serveIndexPage(req, res);\n            return true;\n        }\n\n        // Check if the request is for a local screenshot\n        if (url.startsWith('instant-screenshots/')) {\n            this.serveScreenshot(url, res);\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Serves the index page with HTML styling\n     */\n    private async serveIndexPage(req: Request, res: Response): Promise<void> {\n        const indexPage = this.getIndex(req);\n        const markdownContent = indexPage.toString();\n        const htmlContent = this.markdownToHtml(markdownContent);\n\n        const fullHtmlPage = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${indexPage.title}</title>\n    <style>\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n            line-height: 1.6;\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #f5f5f5;\n        }\n        .container {\n            background: white;\n            padding: 40px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n        h1 { color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }\n        h2 { color: #34495e; margin-top: 30px; }\n        h3 { color: #7f8c8d; }\n        code {\n            background: #f8f9fa;\n            padding: 2px 6px;\n            border-radius: 4px;\n            font-family: 'SF Mono', Monaco, 'Consolas', monospace;\n        }\n        pre {\n            background: #2d3748;\n            color: #e2e8f0;\n            padding: 20px;\n            border-radius: 8px;\n            overflow-x: auto;\n            margin: 15px 0;\n        }\n        pre code {\n            background: none;\n            padding: 0;\n            color: inherit;\n        }\n        a {\n            color: #3498db;\n            text-decoration: none;\n            font-weight: 500;\n        }\n        a:hover {\n            color: #2980b9;\n            text-decoration: underline;\n        }\n        .example-links {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 15px;\n            margin: 20px 0;\n        }\n        .example-links a {\n            display: block;\n            padding: 12px;\n            background: #ecf0f1;\n            border-radius: 6px;\n            border-left: 4px solid #3498db;\n            transition: all 0.3s ease;\n        }\n        .example-links a:hover {\n            background: #d5dbdb;\n            transform: translateX(5px);\n        }\n        .emoji { font-size: 1.2em; }\n        hr { border: none; border-top: 1px solid #bdc3c7; margin: 30px 0; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        ${htmlContent}\n    </div>\n</body>\n</html>`;\n\n        sendResponse(res, fullHtmlPage, { contentType: 'text/html' });\n    }\n\n    /**\n     * Sets up thread-local context for the request\n     */\n    private setupRequestContext(req: Request, forceJson: boolean): void {\n        // Store request headers for formatSnapshot to use\n        this.threadLocal.set('accept', req.headers.accept || '');\n        this.threadLocal.set('x-return-format', req.headers['x-return-format'] || '');\n\n        // Force JSON response if using /json/ endpoint\n        if (forceJson) {\n            this.threadLocal.set('accept', 'application/json');\n            this.threadLocal.set('x-return-format', 'json');\n        }\n    }\n\n    /**\n     * Extracts the target URL from request (POST body, query params, or path)\n     */\n    private extractTargetUrl(req: Request, pathUrl: string): string {\n        // Prefer explicit URL in POST JSON body, then query param, then path\n        if (req.method === 'POST' && req.body && typeof req.body.url === 'string' && req.body.url.trim()) {\n            return req.body.url.trim();\n        }\n\n        if (req.query && (req.query.url || req.query.u)) {\n            const q = (req.query.url || req.query.u) as string | string[] | undefined;\n            return Array.isArray(q) ? q[0] : String(q || '');\n        }\n\n        return pathUrl;\n    }\n\n    /**\n     * Validates and parses the target URL\n     */\n    private parseAndValidateUrl(urlToCrawl: string, req: Request): URL {\n        const requestWithGet = req as Request & { get?: (header: string) => string | undefined };\n        const requestHeaders = req.headers as RequestHeaders;\n\n        const protoFromGet = (typeof requestWithGet.get === 'function') ? requestWithGet.get('x-forwarded-proto') : undefined;\n        const headerProto = requestHeaders['x-forwarded-proto'] || requestHeaders['X-Forwarded-Proto'];\n        const protocol = protoFromGet || headerProto || 'http';\n\n        const hostFromGet = (typeof requestWithGet.get === 'function') ? requestWithGet.get('host') : undefined;\n        const headerHost = requestHeaders.host || requestHeaders.Host;\n        const host = hostFromGet || headerHost || 'localhost:3000';\n\n        const requestBase = `${protocol}://${host}`;\n\n        const parsedUrl = safeNormalizeUrl(urlToCrawl, requestBase);\n\n        if (!['http:', 'https:'].includes(parsedUrl.protocol)) {\n            throw new Error('Invalid protocol');\n        }\n\n        // Check TLD validation (can be disabled for development)\n        const allowAllTlds = this.config.domain?.allow_all_tlds || false;\n        if (!allowAllTlds && !this.isValidTLD(parsedUrl.hostname)) {\n            throw new Error('Invalid TLD');\n        }\n\n        return parsedUrl;\n    }\n\n    /**\n     * Checks robots.txt compliance for the given URL\n     */\n    private async checkRobotsCompliance(parsedUrl: URL): Promise<boolean> {\n        const respectRobots = this.config.robots?.respect_robots_txt !== false;\n        if (!respectRobots) {\n            return true;\n        }\n\n        console.log('Checking robots.txt compliance for:', parsedUrl.toString());\n\n        try {\n            const robotsCheckerWithMethods = this.robotsChecker as {\n                isAllowed?: (url: string, userAgent: string) => Promise<boolean>;\n                getCrawlDelay?: (url: string, userAgent: string) => Promise<number | null>;\n            };\n            const hasIsAllowed = robotsCheckerWithMethods && typeof robotsCheckerWithMethods.isAllowed === 'function';\n            const hasGetCrawlDelay = robotsCheckerWithMethods && typeof robotsCheckerWithMethods.getCrawlDelay === 'function';\n\n            if (hasIsAllowed && robotsCheckerWithMethods.isAllowed) {\n                const isAllowed = await robotsCheckerWithMethods.isAllowed(parsedUrl.toString(), 'DearReader-Bot');\n                if (!isAllowed) {\n                    console.log('URL blocked by robots.txt:', parsedUrl.toString());\n                    return false;\n                }\n            } else {\n                console.log('robotsChecker.isAllowed not available; skipping robots.txt allow check');\n            }\n\n            // Check for crawl delay if supported\n            if (hasGetCrawlDelay && robotsCheckerWithMethods.getCrawlDelay) {\n                const crawlDelay = await robotsCheckerWithMethods.getCrawlDelay(parsedUrl.toString(), 'DearReader-Bot');\n                if (crawlDelay && crawlDelay > 0) {\n                    console.log(`Applying crawl delay of ${crawlDelay}s for:`, parsedUrl.toString());\n                    // In production, you might want to implement a proper rate limiting mechanism\n                }\n            } else {\n                console.log('robotsChecker.getCrawlDelay not available; skipping crawl-delay handling');\n            }\n\n            return true;\n        } catch (robotsError) {\n            console.log('Error checking robots.txt, proceeding:', robotsError);\n            // Continue if robots.txt check fails (be permissive)\n            return true;\n        }\n    }\n\n    /**\n     * Performs the actual scraping operation\n     */\n    private async performScraping(\n        parsedUrl: URL,\n        crawlerOptions: CrawlerOptions,\n        req: Request\n    ): Promise<{ snapshot: PageSnapshot; formatted: FormattedPage } | null> {\n        const crawlOpts = this.configure(crawlerOptions, req, parsedUrl);\n        console.log('Configured crawl options:', crawlOpts);\n\n        let lastScrapped: PageSnapshot | undefined;\n        const scrapIterator = this.scrap(parsedUrl, crawlOpts, crawlerOptions);\n\n        for await (const scrapped of scrapIterator) {\n            lastScrapped = scrapped;\n            if (crawlerOptions.waitForSelector || ((!scrapped?.parsed?.content || !scrapped.title?.trim()) && !scrapped?.pdfs?.length)) {\n                continue;\n            }\n\n            if (crawlerOptions.timeout === undefined) {\n                const formatted = await this.formatSnapshot(crawlerOptions.respondWith, scrapped, parsedUrl);\n                return { snapshot: scrapped, formatted };\n            }\n        }\n\n        if (!lastScrapped) {\n            return null;\n        }\n\n        const formatted = await this.formatSnapshot(crawlerOptions.respondWith, lastScrapped, parsedUrl);\n        return { snapshot: lastScrapped, formatted };\n    }\n\n    /**\n     * Handles scraping errors with appropriate error responses\n     */\n    private async handleScrapingError(\n        error: unknown,\n        parsedUrl: URL,\n        crawlerOptions: CrawlerOptions\n    ): Promise<{ snapshot: PageSnapshot; formatted: FormattedPage } | null> {\n        console.error('Error during scraping:', error);\n\n        if (error instanceof AssertionFailureError &&\n            (error.message.includes('Invalid TLD') || error.message.includes('ERR_NAME_NOT_RESOLVED'))) {\n            const errorSnapshot: PageSnapshot = {\n                title: 'Error: Invalid domain or TLD',\n                href: parsedUrl.toString(),\n                html: '',\n                text: `Failed to access the page due to an invalid domain or TLD: ${parsedUrl.toString()}`,\n                error: 'Invalid domain or TLD'\n            };\n            const formatted = await this.formatSnapshot(crawlerOptions.respondWith, errorSnapshot, parsedUrl);\n            return { snapshot: errorSnapshot, formatted };\n        }\n\n        throw error;\n    }\n\n    async crawl(req: Request, res: Response) {\n        this.logger.info(`Crawl request received for URL: ${req.url}`);\n        console.log('Crawl method called with request:', req.url);\n\n        try {\n            // Parse request URL\n            const { url: noSlashURL, forceJson: forceJsonResponse } = this.parseRequestUrl(req);\n\n            // Handle special routes\n            if (await this.handleSpecialRoutes(req, res, noSlashURL)) {\n                return;\n            }\n\n            // Setup request context\n            this.setupRequestContext(req, forceJsonResponse);\n\n            // Parse crawler options\n            const crawlerOptions = req.method === 'POST' ?\n                CrawlerOptions.from(req.body, req) :\n                CrawlerOptions.from(req.query, req);\n            console.log('Crawler options:', crawlerOptions);\n\n            // Extract and validate target URL\n            const urlToCrawl = this.extractTargetUrl(req, noSlashURL);\n            let parsedUrl: URL;\n\n            try {\n                parsedUrl = this.parseAndValidateUrl(urlToCrawl, req);\n            } catch (error) {\n                console.log('Invalid URL:', urlToCrawl, error);\n                return sendResponse(res, 'Invalid URL or TLD', { contentType: 'text/plain', code: 400 });\n            }\n\n            // Check robots.txt compliance\n            const robotsAllowed = await this.checkRobotsCompliance(parsedUrl);\n            if (!robotsAllowed) {\n                return sendResponse(res, 'Access denied by robots.txt', { contentType: 'text/plain', code: 403 });\n            }\n\n            // Add to circuit breaker\n            this.puppeteerControl.circuitBreakerHosts.add(req.hostname.toLowerCase());\n            console.log('Added to circuit breaker hosts:', req.hostname.toLowerCase());\n\n            // Perform scraping\n            let result: { snapshot: PageSnapshot; formatted: FormattedPage } | null = null;\n\n            try {\n                result = await this.performScraping(parsedUrl, crawlerOptions, req);\n            } catch (scrapError: unknown) {\n                result = await this.handleScrapingError(scrapError, parsedUrl, crawlerOptions);\n            }\n\n            if (!result) {\n                return sendResponse(res, 'No content available', { contentType: 'text/plain', code: 404 });\n            }\n\n            return this.sendFormattedResponse(res, result.formatted, crawlerOptions.respondWith, result.snapshot);\n\n        } catch (error) {\n            console.error('Error in crawl method:', error);\n            return sendResponse(res, 'Internal server error', { contentType: 'text/plain', code: 500 });\n        }\n    }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,EACI;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAAuB;AAAA,OACpB;AACP,SAAS,iBAAiB;AAC1B,SAAqD,cAAc;AACnE,OAAO,OAAO;AAId,OAAO,qBAAqB;AAG5B,YAAY,uBAAuB;AAEnC,SAAS,sBAAsB;AAC/B,SAAS,kBAAkB;AAC3B,YAAY,UAAU;AAYtB,SAAS,sBAAsB;AAI/B,SAAS,sBAAsB;AAI/B,YAAY,QAAQ;AACpB,YAAY,UAAU;AAGtB,QAAQ,IAAI,0BAA0B;AAItC,SAAS,iBAAiB,OAAqB,MAA0B;AACrE,MAAI;AACA,QAAI,iBAAiB,IAAK,QAAO;AAEjC,QAAI,KAAM,QAAO,IAAI,IAAI,OAAO,IAAI;AAEpC,WAAO,IAAI,IAAI,KAAK;AAAA,EACxB,SAASA,IAAG;AAER,UAAM,cAAc,OAAO,OAAO,IAAI,IAAI;AAC1C,WAAO,IAAI,IAAI,MAAM,SAAS,GAAG,WAAW;AAAA,EAChD;AACJ;AASA,SAAS,aAAgB,KAAe,MAAS,MAAmC;AAChF,MAAI,KAAK,MAAM;AACX,QAAI,OAAO,KAAK,IAAI;AAAA,EACxB;AACA,MAAI,KAAK,aAAa;AAClB,QAAI,KAAK,KAAK,WAAW;AAAA,EAC7B;AACA,MAAI,KAAK,SAAS;AACd,eAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,KAAK,OAAO,GAAG;AACrD,UAAI,UAAU,QAAW;AACrB,YAAI,UAAU,KAAK,KAAK;AAAA,MAC5B;AAAA,IACJ;AAAA,EACJ;AACA,MAAI,KAAK,IAAI;AACb,SAAO;AACX;AA6BO,IAAM,cAAN,cAA0B,QAAQ;AAAA,EAYrC,YACW,kBACG,cAGA,cACA,eACA,uBACA,aACZ;AACE,UAAM,GAAG,SAAS;AATX;AACG;AAGA;AACA;AACA;AACA;AAlBd,kBAAS,IAAI,OAAO,aAAa;AACjC,2BAAkB,CAAC,kBAAkB,MAAM;AAE3C,4BAAmB,MAAO,OAAO,KAAK;AACtC,wBAAe,MAAO;AACtB,sBAAa,MAAO,OAAO;AAC3B,wBAAe,MAAO;AAEtB,SAAQ,SAA+B,CAAC;AAapC,YAAQ,IAAI,gCAAgC;AAC5C,SAAK,WAAW;AAChB,YAAQ,IAAI,+CAA+C;AAAA,MACvD,kBAAkB,CAAC,CAAC;AAAA,MACpB,cAAc,CAAC,CAAC;AAAA,MAChB,uBAAuB,CAAC,CAAC;AAAA,MACzB,aAAa,CAAC,CAAC;AAAA,MACf,cAAc,CAAC,CAAC;AAAA,MAChB,eAAe,CAAC,CAAC;AAAA,IACrB,CAAC;AAED,qBAAiB,GAAG,WAAW,OAAO,UAAwB,YAA8C;AACxG,cAAQ,IAAI,0BAA0B,EAAE,KAAK,QAAQ,IAAI,SAAS,EAAE,CAAC;AACrE,UAAI,CAAC,SAAS,OAAO,KAAK,KAAK,CAAC,SAAS,MAAM,QAAQ;AACnD,gBAAQ,IAAI,kDAAkD;AAC9D;AAAA,MACJ;AACA,UAAI,QAAQ,SAAS,QAAQ;AACzB,gBAAQ,IAAI,iCAAiC;AAE7C;AAAA,MACJ;AAAA,IACJ,CAAC;AAGD,QAAI,CAAC,iBAAiB,OAAO;AACzB,uBAAiB,QAAQ,eAAe,KAAU,SAAoE;AAClH,gBAAQ,IAAI,yCAAyC,EAAE,KAAK,IAAI,SAAS,GAAG,QAAQ,CAAC;AACrF,cAAM,WAAW,KAAK,OAAO,KAAK,OAAO;AACzC,yBAAiB,YAAY,UAAU;AACnC,cAAI,UAAU;AACV,mBAAO;AAAA,UACX;AAAA,QACJ;AACA,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,qBAAiB,GAAG,SAAS,OAAO,eAA0D;AAC1F,cAAQ,IAAI,wBAAwB,UAAU;AAC9C,WAAK,OAAO,KAAK,qBAAqB,WAAW,GAAG,cAAc,WAAW,IAAI,QAAQ,IAAI,EAAE,QAAQ,WAAW,QAAQ,IAAI,WAAW,GAAG,CAAC;AAE7I,YAAM,WAAW,IAAI,eAAe;AACpC,eAAS,SAAS,WAAW,IAAI,SAAS,YAAY;AACtD,eAAS,gBAAgB,GAAG,WAAW,MAAM;AAC7C,eAAS,aAAa,WAAW,IAAI,SAAS;AAC9C,eAAS,YAAY,oBAAI,KAAK;AAC9B,eAAS,WAAW,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,YAAY;AAC3D,YAAM,SAAS,KAAK,EAAE,MAAM,MAAM;AAC9B,gBAAQ,MAAM,gCAAgC;AAC9C,aAAK,OAAO,KAAK,sCAAsC,WAAW,IAAI,QAAQ,EAAE;AAAA,MACpF,CAAC;AAAA,IAEL,CAAC;AAAA,EACL;AAAA,EAEQ,aAAa;AACjB,QAAI;AACA,YAAM,aAAa,KAAK,KAAK,QAAQ,IAAI,GAAG,aAAa;AACzD,UAAI,GAAG,WAAW,UAAU,GAAG;AAC3B,cAAM,gBAAgB,GAAG,aAAa,YAAY,MAAM;AACxD,cAAM,eAAe,KAAK,KAAK,aAAa;AAC5C,aAAK,SAAS,gBAAgB,CAAC;AAC/B,gBAAQ,IAAI,0CAA0C,KAAK,MAAM;AAAA,MACrE,OAAO;AACH,gBAAQ,IAAI,sCAAsC;AAClD,aAAK,SAAS,CAAC;AAAA,MACnB;AAGA,WAAK,0BAA0B;AAAA,IAEnC,SAAS,OAAO;AACZ,cAAQ,MAAM,8BAA8B,KAAK;AACjD,WAAK,SAAS,CAAC;AACf,WAAK,0BAA0B;AAAA,IACnC;AAAA,EACJ;AAAA,EAEQ,4BAA4B;AAEhC,QAAI,QAAQ,IAAI,oBAAoB;AAChC,WAAK,OAAO,SAAS,KAAK,OAAO,UAAU,CAAC;AAC5C,WAAK,OAAO,OAAO,qBAAqB,QAAQ,IAAI,uBAAuB;AAAA,IAC/E;AAEA,QAAI,QAAQ,IAAI,oBAAoB;AAChC,WAAK,OAAO,MAAM,KAAK,OAAO,OAAO,CAAC;AACtC,WAAK,OAAO,IAAI,iBAAiB,QAAQ,IAAI,uBAAuB;AAAA,IACxE;AAEA,QAAI,QAAQ,IAAI,gBAAgB;AAC5B,WAAK,OAAO,SAAS,KAAK,OAAO,UAAU,CAAC;AAC5C,WAAK,OAAO,OAAO,iBAAiB,QAAQ,IAAI,mBAAmB;AAAA,IACvE;AAEA,QAAI,QAAQ,IAAI,YAAY;AACxB,WAAK,OAAO,cAAc,KAAK,OAAO,eAAe,CAAC;AACtD,WAAK,OAAO,YAAY,QAAQ,QAAQ,IAAI,eAAe;AAAA,IAC/D;AAGA,SAAK,OAAO,SAAS,KAAK,OAAO,UAAU,EAAE,oBAAoB,KAAK;AACtE,SAAK,OAAO,MAAM,KAAK,OAAO,OAAO;AAAA,MACjC,gBAAgB;AAAA,MAChB,kBAAkB;AAAA,MAClB,4BAA4B;AAAA,MAC5B,YAAY;AAAA,MACZ,kBAAkB;AAAA,MAClB,WAAW;AAAA,IACf;AACA,SAAK,OAAO,SAAS,KAAK,OAAO,UAAU,EAAE,gBAAgB,MAAM;AACnE,SAAK,OAAO,UAAU,KAAK,OAAO,WAAW,EAAE,iBAAiB,aAAa,mBAAmB,EAAE;AAClG,SAAK,OAAO,cAAc,KAAK,OAAO,eAAe,EAAE,OAAO,OAAO,cAAc,KAAK;AAGxF,SAAK,OAAO,cAAc,KAAK,OAAO,eAAe;AAAA,MACjD,sBAAsB;AAAA,MACtB,mBAAmB;AAAA,MACnB,uBAAuB;AAAA,MACvB,iBAAiB;AAAA,MACjB,uBAAuB;AAAA,MACvB,SAAS;AAAA,MACT,sBAAsB;AAAA,IAC1B;AAEA,SAAK,OAAO,QAAQ,KAAK,OAAO,SAAS;AAAA,MACrC,gBAAgB;AAAA,MAChB,aAAa;AAAA,MACb,aAAa;AAAA,MACb,aAAa;AAAA,IACjB;AAEA,SAAK,OAAO,UAAU,KAAK,OAAO,WAAW;AAAA,MACzC,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,cAAc;AAAA,MACd,oBAAoB;AAAA,MACpB,uBAAuB;AAAA,IAC3B;AAEA,SAAK,OAAO,QAAQ,KAAK,OAAO,SAAS;AAAA,MACrC,sBAAsB;AAAA,MACtB,uBAAuB;AAAA,MACvB,kBAAkB;AAAA,IACtB;AAEA,SAAK,OAAO,UAAU,KAAK,OAAO,WAAW;AAAA,MACzC,oBAAoB;AAAA,MACpB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,gBAAgB;AAAA,MAChB,eAAe;AAAA,MACf,oBAAoB;AAAA,IACxB;AAAA,EACJ;AAAA,EAEA,MAAe,OAAO;AAClB,YAAQ,IAAI,0BAA0B;AACtC,UAAM,KAAK,gBAAgB;AAE3B,SAAK,KAAK,OAAO;AACjB,YAAQ,IAAI,mBAAmB;AAC/B,YAAQ,IAAI,qCAAqC;AAAA,EACrD;AAAA,EAEA,eAAe,UAA0B;AAErC,QAAI,OAAO,SAEN,QAAQ,eAAe,aAAa,EACpC,QAAQ,gBAAgB,aAAa,EACrC,QAAQ,iBAAiB,aAAa,EACtC,QAAQ,kBAAkB,aAAa,EAEvC,QAAQ,mBAAmB,qBAAqB,EAEhD,QAAQ,eAAe,aAAa,EAEpC,QAAQ,gBAAgB,iBAAiB,EAEzC,QAAQ,8BAA8B,qBAAqB,EAE3D,QAAQ,WAAW,SAAS,EAC5B,QAAQ,SAAS,MAAM;AAG5B,WAAO,KAAK,QAAQ,+BAA+B,kDAAkD;AACrG,WAAO,KAAK,QAAQ,uBAAuB,4BAA4B;AAGvE,WAAO,QAAQ,OAAO;AAGtB,WAAO,KAAK,QAAQ,eAAe,EAAE;AACrC,WAAO,KAAK,QAAQ,YAAY,IAAI;AACpC,WAAO,KAAK,QAAQ,wBAAwB,QAAQ;AACpD,WAAO,KAAK,QAAQ,eAAe,OAAO;AAC1C,WAAO,KAAK,QAAQ,mBAAmB,QAAQ;AAE/C,WAAO;AAAA,EACX;AAAA,EAEA,SAAS,KAA8B;AACnC,YAAQ,IAAI,eAAe;AAG3B,UAAM,WAAW,KAAK,IAAI,mBAAmB,KAAK,KAAK,YAAY;AACnE,UAAM,OAAO,KAAK,IAAI,MAAM,KAAK;AACjC,UAAM,UAAU,GAAG,QAAQ,MAAM,IAAI;AAErC,UAAM,YAAY;AAAA,MACd,OAAO;AAAA,MACP,aAAa;AAAA,MACb,KAAK;AAAA,MACL,SAAS;AAAA,MACT,eAAe;AAAA,MACf,MAAM;AAAA,MACN,MAAM;AAAA,MACN,eAAe;AAAA,MACf,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,UAAU;AAAA,MACV,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,UAAU,WAAY;AAClB,eAAO;AAAA;AAAA,cAET,KAAK,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWjB,OAAO,yBAAyB,OAAO;AAAA,KACvC,OAAO,kCAAkC,OAAO;AAAA,KAChD,OAAO,uCAAuC,OAAO;AAAA;AAAA;AAAA,kBAGxC,OAAO,oDAAoD,OAAO;AAAA,eACrE,OAAO,8CAA8C,OAAO;AAAA,WAChE,OAAO,gDAAgD,OAAO;AAAA,gBACzD,OAAO,gDAAgD,OAAO;AAAA;AAAA;AAAA,iBAG7D,OAAO,sDAAsD,OAAO;AAAA,gBACrE,OAAO,oDAAoD,OAAO;AAAA;AAAA;AAAA;AAAA,8BAIpD,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,sCAKC,OAAO;AAAA;AAAA;AAAA,QAGrC,OAAO;AAAA;AAAA;AAAA,wCAGyB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAW/B,OAAO,WAAW,OAAO;AAAA,oBACrB,OAAO,cAAc,OAAO;AAAA;AAAA;AAAA;AAAA,MAIpC;AAAA,IACJ;AACA,YAAQ,IAAI,yBAAyB,SAAS;AAC9C,WAAO;AAAA,EACX;AAAA,EAEA,YAAY,SAA2B;AACnC,YAAQ,IAAI,4BAA4B,OAAO;AAC/C,UAAM,kBAAkB,IAAI,gBAAgB;AAAA,MACxC,gBAAgB;AAAA,MAChB,kBAAkB;AAAA,IACtB,CAAC;AACD,QAAI,CAAC,SAAS,SAAS;AACnB,cAAQ,IAAI,uBAAuB;AACnC,sBAAgB,QAAQ,qBAAqB;AAAA,QACzC,QAAQ,CAAC,QAAQ,SAAS,UAAU,YAAY,QAAQ,YAAY,QAAQ;AAAA,QAC5E,aAAa,MAAM;AAAA,MACvB,CAAC;AACD,sBAAgB,QAAQ,gBAAgB;AAAA,QAChC,QAAQ,CAAC,SAAS,KAAK,aAAa;AAAA,QACpD,aAAa,MAAM;AAAA,MACX,CAAC;AACD,sBAAgB,QAAQ,eAAe;AAAA,QACnC,QAAQ,CAAC,OAAO;AAAA,QAChB,aAAa,CAAC,cAAc,GAAG,SAAS;AAAA;AAAA;AAAA,MAC5C,CAAC;AAAA,IACL;AAEA,QAAI,SAAS,uBAAuB;AAChC,cAAQ,IAAI,2CAA2C;AACvD,sBAAgB,QAAQ,iCAAiC;AAAA,QACrD,QAAQ,CAAC,SAAS,QAAQ,KAAK,YAAY,SAAS,KAAK,aAAa,KAAK,GAAG,WAAW,OAAO,CAAC;AAAA,QACjG,aAAa,CAAC,UAAU,SAAS;AAC7B,gBAAM,UAAU;AAChB,gBAAM,OAAO,QAAQ,aAAa,KAAK,KAAK,IAAI,KAAK;AACrD,gBAAM,MAAM,eAAe,QAAQ,aAAa,KAAK,CAAC,KAAK;AAE3D,cAAI,QAAQ,KAAK;AACb,kBAAM,SAAS,IAAI,IAAI,QAAQ,IAAI,SAAS,CAAC;AAC7C,kBAAM,YAAY,IAAI,IAAI,QAAQ,OAAO,MAAM,IAAI,YAAY,UAAU,KAAK,GAAG,CAAC,EAAE;AAEpF,mBAAO,KAAK,GAAG,KAAK,SAAS;AAAA,UACjC;AAEA,iBAAO,KAAK,GAAG,UAAU,YAAY,UAAU,KAAK,GAAG,CAAC;AAAA,QAC5D;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,oBAAgB,QAAQ,sBAAsB;AAAA,MAC1C,QAAQ;AAAA,MACR,aAAa,CAAC,cAAc;AACxB,cAAM,UAAU,UAAU,KAAK;AAC/B,YAAI,CAAC,SAAS;AACV,iBAAO;AAAA,QACX;AAEA,eAAO,GAAG,QAAQ,QAAQ,WAAW,MAAM,CAAC;AAAA;AAAA;AAAA,MAChD;AAAA,IACJ,CAAC;AACD,oBAAgB,QAAQ,wBAAwB;AAAA,MAC5C,QAAQ,SAAU,MAAMC,UAAS;AAC7B,eAAO;AAAA,UACHA,SAAQ,cAAc,aACtB,KAAK,aAAa,OAClB,KAAK,aAAa,MAAM;AAAA,QAC5B;AAAA,MACJ;AAAA,MAEA,aAAa,SAAU,SAAS,MAAM;AAClC,cAAM,UAAU;AAChB,YAAI,OAAO,QAAQ,aAAa,MAAM;AACtC,YAAI,KAAM,QAAO,KAAK,QAAQ,WAAW,MAAM;AAC/C,YAAI,QAAQ,eAAe,QAAQ,aAAa,OAAO,CAAC;AACxD,YAAI,MAAO,SAAQ,OAAO,MAAM,QAAQ,MAAM,KAAK,IAAI;AAEvD,cAAM,eAAe,QAAQ,QAAQ,QAAQ,GAAG,EAAE,KAAK;AACvD,YAAI,YAAY,KAAK,QAAQ,QAAQ,EAAE,EAAE,KAAK;AAC9C,YAAI,SAAS,KAAK;AACd,cAAI;AACA,wBAAY,IAAI,IAAI,WAAW,QAAQ,GAAG,EAAE,SAAS;AAAA,UACzD,SAAS,MAAM;AAAA,UAEf;AAAA,QACJ;AAEA,eAAO,IAAI,YAAY,KAAK,SAAS,GAAG,SAAS,EAAE;AAAA,MACvD;AAAA,IACJ,CAAC;AACD,oBAAgB,QAAQ,iBAAiB;AAAA,MACrC,QAAQ,SAAU,MAAM;AACpB,cAAM,UAAU;AAChB,YAAI,cAAc,QAAQ,mBAAmB,QAAQ;AACrD,YAAI,cAAc,QAAQ,YAAY,aAAa,SAAS,CAAC;AAE7D,eAAO,KAAK,aAAa,UAAU,CAAC;AAAA,MACxC;AAAA,MAEA,aAAa,SAAU,cAA6B;AAChD,YAAI,CAAC,aAAc,QAAO;AAC1B,YAAI,UAAU;AAEd,YAAI,YAAY;AAChB,cAAM,UAAoB,QAAQ,MAAM,MAAM,KAAK,CAAC;AACpD,eAAO,QAAQ,QAAQ,SAAS,MAAM,GAAI,aAAY,YAAY;AAClE,YAAI,QAAQ,SAAS,IAAI,GAAG;AACxB,sBAAY;AAAA,QAChB;AAEA,YAAI,aAAa,cAAc,QAAQ,OAAO,sBAAsB,KAAK,OAAO,IAAI,MAAM;AAE1F,eAAO,YAAY,aAAa,WAAW,cAAc,SAAS,CAAC,QAAQ,SAAS,UAAU,IAAI,aAAa,MAAM;AAAA,MACzH;AAAA,IACJ,CAAC;AAED,YAAQ,IAAI,6BAA6B;AACzC,WAAO;AAAA,EACX;AAAA,EAEA,yBAAyB,UAAwB;AAC7C,YAAQ,IAAI,iCAAiC;AAC7C,QAAI;AACJ,UAAM,QAAmF,CAAC;AAE1F,QAAI,KAAK,YAAY,IAAI,mBAAmB,GAAG;AAC3C,cAAQ,IAAI,0BAA0B;AACtC,mBAAa,KAAK,aAAa,cAAc,QAAQ;AACrD,YAAM,eAAe,CAAC;AACtB,YAAM,gBAAgB,oBAAI,IAAsB;AAEhD,UAAI,SAAS;AAEb,iBAAW,OAAQ,SAAS,QAAQ,CAAC,GAAI;AACrC,cAAM,YAAY,EAAE;AACpB,cAAM,SAAS,cAAc,IAAI,IAAI,GAAG,IAAI,cAAc,IAAI,IAAI,GAAG,IAAK,CAAC;AAC3E,eAAO,KAAK,SAAS;AACrB,sBAAc,IAAI,IAAI,KAAK,MAAM;AACjC,qBAAa,IAAI,GAAG,IAAI,IAAI,OAAO;AAAA,MACvC;AAEA,YAAM,SACF,EAAE,YAAY,EACT,QAAQ,EACR;AAAA,QACG,CAAC,CAAC,KAAK,GAAG,GAAG,MAAM;AACf,iBAAO,CAAC,UAAU,eAAe,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,MAAM,KAAK,GAAG,KAAK,EAAE,IAAI,GAAG;AAAA,QAClG;AAAA,MACJ,EAAE,UAAU,EACX,MAAM;AACf,cAAQ,IAAI,gCAAgC,OAAO,KAAK,MAAM,UAAU,CAAC,CAAC,EAAE,MAAM,SAAS;AAAA,IAC/F;AACA,QAAI,KAAK,YAAY,IAAI,kBAAkB,GAAG;AAC1C,cAAQ,IAAI,yBAAyB;AACrC,mBAAa,KAAK,aAAa,cAAc,QAAQ;AACrD,YAAM,QAAQ,EAAE,OAAO,SAAS,SAAS,CAAC,CAAC;AAC3C,cAAQ,IAAI,+BAA+B,OAAO,KAAK,MAAM,SAAS,CAAC,CAAC,EAAE,MAAM,QAAQ;AAAA,IAC5F;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,eAAe,MAAyE,UAG3F,YAA0C;AACzC,YAAQ,IAAI,uBAAuB,EAAE,MAAM,KAAK,YAAY,SAAS,EAAE,CAAC;AAExE,QAAI,SAAS,cAAc;AACvB,UAAI,SAAS,cAAc,CAAC,SAAS,eAAe;AAChD,gBAAQ,IAAI,mBAAmB;AAC/B,cAAM,WAAW,cAAc,WAAW,CAAC;AAC3C,cAAM,KAAK,gBAAgB,UAAU,SAAS,UAAU;AACxD,iBAAS,gBAAgB,wBAAwB,QAAQ;AACzD,gBAAQ,IAAI,sCAAsC,EAAE,eAAe,SAAS,cAAc,CAAC;AAAA,MAC/F;AAEA,aAAO;AAAA,QACH,GAAG,KAAK,yBAAyB,QAAQ;AAAA,QACzC,eAAe,SAAS;AAAA,QACxB,WAAW;AACP,iBAAO,KAAK;AAAA,QAChB;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,SAAS,YAAY;AACrB,UAAI,SAAS,YAAY,CAAC,SAAS,aAAa;AAC5C,gBAAQ,IAAI,iBAAiB;AAC7B,cAAM,WAAW,YAAY,WAAW,CAAC;AACzC,cAAM,KAAK,gBAAgB,UAAU,SAAS,QAAQ;AACtD,iBAAS,cAAc,wBAAwB,QAAQ;AACvD,gBAAQ,IAAI,oCAAoC,EAAE,aAAa,SAAS,YAAY,CAAC;AAAA,MACzF;AAEA,aAAO;AAAA,QACH,GAAG,KAAK,yBAAyB,QAAQ;AAAA,QACzC,MAAM,SAAS;AAAA,QACf,aAAa,SAAS;AAAA,QACtB,WAAW;AACP,iBAAO,KAAK;AAAA,QAChB;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,SAAS,QAAQ;AACjB,cAAQ,IAAI,oBAAoB;AAChC,aAAO;AAAA,QACH,GAAG,KAAK,yBAAyB,QAAQ;AAAA,QACzC,MAAM,SAAS;AAAA,QACf,WAAW;AACP,iBAAO,KAAK;AAAA,QAChB;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,SAAS,QAAQ;AACjB,cAAQ,IAAI,oBAAoB;AAChC,aAAO;AAAA,QACH,GAAG,KAAK,yBAAyB,QAAQ;AAAA,QACzC,MAAM,SAAS;AAAA,QACf,WAAW;AACP,iBAAO,KAAK;AAAA,QAChB;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,wBAAwB,CAAC,QAAQ,KAAK,YAAY,IAAI,gBAAgB,CAAC;AAC7E,QAAI,cAAc;AAClB,UAAM,eAAe,CAAC;AACtB,UAAM,gBAAgB,oBAAI,IAAsB;AAGhD,UAAM,YAAY,SAAS,QAAQ,SAAS,KAAK,SAAS,KAAK,KAAK,OAAO,KAAK;AAChF,QAAI,WAAW;AACX,cAAQ,IAAI,iDAAiD;AAC7D,oBAAc,SAAS,QAAQ,WAAW,SAAS;AAAA,IACvD,WAAW,SAAS,QAAQ,SAAS,KAAK,SAAS,KAAK,CAAC,KAAK,OAAO,KAAK,gBAAgB;AACtF,cAAQ,IAAI,kFAAkF;AAC9F,oBAAc,SAAS;AAAA,IAC3B,WACK,SAAS,gBAAgB,SAAS,eAAe,OACjD,SAAS,aAAa,SAAS,YAAY,KAC9C;AACE,cAAQ,IAAI,yCAAyC;AACrD,WAAK,OAAO,KAAK,2CAA2C,EAAE,KAAK,SAAS,KAAK,CAAC;AAClF,oBAAc,SAAS;AAAA,IAC3B,OAAO;AACH,cAAQ,IAAI,yBAAyB;AACrC,YAAM,qBAAqB,KAAK,aAAa,iBAAiB,SAAS,MAAM,SAAS,IAAI;AAC1F,UAAI,iBAAiB;AACrB,UAAI,kBAAkB,KAAK,YAAY,EAAE,KAAK,SAAS,UAAU,YAAY,sBAAsB,CAAC;AAEpG,UAAI,SAAS,cAAc,SAAS,QAAQ,SAAS;AACjD,gBAAQ,IAAI,iDAAiD;AAC7D,cAAM,uBAAuB,KAAK,aAAa,iBAAiB,SAAS,OAAO,SAAS,SAAS,IAAI;AACtG,cAAM,OAAO,KAAK,aAAa,YAAY,iBAAiB,kBAAkB;AAC9E,cAAM,OAAO,KAAK,aAAa,YAAY,iBAAiB,oBAAoB;AAEhF,YAAI,KAAK,UAAU,MAAM,KAAK,QAAQ;AAClC,kBAAQ,IAAI,mEAAmE;AAC/E,4BAAkB,KAAK,YAAY,EAAE,SAAS,MAAM,KAAK,SAAS,UAAU,YAAY,sBAAsB,CAAC;AAC/G,2BAAiB;AAAA,QACrB,OAAO;AACH,kBAAQ,IAAI,wDAAwD;AAAA,QACxE;AAAA,MACJ;AAEA,iBAAW,UAAU,KAAK,iBAAiB;AACvC,wBAAgB,IAAI,MAAM;AAAA,MAC9B;AAEA,YAAM,cAAoD,CAAC;AAC3D,UAAI,SAAS,MAAM,UAAU,KAAK,YAAY,IAAI,kBAAkB,GAAG;AACnE,cAAM,QAAQ,EAAE,OAAO,SAAS,MAAM,KAAK,EAAE,IAAI,OAAO,MAAM;AAC1D,gBAAM,IAAI;AACV,cAAI,KAAK,EAAE,KAAK;AACZ,wBAAY,EAAE,IAAI,KAAK,CAAC,IAAI;AAAA,UAChC;AAAA,QACJ,CAAC;AACD,cAAM,QAAQ,IAAI,KAAK;AAEvB,YAAI,SAAS;AACb,wBAAgB,QAAQ,qBAAqB;AAAA,UACzC,QAAQ;AAAA,UACR,aAAa,CAAC,UAAU,SAAS;AAC7B,kBAAM,UAAU;AAChB,gBAAI,oBAAoB,QAAQ,aAAa,KAAK,KAAK,IAAI,KAAK;AAChE,gBAAI,CAAC,oBAAoB,iBAAiB,WAAW,OAAO,GAAG;AAC3D,oBAAM,WAAW,QAAQ,aAAa,UAAU,KAAK,IAAI,KAAK;AAC9D,kBAAI,WAAW,CAAC,QAAQ,WAAW,OAAO,GAAG;AACzC,mCAAmB;AAAA,cACvB;AAAA,YACJ;AAEA,gBAAI;AACJ,gBAAI;AACA,oBAAM,IAAI,IAAI,kBAAkB,SAAS,UAAU,UAAU,EAAE,SAAS;AAAA,YAC5E,SAAS,MAAM;AAAA,YAEf;AACA,kBAAM,MAAM,eAAe,QAAQ,aAAa,KAAK,CAAC;AACtD,gBAAI,CAAC,KAAK;AACN,qBAAO;AAAA,YACX;AACA,kBAAM,SAAS,YAAY,GAAG;AAC9B,kBAAM,YAAY,EAAE;AACpB,kBAAM,SAAS,cAAc,IAAI,GAAG,IAAI,cAAc,IAAI,GAAG,IAAK,CAAC;AACnE,mBAAO,KAAK,SAAS;AACrB,0BAAc,IAAI,KAAK,MAAM;AAE7B,yBAAa,GAAG,IAAI,UAAU;AAE9B,kBAAM,eAAe,SAAS,MAAM,KAAK,UAAU,GAAG;AAEtD,gBAAI,uBAAuB;AACvB,oBAAM,YAAY,QAAQ,YAAY,UAAU,EAAE,IAAI,YAAY,UAAU,KAAK,GAAG,CAAC;AACrF,qBAAO,KAAK,YAAY,KAAK,SAAS;AAAA,YAC1C;AAEA,mBAAO,KAAK,YAAY,KAAK,GAAG;AAAA,UACpC;AAAA,QACJ,CAAC;AAAA,MACL;AAEA,UAAI,gBAAgB;AAChB,YAAI;AACA,wBAAc,KAAK,aAAa,YAAY,iBAAiB,cAAc,EAAE,KAAK;AAAA,QACtF,SAAS,KAAK;AACV,eAAK,OAAO,KAAK,oDAAoD,EAAE,IAAI,CAAC;AAC5E,gBAAM,yBAAyB,KAAK,YAAY,EAAE,KAAK,SAAS,UAAU,YAAY,sBAAsB,CAAC;AAC7G,cAAI;AACA,0BAAc,KAAK,aAAa,YAAY,wBAAwB,cAAc,EAAE,KAAK;AAAA,UAC7F,SAAS,MAAM;AACX,iBAAK,OAAO,KAAK,qCAAqC,EAAE,KAAK,KAAK,CAAC;AAAA,UACvE;AAAA,QACJ;AAAA,MACJ;AAEA,WAAK,CAAC,eAAgB,YAAY,WAAW,GAAG,KAAK,YAAY,SAAS,GAAG,MAAO,mBAAmB,oBAAoB;AACvH,YAAI;AACA,wBAAc,KAAK,aAAa,YAAY,iBAAiB,kBAAkB;AAAA,QACnF,SAAS,KAAK;AACV,eAAK,OAAO,KAAK,gEAAgE,EAAE,IAAI,CAAC;AACxF,gBAAM,yBAAyB,KAAK,YAAY,EAAE,KAAK,SAAS,UAAU,YAAY,sBAAsB,CAAC;AAC7G,cAAI;AACA,0BAAc,KAAK,aAAa,YAAY,wBAAwB,kBAAkB;AAAA,UAC1F,SAAS,MAAM;AACX,iBAAK,OAAO,KAAK,uCAAuC,EAAE,KAAK,KAAK,CAAC;AAAA,UACzE;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,CAAC,eAAgB,YAAY,WAAW,GAAG,KAAK,YAAY,SAAS,GAAG,GAAI;AAC5E,sBAAc,SAAS;AAAA,MAC3B;AAAA,IACJ;AAEA,UAAM,aAAa,eAAe,IAAI,KAAK;AAE3C,UAAM,YAA2B;AAAA,MAC7B,QAAQ,SAAS,QAAQ,SAAS,SAAS,SAAS,IAAI,KAAK;AAAA,MAC7D,KAAK,YAAY,SAAS,KAAK,SAAS,MAAM,KAAK;AAAA,MACnD,SAAS;AAAA,MACT,eAAe,SAAS,QAAQ,iBAAiB;AAAA,MAEjD,WAAmB;AACf,YAAI,SAAS,YAAY;AACrB,iBAAO,KAAK;AAAA,QAChB;AAEA,cAAM,SAAmB,CAAC;AAC1B,YAAI,KAAK,eAAe;AACpB,iBAAO,KAAK,mBAAmB,KAAK,aAAa,EAAE;AAAA,QACvD;AACA,cAAM,eAAyB,CAAC;AAChC,YAAI,KAAK,QAAQ;AACb,gBAAM,qBAA+B,CAAC,SAAS;AAC/C,qBAAW,CAAC,GAAG,CAAC,KAAK,OAAO,QAAQ,KAAK,MAAM,GAAG;AAC9C,+BAAmB,KAAK,OAAO,CAAC,KAAK,CAAC,GAAG;AAAA,UAC7C;AACA,cAAI,mBAAmB,WAAW,GAAG;AACjC,+BAAmB,KAAK,gDAAgD;AAAA,UAC5E;AACA,uBAAa,KAAK,mBAAmB,KAAK,IAAI,CAAC;AAAA,QACnD;AAEA,cAAM,oBAAoB,CAAC,gBAAgB;AAC3C,YAAI,KAAK,OAAO;AACZ,qBAAW,CAAC,GAAG,CAAC,KAAK,OAAO,QAAQ,KAAK,KAAK,GAAG;AAC7C,8BAAkB,KAAK,MAAM,CAAC,KAAK,CAAC,GAAG;AAAA,UAC3C;AAAA,QACJ;AACA,YAAI,kBAAkB,WAAW,GAAG;AAChC,4BAAkB,KAAK,uDAAuD;AAAA,QAClF;AACA,qBAAa,KAAK,kBAAkB,KAAK,IAAI,CAAC;AAE9C,eAAO,UAAU,KAAK,KAAK;AAAA;AAAA,kBAEzB,KAAK,GAAG;AAAA,MACpB,OAAO,SAAS;AAAA,EAAK,OAAO,KAAK,MAAM,CAAC;AAAA,IAAO,EAAE;AAAA;AAAA,MAEjD,KAAK,OAAO;AAAA,MACZ,aAAa,SAAS;AAAA,EAAK,aAAa,KAAK,MAAM,CAAC;AAAA,IAAO,EAAE;AAAA,MACvD;AAAA,IACJ;AAEA,QAAI,KAAK,YAAY,IAAI,mBAAmB,GAAG;AAC3C,gBAAU,SACN,EAAE,YAAY,EACT,QAAQ,EACR;AAAA,QACG,CAAC,CAAC,KAAK,GAAG,GAAG,MAAM;AACf,iBAAO,CAAC,UAAU,eAAe,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,MAAM,KAAK,GAAG,KAAK,EAAE,IAAI,GAAG;AAAA,QAClG;AAAA,MACJ,EAAE,UAAU,EACX,MAAM;AAAA,IACnB;AAGA,UAAM,eAAe,KAAK,YAAY,IAAI,QAAQ,KAAK;AACvD,UAAM,eAAe,KAAK,YAAY,IAAI,iBAAiB;AAC3D,UAAM,YAAY,aAAa,SAAS,kBAAkB,KAAK,iBAAiB,UAAU,KAAK,YAAY,IAAI,kBAAkB;AAEjI,QAAI,WAAW;AACX,gBAAU,QAAQ,KAAK,aAAa,cAAc,QAAQ,EAAE,SAAS,CAAC;AAEtE,UAAI,CAAC,UAAU,QAAQ;AACnB,kBAAU,SAAS,EAAE,YAAY,EAC5B,QAAQ,EACR,IAAI,CAAC,CAAC,KAAK,GAAG,GAAG,MAAM;AACpB,iBAAO,CAAC,UAAU,eAAe,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,MAAM,KAAK,GAAG,KAAK,EAAE,IAAI,GAAG;AAAA,QAClG,CAAC,EACA,UAAU,EACV,MAAM;AAAA,MACf;AAEA,gBAAU,UAAU,SAAS,QAAQ;AAAA,IACzC;AAEA,WAAO;AAAA,EACX;AAAA,EAEQ,WAAW,UAA2B;AAC1C,UAAM,QAAQ,SAAS,MAAM,GAAG;AAChC,WAAO,MAAM,SAAS,KAAK,MAAM,MAAM,SAAS,CAAC,EAAE,UAAU;AAAA,EACjE;AAAA,EAEQ,gBAAgB,gBAAwB,KAAe;AAC3D,UAAM,eAAe,eAAe,QAAQ,0BAA0B,EAAE;AACxE,UAAM,WAAW,KAAK,KAAK,QAAQ,iBAAiB,uBAAuB,YAAY;AACvF,YAAQ,IAAI,wCAAwC,QAAQ,EAAE;AAC9D,QAAI,GAAG,WAAW,QAAQ,GAAG;AACzB,aAAO,IAAI,SAAS,QAAQ;AAAA,IAChC,OAAO;AACH,cAAQ,IAAI,yBAAyB,QAAQ,EAAE;AAC/C,aAAO,aAAa,KAAK,wBAAwB,EAAE,aAAa,cAAc,MAAM,IAAI,CAAC;AAAA,IAC7F;AAAA,EACJ;AAAA,EAEQ,sBAAsB,KAAe,WAA0B,aAAqB,UAA8B;AACtH,UAAM,eAAe,KAAK,YAAY,IAAI,QAAQ,KAAK;AACvD,UAAM,eAAe,KAAK,YAAY,IAAI,iBAAiB,KAAK;AAChE,UAAM,YAAY,aAAa,SAAS,kBAAkB,KAAK,iBAAiB;AAEhF,QAAI,gBAAgB,gBAAgB,UAAU,eAAe;AACzD,aAAO,aAAa,KAAK,IAAI,EAAE,MAAM,KAAK,SAAS,EAAE,UAAU,UAAU,cAAc,EAAE,CAAC;AAAA,IAC9F;AACA,QAAI,gBAAgB,cAAc,UAAU,aAAa;AACrD,aAAO,aAAa,KAAK,IAAI,EAAE,MAAM,KAAK,SAAS,EAAE,UAAU,UAAU,YAAY,EAAE,CAAC;AAAA,IAC5F;AAEA,QAAI,WAAW;AACX,YAAM,OAAO,UAAU,QAAQ,QAAQ;AACvC,YAAM,cAAc,UAAU,QAAQ,WAAW,UAAU;AAC3D,YAAM,WAAW,UAAU,QAAQ,YAAY;AAC/C,YAAM,SAAS,UAAU,QAAQ,UAAU;AAE3C,YAAM,eAAe;AAAA,QACjB,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,MAAM;AAAA,UACF,OAAO,UAAU;AAAA,UACjB;AAAA,UACA,KAAK,UAAU;AAAA,UACf,SAAS,UAAU;AAAA,UACnB,OAAO,UAAU,SAAS,CAAC;AAAA,UAC3B,QAAQ,UAAU,UAAU,CAAC;AAAA,UAC7B,UAAU;AAAA,YACN;AAAA,YACA;AAAA,YACA,YAAY,UAAU;AAAA,YACtB,kBAAkB;AAAA,YAClB,WAAW;AAAA,YACX,UAAU,UAAU;AAAA,YACpB,gBAAgB;AAAA,YAChB,kBAAkB;AAAA,YAClB,0BAA0B,UAAU,iBAAiB;AAAA,YACrD,UAAU;AAAA,UACd;AAAA,UACA,OAAO;AAAA,YACH,QAAQ,KAAK,MAAM,UAAU,SAAS,UAAU,KAAK,CAAC;AAAA,UAC1D;AAAA,QACJ;AAAA,QACA,MAAM;AAAA,UACF,OAAO;AAAA,YACH,QAAQ,KAAK,MAAM,UAAU,SAAS,UAAU,KAAK,CAAC;AAAA,UAC1D;AAAA,QACJ;AAAA,MACJ;AAEA,aAAO,aAAa,KAAK,cAAc,EAAE,aAAa,mBAAmB,CAAC;AAAA,IAC9E;AAGA,QAAI;AACJ,QAAI,aAAa,OAAO,UAAU,aAAa,YAAY;AACvD,qBAAe,UAAU,SAAS;AAAA,IACtC,OAAO;AACH,qBAAe,OAAO,SAAS;AAAA,IACnC;AAEA,WAAO,aAAa,KAAK,cAAc,EAAE,aAAa,aAAa,CAAC;AAAA,EACxE;AAAA,EAEA,aAAa,YAAyB;AACtC,UAAM,gBAAgB,iBAAiB,UAAU;AAC7C,QAAI,CAAC,cAAc,KAAK,WAAW,IAAI,GAAG;AACtC,oBAAc,OAAO;AAAA,IACzB;AACA,WAAO,YAAY,UAAU,KAAK,cAAc,SAAS,CAAC;AAAA,EAC9D;AAAA,EAEA,OAAO,MAAM,YAAiB,WAAmC,aAAwE;AACrI,SAAK,OAAO,KAAK,2BAA2B,WAAW,SAAS,CAAC,EAAE;AACnE,YAAQ,IAAI,2BAA2B,WAAW,SAAS,GAAG,EAAE,WAAW,YAAY,CAAC;AAExF,QAAI,aAAa,MAAM;AACnB,cAAQ,IAAI,qBAAqB;AACjC,YAAM,eAAe;AAAA,QACjB,MAAM,WAAW,SAAS;AAAA,QAC1B,MAAM,YAAY;AAAA,QAClB,OAAO;AAAA,QACP,MAAM;AAAA,MACV;AACA,YAAM,KAAK,aAAa,eAAe,cAAc,SAAS;AAC9D;AAAA,IACJ;AAEA,UAAM,gBAAgB,KAAK,iBAAiB,OAAO,YAAY,SAAS;AAExE,QAAI,WAAW,kBAAkB,WAAW,kBAAkB,WAAW,YAAY;AACjF,cAAQ,IAAI,4CAA4C;AACxD,uBAAiB,KAAK,eAAe;AACjC,YAAI,GAAG;AACH,gBAAM,KAAK,aAAa,eAAe,GAAG,SAAS;AAAA,QACvD;AAAA,MACJ;AAAA,IACJ,OAAO;AACH,cAAQ,IAAI,+BAA+B;AAC3C,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,OAAO,UAAU,MAAa,SAAiC,aAA4E;AACvI,UAAM,YAAY,KAAK,IAAI,CAAC,QAAQ,KAAK,MAAM,KAAK,SAAS,WAAW,CAAC;AACzE,UAAM,UAAwC,MAAM,UAAU,MAAM,EAAE,KAAK,MAAS;AACpF,QAAI,YAAY;AAChB,QAAI,eAAe,MAAY;AAE/B,UAAM,UAAU,OAAO,IAA8C,QAAgB;AACjF,UAAI;AACA,yBAAiB,KAAK,IAAI;AACtB,kBAAQ,GAAG,IAAI;AACf,cAAI,GAAG;AACH,yBAAa,QAAQ;AACrB,2BAAe,MAAM;AAAA,UACzB;AAAA,QACJ;AAAA,MACJ,SAAS,KAAc;AACnB,aAAK,OAAO,KAAK,mBAAmB,KAAK,GAAG,CAAC,IAAI,EAAE,KAAK,iBAAiB,GAAY,EAAE,CAAC;AAAA,MAC5F;AAAA,IACJ;AAEA,YAAQ,IAAI,UAAU,IAAI,OAAO,CAAC,EAAE,QAAQ,MAAM;AAC9C,kBAAY;AACZ,mBAAa,QAAQ;AAAA,IACzB,CAAC;AAED,UAAM;AAEN,QAAI;AACA,aAAO,CAAC,WAAW;AACf,cAAM,aAAa;AACnB,cAAM;AAAA,MACV;AAAA,IACJ,UAAE;AACE,iBAAW,KAAK,WAAW;AACvB,UAAE,OAAO,MAAS;AAAA,MACtB;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,UAAU,MAAsB,KAAc,YAAwC;AAClF,SAAK,YAAY,IAAI,oBAAoB,KAAK,gBAAgB;AAC9D,SAAK,YAAY,IAAI,oBAAoB,KAAK,gBAAgB;AAC9D,SAAK,YAAY,IAAI,qBAAqB,KAAK,iBAAiB;AAChE,SAAK,YAAY,IAAI,kBAAkB,KAAK,cAAc;AAC1D,SAAK,YAAY,IAAI,kBAAkB,KAAK,cAAc;AAC1D,SAAK,YAAY,IAAI,aAAa,KAAK,SAAS;AAChD,SAAK,YAAY,IAAI,QAAQ,IAAI,QAAQ,QAAQ,gBAAgB;AACjE,QAAI,KAAK,SAAS;AACd,WAAK,YAAY,IAAI,WAAW,KAAK,UAAU,GAAI;AAAA,IACvD;AAEA,UAAM,eAAe,IAAI,QAAQ,cAAc;AAC/C,UAAM,UAAwB,gBACzB,MAAM,QAAQ,YAAY,IAAI,eAAe,CAAC,YAAY,GACtD,IAAI,YAAU;AACX,YAAM,CAAC,MAAM,GAAG,UAAU,IAAI,OAAO,MAAM,GAAG;AAC9C,YAAM,QAAQ,WAAW,KAAK,GAAG;AACjC,aAAO,EAAE,MAAM,OAAO,KAAK,WAAW,SAAS,EAAE;AAAA,IACrD,CAAC,IACH,CAAC;AAEP,UAAM,gBAAgB,QAAQ,IAAI,CAAC,EAAE,MAAM,IAAI,OAAO,EAAE,MAAM,IAAI,EAAE;AACpE,YAAQ,IAAI,YAAY,aAAa;AACrC,WAAO;AAAA,MACH,UAAU,KAAK;AAAA,MACf;AAAA,MACA,iBAAiB,CAAC,cAAc,UAAU,EAAE,SAAS,KAAK,WAAW;AAAA,MACrE,gBAAgB,KAAK;AAAA,MACrB,gBAAgB,KAAK;AAAA,MACrB,iBAAiB,KAAK;AAAA,MACtB,mBAAmB,KAAK;AAAA,MACxB,WAAW,KAAK,UAAU,KAAK,UAAU,MAAO;AAAA,MAChD,YAAY,KAAK;AAAA,MACjB,eAAe,KAAK,iBAAiB;AAAA,MACrC,gBAAgB,KAAK,kBAAkB;AAAA,MACvC,UAAU,KAAK,YAAY;AAAA,MAC3B,WAAW,KAAK;AAAA,IACpB;AAAA,EACJ;AAAA,EAEA,MAAM,YAAY,MAAc,KAAU,MAAsD;AAC5F,UAAM,KAAK,KAAK,MAAM,KAAK,EAAE,GAAG,MAAM,eAAe,IAAI,CAAC;AAE1D,QAAI;AACJ,QAAI,aAAa;AACjB,QAAI;AACA,uBAAiB,KAAK,IAAI;AACtB,uBAAe;AACf,YAAI,YAAY;AACZ;AAAA,QACJ;AACA,YAAI,cAAc,QAAQ,SAAS;AAC/B,uBAAa;AAAA,QACjB;AAAA,MACJ;AAAA,IACJ,SAAS,KAAK;AACV,UAAI,cAAc;AACd,eAAO,KAAK,eAAe,MAAM,cAAc,GAAG;AAAA,MACtD;AACA,YAAM;AAAA,IACV;AAEA,QAAI,CAAC,cAAc;AACf,YAAM,IAAI,sBAAsB,sBAAsB;AAAA,IAC1D;AAEA,WAAO,KAAK,eAAe,MAAM,cAAc,GAAG;AAAA,EACtD;AAAA,EAEA,MAAM,gBAAgB,UAAkB,SAAkC;AACtE,UAAM,WAAW,KAAK,KAAK,QAAQ,iBAAiB,qBAAqB;AACzE,YAAQ,IAAI,yCAAyC,QAAQ,EAAE;AAC/D,QAAI;AACA,UAAI,CAAC,GAAG,WAAW,QAAQ,GAAG;AAC1B,gBAAQ,IAAI,aAAa,QAAQ,+BAA+B;AAChE,WAAG,UAAU,UAAU,EAAE,WAAW,KAAK,CAAC;AAAA,MAC9C;AACA,YAAM,WAAW,KAAK,KAAK,UAAU,QAAQ;AAC7C,cAAQ,IAAI,oBAAoB,QAAQ,EAAE;AAC1C,YAAM,GAAG,SAAS,UAAU,UAAU,IAAI,WAAW,OAAO,CAAC;AAC7D,aAAO,wBAAwB,QAAQ;AAAA,IAC3C,SAAS,OAAO;AACZ,cAAQ,MAAM,8BAA8B,KAAK,EAAE;AACnD,YAAM;AAAA,IACV;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKQ,gBAAgB,KAAmD;AACvE,QAAI,aAAa,IAAI,IAAI,MAAM,CAAC;AAChC,QAAI,oBAAoB;AAGxB,QAAI,WAAW,WAAW,OAAO,GAAG;AAChC,0BAAoB;AACpB,mBAAa,WAAW,MAAM,CAAC;AAC/B,cAAQ,IAAI,0DAA0D,UAAU;AAAA,IACpF;AAEA,WAAO,EAAE,KAAK,YAAY,WAAW,kBAAkB;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAc,oBAAoB,KAAc,KAAe,KAA+B;AAE1F,QAAI,QAAQ,eAAe;AACvB,cAAQ,IAAI,0BAA0B;AACtC,mBAAa,KAAK,yBAAyB,EAAE,aAAa,cAAc,MAAM,IAAI,CAAC;AACnF,aAAO;AAAA,IACX;AAGA,QAAI,CAAC,OAAO,QAAQ,KAAK;AACrB,cAAQ,IAAI,sCAAsC;AAClD,YAAM,KAAK,eAAe,KAAK,GAAG;AAClC,aAAO;AAAA,IACX;AAGA,QAAI,IAAI,WAAW,sBAAsB,GAAG;AACxC,WAAK,gBAAgB,KAAK,GAAG;AAC7B,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,eAAe,KAAc,KAA8B;AACrE,UAAM,YAAY,KAAK,SAAS,GAAG;AACnC,UAAM,kBAAkB,UAAU,SAAS;AAC3C,UAAM,cAAc,KAAK,eAAe,eAAe;AAEvD,UAAM,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,aAKhB,UAAU,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAuElB,WAAW;AAAA;AAAA;AAAA;AAKb,iBAAa,KAAK,cAAc,EAAE,aAAa,YAAY,CAAC;AAAA,EAChE;AAAA;AAAA;AAAA;AAAA,EAKQ,oBAAoB,KAAc,WAA0B;AAEhE,SAAK,YAAY,IAAI,UAAU,IAAI,QAAQ,UAAU,EAAE;AACvD,SAAK,YAAY,IAAI,mBAAmB,IAAI,QAAQ,iBAAiB,KAAK,EAAE;AAG5E,QAAI,WAAW;AACX,WAAK,YAAY,IAAI,UAAU,kBAAkB;AACjD,WAAK,YAAY,IAAI,mBAAmB,MAAM;AAAA,IAClD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKQ,iBAAiB,KAAc,SAAyB;AAE5D,QAAI,IAAI,WAAW,UAAU,IAAI,QAAQ,OAAO,IAAI,KAAK,QAAQ,YAAY,IAAI,KAAK,IAAI,KAAK,GAAG;AAC9F,aAAO,IAAI,KAAK,IAAI,KAAK;AAAA,IAC7B;AAEA,QAAI,IAAI,UAAU,IAAI,MAAM,OAAO,IAAI,MAAM,IAAI;AAC7C,YAAM,IAAK,IAAI,MAAM,OAAO,IAAI,MAAM;AACtC,aAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,OAAO,KAAK,EAAE;AAAA,IACnD;AAEA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKQ,oBAAoB,YAAoB,KAAmB;AAC/D,UAAM,iBAAiB;AACvB,UAAM,iBAAiB,IAAI;AAE3B,UAAM,eAAgB,OAAO,eAAe,QAAQ,aAAc,eAAe,IAAI,mBAAmB,IAAI;AAC5G,UAAM,cAAc,eAAe,mBAAmB,KAAK,eAAe,mBAAmB;AAC7F,UAAM,WAAW,gBAAgB,eAAe;AAEhD,UAAM,cAAe,OAAO,eAAe,QAAQ,aAAc,eAAe,IAAI,MAAM,IAAI;AAC9F,UAAM,aAAa,eAAe,QAAQ,eAAe;AACzD,UAAM,OAAO,eAAe,cAAc;AAE1C,UAAM,cAAc,GAAG,QAAQ,MAAM,IAAI;AAEzC,UAAM,YAAY,iBAAiB,YAAY,WAAW;AAE1D,QAAI,CAAC,CAAC,SAAS,QAAQ,EAAE,SAAS,UAAU,QAAQ,GAAG;AACnD,YAAM,IAAI,MAAM,kBAAkB;AAAA,IACtC;AAGA,UAAM,eAAe,KAAK,OAAO,QAAQ,kBAAkB;AAC3D,QAAI,CAAC,gBAAgB,CAAC,KAAK,WAAW,UAAU,QAAQ,GAAG;AACvD,YAAM,IAAI,MAAM,aAAa;AAAA,IACjC;AAEA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,sBAAsB,WAAkC;AAClE,UAAM,gBAAgB,KAAK,OAAO,QAAQ,uBAAuB;AACjE,QAAI,CAAC,eAAe;AAChB,aAAO;AAAA,IACX;AAEA,YAAQ,IAAI,uCAAuC,UAAU,SAAS,CAAC;AAEvE,QAAI;AACA,YAAM,2BAA2B,KAAK;AAItC,YAAM,eAAe,4BAA4B,OAAO,yBAAyB,cAAc;AAC/F,YAAM,mBAAmB,4BAA4B,OAAO,yBAAyB,kBAAkB;AAEvG,UAAI,gBAAgB,yBAAyB,WAAW;AACpD,cAAM,YAAY,MAAM,yBAAyB,UAAU,UAAU,SAAS,GAAG,gBAAgB;AACjG,YAAI,CAAC,WAAW;AACZ,kBAAQ,IAAI,8BAA8B,UAAU,SAAS,CAAC;AAC9D,iBAAO;AAAA,QACX;AAAA,MACJ,OAAO;AACH,gBAAQ,IAAI,wEAAwE;AAAA,MACxF;AAGA,UAAI,oBAAoB,yBAAyB,eAAe;AAC5D,cAAM,aAAa,MAAM,yBAAyB,cAAc,UAAU,SAAS,GAAG,gBAAgB;AACtG,YAAI,cAAc,aAAa,GAAG;AAC9B,kBAAQ,IAAI,2BAA2B,UAAU,UAAU,UAAU,SAAS,CAAC;AAAA,QAEnF;AAAA,MACJ,OAAO;AACH,gBAAQ,IAAI,0EAA0E;AAAA,MAC1F;AAEA,aAAO;AAAA,IACX,SAAS,aAAa;AAClB,cAAQ,IAAI,0CAA0C,WAAW;AAEjE,aAAO;AAAA,IACX;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,gBACV,WACA,gBACA,KACoE;AACpE,UAAM,YAAY,KAAK,UAAU,gBAAgB,KAAK,SAAS;AAC/D,YAAQ,IAAI,6BAA6B,SAAS;AAElD,QAAI;AACJ,UAAM,gBAAgB,KAAK,MAAM,WAAW,WAAW,cAAc;AAErE,qBAAiB,YAAY,eAAe;AACxC,qBAAe;AACf,UAAI,eAAe,oBAAqB,CAAC,UAAU,QAAQ,WAAW,CAAC,SAAS,OAAO,KAAK,MAAM,CAAC,UAAU,MAAM,QAAS;AACxH;AAAA,MACJ;AAEA,UAAI,eAAe,YAAY,QAAW;AACtC,cAAMC,aAAY,MAAM,KAAK,eAAe,eAAe,aAAa,UAAU,SAAS;AAC3F,eAAO,EAAE,UAAU,UAAU,WAAAA,WAAU;AAAA,MAC3C;AAAA,IACJ;AAEA,QAAI,CAAC,cAAc;AACf,aAAO;AAAA,IACX;AAEA,UAAM,YAAY,MAAM,KAAK,eAAe,eAAe,aAAa,cAAc,SAAS;AAC/F,WAAO,EAAE,UAAU,cAAc,UAAU;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,oBACV,OACA,WACA,gBACoE;AACpE,YAAQ,MAAM,0BAA0B,KAAK;AAE7C,QAAI,iBAAiB,0BAChB,MAAM,QAAQ,SAAS,aAAa,KAAK,MAAM,QAAQ,SAAS,uBAAuB,IAAI;AAC5F,YAAM,gBAA8B;AAAA,QAChC,OAAO;AAAA,QACP,MAAM,UAAU,SAAS;AAAA,QACzB,MAAM;AAAA,QACN,MAAM,8DAA8D,UAAU,SAAS,CAAC;AAAA,QACxF,OAAO;AAAA,MACX;AACA,YAAM,YAAY,MAAM,KAAK,eAAe,eAAe,aAAa,eAAe,SAAS;AAChG,aAAO,EAAE,UAAU,eAAe,UAAU;AAAA,IAChD;AAEA,UAAM;AAAA,EACV;AAAA,EAEA,MAAM,MAAM,KAAc,KAAe;AACrC,SAAK,OAAO,KAAK,mCAAmC,IAAI,GAAG,EAAE;AAC7D,YAAQ,IAAI,qCAAqC,IAAI,GAAG;AAExD,QAAI;AAEA,YAAM,EAAE,KAAK,YAAY,WAAW,kBAAkB,IAAI,KAAK,gBAAgB,GAAG;AAGlF,UAAI,MAAM,KAAK,oBAAoB,KAAK,KAAK,UAAU,GAAG;AACtD;AAAA,MACJ;AAGA,WAAK,oBAAoB,KAAK,iBAAiB;AAG/C,YAAM,iBAAiB,IAAI,WAAW,SAClC,eAAe,KAAK,IAAI,MAAM,GAAG,IACjC,eAAe,KAAK,IAAI,OAAO,GAAG;AACtC,cAAQ,IAAI,oBAAoB,cAAc;AAG9C,YAAM,aAAa,KAAK,iBAAiB,KAAK,UAAU;AACxD,UAAI;AAEJ,UAAI;AACA,oBAAY,KAAK,oBAAoB,YAAY,GAAG;AAAA,MACxD,SAAS,OAAO;AACZ,gBAAQ,IAAI,gBAAgB,YAAY,KAAK;AAC7C,eAAO,aAAa,KAAK,sBAAsB,EAAE,aAAa,cAAc,MAAM,IAAI,CAAC;AAAA,MAC3F;AAGA,YAAM,gBAAgB,MAAM,KAAK,sBAAsB,SAAS;AAChE,UAAI,CAAC,eAAe;AAChB,eAAO,aAAa,KAAK,+BAA+B,EAAE,aAAa,cAAc,MAAM,IAAI,CAAC;AAAA,MACpG;AAGA,WAAK,iBAAiB,oBAAoB,IAAI,IAAI,SAAS,YAAY,CAAC;AACxE,cAAQ,IAAI,mCAAmC,IAAI,SAAS,YAAY,CAAC;AAGzE,UAAI,SAAsE;AAE1E,UAAI;AACA,iBAAS,MAAM,KAAK,gBAAgB,WAAW,gBAAgB,GAAG;AAAA,MACtE,SAAS,YAAqB;AAC1B,iBAAS,MAAM,KAAK,oBAAoB,YAAY,WAAW,cAAc;AAAA,MACjF;AAEA,UAAI,CAAC,QAAQ;AACT,eAAO,aAAa,KAAK,wBAAwB,EAAE,aAAa,cAAc,MAAM,IAAI,CAAC;AAAA,MAC7F;AAEA,aAAO,KAAK,sBAAsB,KAAK,OAAO,WAAW,eAAe,aAAa,OAAO,QAAQ;AAAA,IAExG,SAAS,OAAO;AACZ,cAAQ,MAAM,0BAA0B,KAAK;AAC7C,aAAO,aAAa,KAAK,yBAAyB,EAAE,aAAa,cAAc,MAAM,IAAI,CAAC;AAAA,IAC9F;AAAA,EACJ;AACJ;AAx1Ca,YACM,YAAY,IAAI,YAAY,OAAO,KAAK;AAD9C,cAAN;AAAA,EADN,UAAU;AAAA,GACE;",
  "names": ["_", "options", "formatted"]
}
