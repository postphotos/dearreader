{
  "version": 3,
  "sources": ["../../../../src/cloud-functions/__tests__/queue-endpoint.test.ts"],
  "sourcesContent": ["import { expect } from 'chai';\nimport { QueueManager } from '../../services/queue-manager.js';\nimport { Logger } from '../../shared/logger.js';\n\n// Mock Express Response\nclass MockResponse {\n  private _status?: number;\n  private _data?: any;\n  private _headers: { [key: string]: string } = {};\n  private _contentType?: string;\n\n  status(code: number) {\n    this._status = code;\n    return this;\n  }\n\n  type(contentType: string) {\n    this._contentType = contentType;\n    return this;\n  }\n\n  setHeader(key: string, value: string) {\n    this._headers[key] = value;\n    return this;\n  }\n\n  send(data: any) {\n    this._data = data;\n    return this;\n  }\n\n  json(data: any) {\n    this._data = data;\n    this._contentType = 'application/json';\n    return this;\n  }\n\n  getStatus() { return this._status; }\n  getData() { return this._data; }\n  getHeaders() { return this._headers; }\n  getContentType() { return this._contentType; }\n}\n\ndescribe('Queue Endpoints', () => {\n  let queueManager: QueueManager;\n  let mockLogger: Logger;\n\n  beforeEach(() => {\n    mockLogger = {\n      info: () => {},\n      error: () => {},\n      warn: () => {},\n      debug: () => {}\n    } as any;\n\n    queueManager = new QueueManager(mockLogger);\n  });\n\n  describe('/queue endpoint', () => {\n    it('should return queue statistics as JSON', async () => {\n      // Add some tasks to have meaningful stats\n      await queueManager.enqueue({ url: 'https://example.com', priority: 1 });\n      await queueManager.enqueue({ url: 'https://test.com', priority: 2 });\n\n      const mockRes = new MockResponse();\n\n      // Simulate the endpoint handler\n      const stats = queueManager.getStatistics();\n      const response = {\n        ...stats,\n        timestamp: new Date().toISOString(),\n        status: \"operational\"\n      };\n\n      mockRes.json(response);\n\n      expect(mockRes.getContentType()).to.equal('application/json');\n      const data = mockRes.getData();\n      expect(data).to.have.property('total_requests', 2);\n      expect(data).to.have.property('active_requests', 0);\n      expect(data).to.have.property('pending_requests', 2);\n      expect(data).to.have.property('status', 'operational');\n      expect(data).to.have.property('timestamp');\n    });\n\n    it('should return correct statistics after task completion', async () => {\n      const taskId = await queueManager.enqueue({ url: 'https://example.com', priority: 1 });\n\n      // Simulate task processing\n      const task = await queueManager.dequeue();\n      queueManager.completeTask(taskId);\n\n      const stats = queueManager.getStatistics();\n      expect(stats.total_requests).to.equal(1);\n      expect(stats.completed_requests).to.equal(1);\n      expect(stats.pending_requests).to.equal(0);\n    });\n\n    it('should return correct statistics after task failure', async () => {\n      const taskId = await queueManager.enqueue({ url: 'https://example.com', priority: 1 });\n\n      // Simulate task processing and failure\n      const task = await queueManager.dequeue();\n      queueManager.failTask(taskId, 'Network error');\n\n      const stats = queueManager.getStatistics();\n      expect(stats.total_requests).to.equal(1);\n      expect(stats.failed_requests).to.equal(1);\n      expect(stats.pending_requests).to.equal(0);\n    });\n  });\n\n  describe('/queue-ui endpoint', () => {\n    it('should return HTML page for queue monitoring', () => {\n      const mockRes = new MockResponse();\n\n      // Simulate the endpoint handler\n      const html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>DearReader Queue Monitor</title>\n  <link rel=\"stylesheet\" href=\"/style.css\">\n</head>\n<body>\n  <div class=\"container\">\n    <h1>DearReader Queue Monitor</h1>\n    <div id=\"queue-stats\">Loading...</div>\n    <button onclick=\"refreshQueueStats()\">Refresh</button>\n  </div>\n  <script src=\"/main.js\"></script>\n</body>\n</html>`;\n\n      mockRes.type('text/html').send(html);\n\n      expect(mockRes.getContentType()).to.equal('text/html');\n      const data = mockRes.getData();\n      expect(data).to.include('DearReader Queue Monitor');\n      expect(data).to.include('queue-stats');\n      expect(data).to.include('refreshQueueStats()');\n      expect(data).to.include('/style.css');\n      expect(data).to.include('/main.js');\n    });\n\n    it('should include proper HTML structure', () => {\n      const mockRes = new MockResponse();\n\n      const html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>DearReader Queue Monitor</title>\n  <link rel=\"stylesheet\" href=\"/style.css\">\n</head>\n<body>\n  <div class=\"container\">\n    <h1>DearReader Queue Monitor</h1>\n    <div id=\"queue-stats\">Loading...</div>\n    <button onclick=\"refreshQueueStats()\">Refresh</button>\n  </div>\n  <script src=\"/main.js\"></script>\n</body>\n</html>`;\n\n      mockRes.type('text/html').send(html);\n\n      const data = mockRes.getData();\n      expect(data).to.include('<!DOCTYPE html>');\n      expect(data).to.include('<meta charset=\"UTF-8\">');\n      expect(data).to.include('<title>DearReader Queue Monitor</title>');\n      expect(data).to.include('<div class=\"container\">');\n      expect(data).to.include('<h1>DearReader Queue Monitor</h1>');\n    });\n  });\n\n  describe('Queue Statistics Integration', () => {\n    it('should provide real-time statistics for monitoring', async () => {\n      // Simulate various queue states\n      await queueManager.enqueue({ url: 'https://example1.com', priority: 1 });\n      await queueManager.enqueue({ url: 'https://example2.com', priority: 2 });\n      await queueManager.enqueue({ url: 'https://example3.com', priority: 1 });\n\n      // Process one task\n      const task = await queueManager.dequeue();\n      if (task) {\n        queueManager.completeTask(task.id);\n      }\n\n      const stats = queueManager.getStatistics();\n\n      expect(stats.total_requests).to.equal(3);\n      expect(stats.completed_requests).to.equal(1);\n      expect(stats.pending_requests).to.equal(2);\n      expect(stats.active_requests).to.equal(0);\n      expect(stats.failed_requests).to.equal(0);\n      expect(stats.max_concurrent).to.be.a('number');\n    });\n\n    it('should handle concurrent task processing', async () => {\n      const tasks: Promise<string>[] = [];\n      for (let i = 0; i < 5; i++) {\n        tasks.push(queueManager.enqueue({ url: `https://example${i}.com`, priority: 1 }));\n      }\n\n      await Promise.all(tasks);\n\n      // Simulate processing multiple tasks\n      for (let i = 0; i < 3; i++) {\n        const task = await queueManager.dequeue();\n        if (task) {\n          queueManager.completeTask(task.id);\n        }\n      }\n\n      const stats = queueManager.getStatistics();\n      expect(stats.total_requests).to.equal(5);\n      expect(stats.completed_requests).to.equal(3);\n      expect(stats.pending_requests).to.equal(2);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle queue statistics errors gracefully', () => {\n      // Test with empty queue\n      const stats = queueManager.getStatistics();\n\n      expect(stats.total_requests).to.equal(0);\n      expect(stats.completed_requests).to.equal(0);\n      expect(stats.failed_requests).to.equal(0);\n      expect(stats.pending_requests).to.equal(0);\n      expect(stats.active_requests).to.equal(0);\n    });\n\n    it('should handle malformed task data', async () => {\n      try {\n        // This should work fine with proper validation\n        await queueManager.enqueue({ url: 'https://example.com', priority: 1 });\n        expect(queueManager.getAllTasks()).to.have.lengthOf(1);\n      } catch (error) {\n        // If there's an error, it should be handled properly\n        expect(error).to.be.instanceOf(Error);\n      }\n    });\n  });\n});\n"],
  "mappings": "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",
  "names": []
}
