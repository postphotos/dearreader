{
  "version": 3,
  "sources": ["../../../../src/cloud-functions/__tests__/crawler.test.ts"],
  "sourcesContent": ["/* eslint-disable max-len */\nimport { expect } from 'chai';\n\n// Mock dependencies\nconst mockPuppeteerControl = {\n  scrape: async function* (url: URL) {\n    console.log('Mock scrape called with URL:', url.href);\n    // Mock real website content\n    if (url.href.includes('ala.org')) {\n      yield {\n        title: 'American Library Association',\n        href: url.toString(),\n        html: `\n          <html>\n            <head><title>American Library Association</title></head>\n            <body>\n              <h1>American Library Association</h1>\n              <p>The American Library Association is the foremost national organization providing resources to inspire library and information professionals to transform their communities through essential learning and access to information.</p>\n              <a href=\"https://www.ala.org/aboutala/\">About ALA</a>\n              <a href=\"https://www.ala.org/advocacy/\">Advocacy</a>\n              <img src=\"https://www.ala.org/images/logo.png\" alt=\"ALA Logo\">\n            </body>\n          </html>\n        `,\n        text: 'American Library Association\\n\\nThe American Library Association is the foremost national organization providing resources to inspire library and information professionals to transform their communities through essential learning and access to information.\\nAbout ALA\\nAdvocacy',\n        parsed: {\n          title: 'American Library Association',\n          content: 'The American Library Association is the foremost national organization providing resources to inspire library and information professionals to transform their communities through essential learning and access to information.',\n          excerpt: 'The American Library Association is the foremost national organization providing resources to inspire library and information professionals to transform their communities through essential learning and access to information.',\n          lang: 'en',\n          siteName: 'American Library Association',\n          byline: 'ALA Staff',\n          publishedTime: '2023-01-01'\n        },\n        imgs: [{\n          src: 'https://www.ala.org/images/logo.png',\n          width: 200,\n          height: 100,\n          alt: 'ALA Logo'\n        }]\n      };\n    } else if (url.href.includes('worldliteracyfoundation.org')) {\n      yield {\n        title: 'World Literacy Foundation',\n        href: url.toString(),\n        html: `\n          <html>\n            <head><title>World Literacy Foundation</title></head>\n            <body>\n              <h1>World Literacy Foundation</h1>\n              <p>The World Literacy Foundation is dedicated to improving literacy rates worldwide through innovative programs and partnerships.</p>\n              <a href=\"https://worldliteracyfoundation.org/programs/\">Programs</a>\n              <a href=\"https://worldliteracyfoundation.org/impact/\">Impact</a>\n            </body>\n          </html>\n        `,\n        text: 'World Literacy Foundation\\n\\nThe World Literacy Foundation is dedicated to improving literacy rates worldwide through innovative programs and partnerships.\\nPrograms\\nImpact',\n        parsed: {\n          title: 'World Literacy Foundation',\n          content: 'The World Literacy Foundation is dedicated to improving literacy rates worldwide through innovative programs and partnerships.',\n          excerpt: 'The World Literacy Foundation is dedicated to improving literacy rates worldwide through innovative programs and partnerships.',\n          lang: 'en',\n          siteName: 'World Literacy Foundation',\n          byline: 'WLF Team',\n          publishedTime: '2023-01-01'\n        },\n        imgs: []\n      };\n    } else if (url.href.includes('wikipedia.org')) {\n      yield {\n        title: 'Reading - Wikipedia',\n        href: url.toString(),\n        html: `\n          <html>\n            <head><title>Reading - Wikipedia</title></head>\n            <body>\n              <h1>Reading</h1>\n              <p>Reading is the process of taking in the sense or meaning of letters, symbols, etc., especially by sight or touch.</p>\n              <p>For other uses, see <a href=\"/wiki/Reading_(disambiguation)\">Reading (disambiguation)</a>.</p>\n            </body>\n          </html>\n        `,\n        text: 'Reading - Wikipedia\\n\\nReading is the process of taking in the sense or meaning of letters, symbols, etc., especially by sight or touch.\\n\\nFor other uses, see Reading (disambiguation).',\n        parsed: {\n          title: 'Reading - Wikipedia',\n          content: 'Reading is the process of taking in the sense or meaning of letters, symbols, etc., especially by sight or touch. For other uses, see Reading (disambiguation).',\n          excerpt: 'Reading is the process of taking in the sense or meaning of letters, symbols, etc., especially by sight or touch.',\n          lang: 'en',\n          siteName: 'Wikipedia',\n          byline: 'Wikipedia Contributors',\n          publishedTime: '2023-01-01'\n        },\n        imgs: []\n      };\n    } else {\n      // Default fallback\n      yield {\n        title: 'Test Page',\n        href: url.toString(),\n        html: `<html><head><title>Test Page</title></head><body><h1>Test Page</h1><p>This is a test page.</p></body></html>`,\n        text: 'Test Page\\n\\nThis is a test page.',\n        parsed: {\n          title: 'Test Page',\n          content: 'This is a test page.',\n          excerpt: 'This is a test page.',\n          lang: 'en',\n          siteName: 'Test Site',\n          byline: 'Test Author',\n          publishedTime: '2023-01-01'\n        },\n        imgs: []\n      };\n    }\n  },\n  circuitBreakerHosts: new Set(),\n  on: () => {},\n  emit: () => {}\n} as any;\n\nconst mockJSDomControl = {\n  inferSnapshot: (snapshot: any) => ({\n    ...snapshot,\n    links: {\n      'https://www.ala.org/aboutala/': 'About ALA',\n      'https://www.ala.org/advocacy/': 'Advocacy',\n      'https://worldliteracyfoundation.org/programs/': 'Programs',\n      'https://worldliteracyfoundation.org/impact/': 'Impact',\n      'https://en.wikipedia.org/wiki/Reading_(disambiguation)': 'Reading (disambiguation)'\n    }\n  }),\n  narrowSnapshot: (snapshot: any) => snapshot,\n  snippetToElement: (snippet?: string) => ({\n    querySelectorAll: () => [],\n    innerHTML: snippet || '',\n    textContent: snippet || ''\n  }),\n  runTurndown: () => 'Title: World Literacy Foundation\\n\\nThe World Literacy Foundation is dedicated to improving literacy rates worldwide through innovative programs and partnerships.\\n\\nLinks/Buttons:\\n[Programs](https://worldliteracyfoundation.org/programs/)\\n[Impact](https://worldliteracyfoundation.org/impact/)'\n} as any;\n\nconst mockPDFExtractor = {\n  extract: async () => ({ content: 'Mock PDF content' })\n} as any;\n\nconst mockRobotsChecker = {\n  check: async () => true\n} as any;\n\nconst mockFirebaseStorage = {} as any;\nconst mockThreadLocal = {\n  _data: new Map<string, any>(),\n  get: function(key: string) {\n    return this._data.get(key);\n  },\n  set: function(key: string, value: any) {\n    this._data.set(key, value);\n  }\n} as any;\nclass MockResponse {\n  private _status?: number;\n  private _data?: any;\n  private _headers: { [key: string]: string } = {};\n  private _contentType?: string;\n\n  status(code: number) {\n    this._status = code;\n    return this;\n  }\n\n  type(contentType: string) {\n    this._contentType = contentType;\n    return this;\n  }\n\n  setHeader(key: string, value: string) {\n    this._headers[key] = value;\n    return this;\n  }\n\n  send(data: any) {\n    // For JSON responses, don't call toString\n    if (this._contentType === 'application/json') {\n      this._data = data;\n    } else if (data && typeof data === 'object' && typeof data.toString === 'function') {\n      this._data = data.toString();\n    } else {\n      this._data = data;\n    }\n    return this;\n  }  getStatus() { return this._status; }\n  getData() { return this._data; }\n  getHeaders() { return this._headers; }\n  getContentType() { return this._contentType; }\n}\n\n// Test suite using proper mocha functions\ndescribe('CrawlerHost JSON Response Format', () => {\n  it('should return JSON response with links and markdown content', async () => {\n    // Import here to avoid circular dependencies\n    const { CrawlerHost } = await import('../crawler.js');\n    const crawlerHost = new CrawlerHost(\n      mockPuppeteerControl,\n      mockJSDomControl,\n      mockPDFExtractor,\n      mockRobotsChecker,\n      mockFirebaseStorage,\n      mockThreadLocal\n    );\n\n    const mockReq = {\n      url: '/https://www.ala.org',\n      method: 'GET',\n      query: {},\n      headers: {\n        accept: 'application/json'\n      },\n      hostname: 'localhost'\n    } as any;\n\n    const mockRes = new MockResponse();\n\n    await crawlerHost.crawl(mockReq, mockRes as any);\n\n    const responseData = mockRes.getData();\n\n    // Verify response structure\n    expect(responseData).to.have.property('code', 200);\n    expect(responseData).to.have.property('status', 20000);\n    expect(responseData).to.have.property('data');\n\n    const data = responseData.data;\n    expect(data).to.have.property('title', 'American Library Association');\n    expect(data).to.have.property('description').that.is.a('string');\n    expect(data).to.have.property('url').that.includes('https://www.ala.org');\n    expect(data).to.have.property('content').that.is.a('string');\n    expect(data).to.have.property('links').that.is.an('object');\n\n    // Verify links are included\n    expect(data.links).to.have.property('https://www.ala.org/aboutala/', 'About ALA');\n    expect(data.links).to.have.property('https://www.ala.org/advocacy/', 'Advocacy');\n\n    // Verify images are included\n    expect(data).to.have.property('images').that.is.an('object');\n\n    // Verify metadata\n    expect(data).to.have.property('metadata').that.is.an('object');\n    expect(data.metadata).to.have.property('lang', 'en');\n    expect(data.metadata).to.have.property('description');\n    expect(data.metadata).to.have.property('og:title', 'American Library Association');\n    expect(data.metadata).to.have.property('og:site_name', 'American Library Association');\n    expect(data.metadata).to.have.property('article:author', 'ALA Staff');\n    expect(data.metadata).to.have.property('article:published_time', '2023-01-01');\n  });\n\n  it('should handle markdown content in JSON response', async () => {\n    const { CrawlerHost } = await import('../crawler.js');\n\n    const crawlerHost = new CrawlerHost(\n      mockPuppeteerControl,\n      mockJSDomControl,\n      mockPDFExtractor,\n      mockRobotsChecker,\n      mockFirebaseStorage,\n      mockThreadLocal\n    );\n\n    const mockReq = {\n      url: '/https://worldliteracyfoundation.org',\n      method: 'GET',\n      query: {},\n      headers: {\n        accept: 'application/json'\n      },\n      hostname: 'localhost'\n    } as any;\n\n    const mockRes = new MockResponse();\n\n    await crawlerHost.crawl(mockReq, mockRes as any);\n\n    const responseData = mockRes.getData();\n\n    // Verify that content includes markdown formatting\n    expect(responseData.data.content).to.be.a('string');\n    expect(responseData.data.content.length).to.be.greaterThan(0);\n  });\n});\n\ndescribe('CrawlerHost Markdown Response Format', () => {\n  it('should return markdown response with links', async () => {\n    const { CrawlerHost } = await import('../crawler.js');\n\n    const crawlerHost = new CrawlerHost(\n      mockPuppeteerControl,\n      mockJSDomControl,\n      mockPDFExtractor,\n      mockRobotsChecker,\n      mockFirebaseStorage,\n      mockThreadLocal\n    );\n\n    const mockReq = {\n      url: '/https://worldliteracyfoundation.org',\n      method: 'GET',\n      query: {\n        withLinksSummary: 'true'\n      },\n      headers: {\n        accept: 'text/plain',\n        'x-with-links-summary': 'true'\n      },\n      hostname: 'localhost'\n    } as any;\n\n    // Ensure links are included in the response\n    mockThreadLocal.set('withLinksSummary', true);\n\n    const mockRes = new MockResponse();\n\n    await crawlerHost.crawl(mockReq, mockRes as any);\n\n    const responseData = mockRes.getData();\n\n    // Verify content includes title and links\n    expect(responseData).to.include('World Literacy Foundation');\n    expect(responseData).to.include('Links/Buttons:');\n    expect(responseData).to.include('[Programs](https://worldliteracyfoundation.org/programs/)');\n    expect(responseData).to.include('[Impact](https://worldliteracyfoundation.org/impact/)');\n  });\n});\n\ndescribe('CrawlerHost Error Handling', () => {\n  it('should handle invalid URLs', async () => {\n    const { CrawlerHost } = await import('../crawler.js');\n\n    const crawlerHost = new CrawlerHost(\n      mockPuppeteerControl,\n      mockJSDomControl,\n      mockPDFExtractor,\n      mockRobotsChecker,\n      mockFirebaseStorage,\n      mockThreadLocal\n    );\n\n    const mockReq = {\n      url: '/invalid-url',\n      method: 'GET',\n      query: {},\n      headers: {\n        accept: 'application/json'\n      },\n      hostname: 'localhost'\n    } as any;\n\n    const mockRes = new MockResponse();\n\n    await crawlerHost.crawl(mockReq, mockRes as any);\n\n    expect(mockRes.getStatus()).to.equal(400);\n    expect(mockRes.getData()).to.equal('Invalid URL or TLD');\n  });\n\n  it('should handle favicon requests', async () => {\n    const { CrawlerHost } = await import('../crawler.js');\n\n    const crawlerHost = new CrawlerHost(\n      mockPuppeteerControl,\n      mockJSDomControl,\n      mockPDFExtractor,\n      mockRobotsChecker,\n      mockFirebaseStorage,\n      mockThreadLocal\n    );\n\n    const mockReq = {\n      url: '/favicon.ico',\n      method: 'GET',\n      query: {},\n      headers: {},\n      hostname: 'localhost'\n    } as any;\n\n    const mockRes = new MockResponse();\n\n    await crawlerHost.crawl(mockReq, mockRes as any);\n\n    expect(mockRes.getStatus()).to.equal(404);\n    expect(mockRes.getData()).to.equal('Favicon not available');\n  });\n});\n\ndescribe('CrawlerHost Index Page', () => {\n  it('should return index page for root requests', async () => {\n    const { CrawlerHost } = await import('../crawler.js');\n\n    const crawlerHost = new CrawlerHost(\n      mockPuppeteerControl,\n      mockJSDomControl,\n      mockPDFExtractor,\n      mockRobotsChecker,\n      mockFirebaseStorage,\n      mockThreadLocal\n    );\n\n    const mockReq = {\n      url: '/',\n      method: 'GET',\n      query: {},\n      headers: {\n        accept: 'text/plain'\n      },\n      hostname: 'localhost',\n      get: (header: string) => {\n        if (header === 'host') return 'localhost:3000';\n        if (header === 'x-forwarded-proto') return 'http';\n        return undefined;\n      },\n      protocol: 'http'\n    } as any;\n\n    const mockRes = new MockResponse();\n\n    // Ensure withLinksSummary is not set\n    mockThreadLocal.set('withLinksSummary', false);\n\n    await crawlerHost.crawl(mockReq, mockRes as any);\n\n    const responseData = mockRes.getData();\n\n    // Handle both string and object responses\n    const responseString = typeof responseData === 'string' ? responseData : responseData?.toString?.() || JSON.stringify(responseData);\n\n    expect(responseString).to.include('DearReader API - Local Web Content Extractor');\n    expect(responseString).to.include('Convert any URL to LLM-friendly content');\n    expect(responseString).to.include('/https://example.com');\n  });\n});\n"],
  "mappings": "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",
  "names": []
}
