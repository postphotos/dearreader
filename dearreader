#!/bin/bash

# DearReader - Unified Project Manager
# A delightful CLI for managing the DearReader web crawler

set -e

# Get the directory where this script is located and navigate to project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$SCRIPT_DIR"
cd "$PROJECT_ROOT"

# Color and formatting constants
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Emoji constants
ROCKET="üöÄ"
GEAR="‚öôÔ∏è"
CHECK="‚úÖ"
CROSS="‚ùå"
WARNING="‚ö†Ô∏è"
INFO="‚ÑπÔ∏è"
BOOK="üìö"
DOCKER="üê≥"
PYTHON="üêç"
NODE="üü¢"
TEST="üß™"
STOP="üõë"
SPARKLES="‚ú®"
HEART="‚ù§Ô∏è"

# Logging functions with colors and emojis
log_info() {
    echo -e "${BLUE}${INFO}${NC} $1"
}

log_success() {
    echo -e "${GREEN}${CHECK}${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}${WARNING}${NC} $1"
}

log_error() {
    echo -e "${RED}${CROSS}${NC} $1"
}

log_header() {
    echo -e "\n${MAGENTA}${BOLD}$1${NC}"
    echo -e "${MAGENTA}$(printf '%.0s=' {1..50})${NC}"
}

log_subheader() {
    echo -e "${CYAN}${BOLD}$1${NC}"
}

# Show beautiful help
show_help() {
    cat << 'EOF'

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                     üìö DearReader CLI                       ‚ïë
‚ïë              Web Content Extraction Made Simple             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

USAGE:
    ./dearreader <command> [subcommand] [options]

COMMANDS:
    setup           üèóÔ∏è  Set up development environment
    dev             üöÄ  Start development environment
    test            üß™  Run tests (js, python, or all)
    run             ‚ñ∂Ô∏è   Start services (dev/prod)
    stop            üõë  Stop all services
    status          üìä  Show system status
    logs            üìù  Show service logs
    clean           üßπ  Clean up containers and volumes
    migration       üìã  Show migration status and tips

OPTIONS:
    --verbose, -v   Show detailed output
    --force, -f     Continue despite errors
    --follow, -F    Follow logs in real-time

EXAMPLES:
    ./dearreader setup              # First-time setup
    ./dearreader dev                # Start development
    ./dearreader test all           # Run all tests
    ./dearreader run prod           # Start production
    ./dearreader status             # Check system status
    ./dearreader api test           # Test API endpoints
    ./dearreader logs -F            # Follow all logs

QUICK START:
    1. ./scripts/quickstart.sh    # 1-click setup (fastest!)
    2. ./dearreader setup         # Manual setup
    3. ./dearreader dev           # Start development
    4. Open http://localhost:3001

EOF
}

# Check if Docker is available
check_docker() {
    if ! command -v docker >/dev/null 2>&1; then
        log_error "Docker is not installed or not in PATH"
        echo "Please install Docker: https://www.docker.com/get-started"
        exit 1
    fi

    if ! docker version >/dev/null 2>&1; then
        log_error "Docker daemon is not running"
        echo "Please start Docker and try again"
        exit 1
    fi

    if ! command -v docker-compose >/dev/null 2>&1; then
        log_error "Docker Compose is not installed"
        echo "Please install Docker Compose"
        exit 1
    fi
}

# Cross-platform command execution with better feedback
run_cmd() {
    local cmd="$1"
    local description="$2"
    local show_output="${3:-false}"

    if [ "$VERBOSE" = true ] || [ "$show_output" = true ]; then
        log_info "$description..."
        echo -e "${CYAN}  ‚îî‚îÄ ${cmd}${NC}"
        eval "$cmd"
    else
        log_info "$description..."
        if ! eval "$cmd" >/dev/null 2>&1; then
            log_error "Command failed: $cmd"
            return 1
        fi
    fi
}

# Setup command - comprehensive environment setup
cmd_setup() {
    log_header "${ROCKET} Setting up DearReader Environment"

    # Pre-flight checks
    log_subheader "Pre-flight Checks"

    # Check internet connectivity
    if ! ping -c 1 -W 2 google.com >/dev/null 2>&1; then
        log_error "No internet connection detected. Please check your network."
        exit 1
    fi
    log_success "Internet connection verified"

    # Check available disk space (need at least 2GB)
    if [[ "$OSTYPE" != "msys" && "$OSTYPE" != "win32" ]]; then
        local available_space=$(df -BG . | tail -1 | awk '{print $4}' | sed 's/G.*//')
        if [ "$available_space" -lt 2 ]; then
            log_error "Insufficient disk space. Need at least 2GB free."
            exit 1
        fi
        log_success "Sufficient disk space available"
    fi

    # Check prerequisites
    log_subheader "Checking Prerequisites"
    check_docker

    # Check for Node.js and npm
    if ! command -v node >/dev/null 2>&1; then
        log_error "Node.js is not installed. Please install Node.js 18+ from https://nodejs.org"
        exit 1
    fi

    if ! command -v npm >/dev/null 2>&1; then
        log_error "npm is not installed. Please install npm (usually comes with Node.js)"
        exit 1
    fi

    local node_version=$(node --version | sed 's/v//')
    if [[ "$(printf '%s\n' "$node_version" "18.0.0" | sort -V | head -n1)" != "18.0.0" ]]; then
        log_warn "Node.js version $node_version detected. Recommended: 18+"
    fi

    log_success "Node.js environment ready"

    # Check for uv (Python package manager)
    if ! command -v uv >/dev/null 2>&1; then
        log_warn "uv not found. Installing uv for faster Python package management..."
        if ! run_cmd "curl -LsSf https://astral.sh/uv/install.sh | sh" "Installing uv"; then
            log_warn "Failed to install uv automatically. Will use pip as fallback."
            USE_UV=false
            log_info "USE_UV set to: $USE_UV"
        else
            export PATH="$HOME/.cargo/bin:$PATH"
            USE_UV=true
        fi
    else
        USE_UV=true
    fi

    # Create necessary directories
    log_subheader "Creating Project Structure"
    run_cmd "mkdir -p storage logs docker js/node_modules" "Creating directories"

    # Move Dockerfile if needed
    if [ -f "Dockerfile" ] && [ ! -f "docker/Dockerfile" ]; then
        run_cmd "mv Dockerfile docker/" "Moving Dockerfile to docker directory"
    fi

    # Create default config
    if [ ! -f "config.yaml" ]; then
        cat > config.yaml << 'EOF'
url: "http://localhost:3001"
storage:
  screenshots: "./storage"
  logs: "./logs"
EOF
        log_success "Created default config.yaml"
    fi

    # Build Docker images
    log_subheader "Building Docker Images"
    run_cmd "docker-compose build" "Building Docker images"

    # Setup Python environment
    log_subheader "Setting up Python Environment"
    log_info "USE_UV is: $USE_UV"
    if [ "$USE_UV" = true ]; then
        run_cmd "uv venv --clear" "Creating Python virtual environment"
    else
        run_cmd "python -m venv .venv" "Creating Python virtual environment (using venv)"
    fi

    # Activate virtual environment (cross-platform)
    if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
        source .venv/Scripts/activate
    else
        source .venv/bin/activate
    fi
    log_success "Python virtual environment ready"

    # Install Python dependencies
    if [ "$USE_UV" = true ]; then
        run_cmd "uv pip install -r py/requirements.txt" "Installing Python dependencies"
    else
        run_cmd "pip install -r py/requirements.txt" "Installing Python dependencies (using pip)"
    fi

    # Install Node.js dependencies
    log_subheader "Setting up Node.js Environment"
    run_cmd "npm install --prefix js" "Installing Node.js dependencies"

    log_success "Setup complete!"
    echo -e "\n${GREEN}${SPARKLES} You're all set! Next steps:${NC}"
    echo -e "  ${CYAN}1.${NC} Start development: ${WHITE}./dearreader dev${NC}"
    echo -e "  ${CYAN}2.${NC} Run tests: ${WHITE}./dearreader test${NC}"
    echo -e "  ${CYAN}3.${NC} Open browser: ${WHITE}http://localhost:3001${NC}"
}

# Development command
cmd_dev() {
    log_header "${GEAR} Starting Development Environment"

    check_docker

    # Clean up any existing containers
    run_cmd "docker-compose down --remove-orphans" "Cleaning up existing containers"

    # Start development environment
    run_cmd "docker-compose --profile dev up --build -d" "Starting development services"

    log_success "Development environment started!"
    echo -e "\n${GREEN}${HEART} Services are running:${NC}"
    echo -e "  ${CYAN}‚Ä¢${NC} Web Interface: ${WHITE}http://localhost:3001${NC}"
    echo -e "  ${CYAN}‚Ä¢${NC} API Endpoint: ${WHITE}http://localhost:3001/https://www.ala.org${NC}"
    echo -e "  ${CYAN}‚Ä¢${NC} View logs: ${WHITE}./dearreader logs${NC}"

    # Show logs if requested
    if [ "$FOLLOW" = true ]; then
        echo -e "\n${YELLOW}Following logs (Ctrl+C to exit)...${NC}"
        docker-compose logs -f js-functions python
    fi
}

# Test command
cmd_test() {
    local test_type="${1:-all}"
    log_header "${TEST} Running Tests ($test_type)"

    case "$test_type" in
        js)
            run_cmd "docker-compose --profile dev run --rm js-test" "Running JavaScript tests" true
            ;;
        python)
            if ! command -v uv >/dev/null 2>&1 && ! command -v python >/dev/null 2>&1; then
                log_error "Neither uv nor python found. Please run setup first"
                exit 1
            fi
            if command -v uv >/dev/null 2>&1; then
                run_cmd "uv run py/app.py tests --verbose" "Running Python tests" true
            else
                run_cmd "python py/app.py tests --verbose" "Running Python tests (using python)" true
            fi
            ;;
        all)
            log_subheader "Running JavaScript Tests"
            if run_cmd "docker-compose --profile dev run --rm js-test" "Running JavaScript tests" true; then
                log_success "JavaScript tests passed"
            else
                log_error "JavaScript tests failed"
                [ "$FORCE" != true ] && exit 1
            fi

            log_subheader "Running Python Tests"
            if command -v uv >/dev/null 2>&1; then
                if run_cmd "uv run py/app.py tests --verbose" "Running Python tests" true; then
                    log_success "Python tests passed"
                else
                    log_error "Python tests failed"
                    [ "$FORCE" != true ] && exit 1
                fi
            elif command -v python >/dev/null 2>&1; then
                if run_cmd "python py/app.py tests --verbose" "Running Python tests (using python)" true; then
                    log_success "Python tests passed"
                else
                    log_error "Python tests failed"
                    [ "$FORCE" != true ] && exit 1
                fi
            else
                log_warn "Neither uv nor python found, skipping Python tests"
            fi

            log_success "All tests completed!"
            ;;
        *)
            log_error "Unknown test type: $test_type"
            echo "Available: js, python, all"
            exit 1
            ;;
    esac
}

# Run command
cmd_run() {
    local env="${1:-dev}"
    log_header "${ROCKET} Starting $env Environment"

    check_docker

    case "$env" in
        dev)
            run_cmd "docker-compose down --remove-orphans" "Cleaning up containers"
            run_cmd "docker-compose --profile dev up --build -d" "Starting development environment"
            log_success "Development environment started"
            log_info "View logs with: ./dearreader logs -F"
            ;;
        prod)
            run_cmd "docker-compose down --remove-orphans" "Cleaning up containers"
            run_cmd "docker-compose --profile prod up --build -d" "Starting production environment"
            log_success "Production environment started"
            log_info "Services running in background"
            ;;
        *)
            log_error "Unknown environment: $env"
            echo "Available: dev, prod"
            exit 1
            ;;
    esac
}

# Stop command
cmd_stop() {
    log_header "${STOP} Stopping Services"
    run_cmd "docker-compose down --remove-orphans" "Stopping all containers"
    log_success "All services stopped"
}

# Status command
cmd_status() {
    log_header "${INFO} System Status"

    echo -e "\n${BOLD}Docker Services:${NC}"
    if command -v docker >/dev/null 2>&1 && docker version >/dev/null 2>&1; then
        docker-compose ps
    else
        log_warn "Docker not available"
    fi

    echo -e "\n${BOLD}API Health Check:${NC}"
    if curl -s http://localhost:3001/health >/dev/null 2>&1; then
        log_success "API is healthy"
    else
        log_warn "API not responding (services may not be running)"
    fi

    echo -e "\n${BOLD}Project Structure:${NC}"
    for dir in storage logs docker js/node_modules; do
        if [ -d "$dir" ]; then
            echo -e "  ${GREEN}${CHECK}${NC} $dir"
        else
            echo -e "  ${RED}${CROSS}${NC} $dir"
        fi
    done

    echo -e "\n${BOLD}Configuration:${NC}"
    if [ -f "config.yaml" ]; then
        echo -e "  ${GREEN}${CHECK}${NC} config.yaml"
    else
        echo -e "  ${RED}${CROSS}${NC} config.yaml"
    fi
}

# Logs command
cmd_logs() {
    log_header "${BOOK} Service Logs"

    if [ "$FOLLOW" = true ]; then
        docker-compose logs -f
    else
        docker-compose logs
    fi
}

# Clean command
cmd_clean() {
    log_header "${WARNING} Cleaning Up"

    log_warn "This will remove all containers, volumes, and cached images"
    read -p "Are you sure? (y/N): " -n 1 -r
    echo

    if [[ $REPLY =~ ^[Yy]$ ]]; then
        run_cmd "docker-compose down --remove-orphans" "Stopping containers"
        run_cmd "docker-compose down --volumes --remove-orphans" "Removing volumes"
        run_cmd "docker system prune -f" "Cleaning Docker system"
        run_cmd "rm -rf storage/* logs/*" "Cleaning local storage"
        log_success "Cleanup complete"
    else
        log_info "Cleanup cancelled"
    fi
}

# API test command
cmd_api() {
    local action="${1:-test}"
    log_header "${DOCKER} API Testing"

    case "$action" in
        test)
            echo -e "\n${BOLD}Testing API endpoints...${NC}"

            # Test basic health
            if curl -s http://localhost:3001/health >/dev/null 2>&1; then
                log_success "Health check passed"
            else
                log_error "Health check failed"
            fi

            # Test content extraction
            echo -e "\n${BOLD}Testing content extraction:${NC}"
            echo -e "  ${CYAN}ALA Website:${NC}"
            curl -s "http://localhost:3001/https://www.ala.org" | head -5

            echo -e "\n  ${CYAN}Wikipedia Reading:${NC}"
            curl -s "http://localhost:3001/https://en.wikipedia.org/wiki/Reading" | head -5

            # Test JSON response
            echo -e "\n${BOLD}Testing JSON response:${NC}"
            curl -s -H "Accept: application/json" "http://localhost:3001/https://worldliteracyfoundation.org" | jq '.data.title' 2>/dev/null || echo "  JSON parsing failed"
            ;;
        *)
            log_error "Unknown API action: $action"
            echo "Available: test"
            exit 1
            ;;
    esac
}

# Migration command
cmd_migration() {
    log_header "${BOOK} Migration Status"

    echo -e "\n${BOLD}‚úÖ Unified CLI Status:${NC}"
    echo -e "  ${GREEN}${CHECK}${NC} ./dearreader script created and working"
    echo -e "  ${GREEN}${CHECK}${NC} All functionality from old scripts preserved"
    echo -e "  ${GREEN}${CHECK}${NC} Enhanced with new features (status, logs, api test)"

    echo -e "\n${BOLD}üìã Old Scripts Status:${NC}"
    OLD_SCRIPTS=("setup.sh" "dev.sh" "run.sh")
    for script in "${OLD_SCRIPTS[@]}"; do
        if [ -f "$script" ]; then
            echo -e "  ${YELLOW}${WARNING}${NC} $script (deprecated, has migration notice)"
        else
            echo -e "  ${GREEN}${CHECK}${NC} $script (removed)"
        fi
    done

    echo -e "\n${BOLD}üîÑ Migration Commands:${NC}"
    echo -e "  ${CYAN}Old:${NC} ./setup.sh ${WHITE}‚Üí${NC} ${GREEN}New:${NC} ./dearreader setup"
    echo -e "  ${CYAN}Old:${NC} ./dev.sh ${WHITE}‚Üí${NC} ${GREEN}New:${NC} ./dearreader dev"
    echo -e "  ${CYAN}Old:${NC} ./run.sh test all ${WHITE}‚Üí${NC} ${GREEN}New:${NC} ./dearreader test all"

    echo -e "\n${BOLD}üÜï New Features:${NC}"
    echo -e "  ${MAGENTA}‚Ä¢${NC} ./dearreader status - System health check"
    echo -e "  ${MAGENTA}‚Ä¢${NC} ./dearreader logs -F - Follow logs in real-time"
    echo -e "  ${MAGENTA}‚Ä¢${NC} ./dearreader api test - Test API endpoints"
    echo -e "  ${MAGENTA}‚Ä¢${NC} ./dearreader clean - Safe cleanup"

    echo -e "\n${BOLD}üìö For detailed migration guide:${NC}"
    echo -e "  cat docs/migration.md"

    echo -e "\n${BOLD}üßπ To clean up old files:${NC}"
    echo -e "  ./scripts/cleanup.sh"
}

# Main logic
main() {
    local command="$1"
    shift || true

    # Parse flags
    VERBOSE=false
    FORCE=false
    FOLLOW=false

    local args_without_flags=()
    for arg in "$@"; do
        case "$arg" in
            --verbose|-v) VERBOSE=true ;;
            --force|-f) FORCE=true ;;
            --follow|-F) FOLLOW=true ;;
            *) args_without_flags+=("$arg") ;;
        esac
    done
    set -- "${args_without_flags[@]}"

    # Handle commands
    case "$command" in
        setup)
            cmd_setup
            ;;
        dev)
            cmd_dev
            ;;
        test)
            cmd_test "$1"
            ;;
        run)
            cmd_run "$1"
            ;;
        stop)
            cmd_stop
            ;;
        status)
            cmd_status
            ;;
        logs)
            cmd_logs
            ;;
        clean)
            cmd_clean
            ;;
        api)
            cmd_api "$1"
            ;;
        migration)
            cmd_migration
            ;;
        help|--help|-h|"")
            show_help
            exit 0
            ;;
        *)
            log_error "Unknown command: $command"
            echo
            show_help
            exit 1
            ;;
    esac
}

# Run main with all arguments
main "$@"
